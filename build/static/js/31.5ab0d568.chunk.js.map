{"version":3,"file":"static/js/31.5ab0d568.chunk.js","mappings":"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","sources":["components/schedule/EmployeeScheduleForm.js","hooks/useHourBalance.js","utils/scheduleUtils.js","components/schedule/WeeklyScheduleGrid.js","components/ui/Spinner.js","hooks/useWeeklySchedules.js","pages/WeeklySchedule.js"],"sourcesContent":["import PropTypes from \"prop-types\";\nimport { useCallback, useMemo, useState } from \"react\";\nimport { FaSave, FaTimes } from \"react-icons/fa\";\nimport styled, { keyframes } from \"styled-components\";\nimport {\n  calculateHours,\n  formatDate,\n  formatDateForInput,\n  getDaysOfWeek,\n} from \"../../utils/dateUtils\";\nimport Button from \"../ui/Button\";\nimport { FormInput } from \"../ui/Form\";\n\n// Animations\nconst fadeIn = keyframes`\n  from {\n    opacity: 0;\n    transform: translateY(-10px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n`;\n\nconst FormContainer = styled.div`\n  background-color: ${({ theme }) => theme.colors.background.primary};\n  color: ${({ theme }) => theme.colors.text.primary};\n  border-radius: 8px;\n  box-shadow: 0 4px 12px\n    ${({ theme }) =>\n      theme.mode === \"dark\" ? \"rgba(0, 0, 0, 0.3)\" : \"rgba(0, 0, 0, 0.1)\"};\n  padding: 1.5rem;\n  margin: 1rem 0;\n  animation: ${fadeIn} 0.3s ease-out;\n  max-width: 100%;\n  overflow-x: auto;\n  transition: background-color 0.2s ease, color 0.2s ease;\n\n  @media (max-width: 768px) {\n    padding: 1rem;\n  }\n`;\n\nconst FormTitle = styled.h3`\n  font-size: 1.25rem;\n  font-weight: 600;\n  margin-bottom: 1.5rem;\n  color: ${({ theme }) => theme.colors.text.primary};\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n\n  @media (max-width: 576px) {\n    flex-direction: column;\n    align-items: flex-start;\n    gap: 0.5rem;\n  }\n`;\n\nconst EmployeeInfo = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 1.5rem;\n  padding-bottom: 1rem;\n  border-bottom: 1px solid ${({ theme }) => theme.colors.border};\n\n  @media (min-width: 768px) {\n    flex-direction: row;\n    align-items: center;\n    justify-content: space-between;\n  }\n`;\n\nconst EmployeeName = styled.div`\n  font-size: 1.1rem;\n  font-weight: 600;\n  margin-bottom: 0.5rem;\n\n  @media (min-width: 768px) {\n    margin-bottom: 0;\n  }\n`;\n\nconst EmployeeDetails = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 0.25rem;\n  font-size: 0.9rem;\n  color: ${({ theme }) => theme.colors.text.secondary};\n\n  @media (min-width: 768px) {\n    align-items: flex-end;\n  }\n`;\n\nconst DaysGrid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n  gap: 1rem;\n  margin-bottom: 1.5rem;\n`;\n\nconst DayCard = styled.div`\n  background-color: ${({ $isWeekend, theme }) =>\n    $isWeekend\n      ? theme.colors.background.tertiary\n      : theme.colors.background.secondary};\n  color: ${({ theme }) => theme.colors.text.primary};\n  border: 1px solid ${({ theme }) => theme.colors.border};\n  border-radius: 6px;\n  padding: 1rem;\n  transition: all 0.2s ease;\n\n  &:hover {\n    box-shadow: 0 2px 8px\n      ${({ theme }) =>\n        theme.mode === \"dark\" ? \"rgba(0, 0, 0, 0.3)\" : \"rgba(0, 0, 0, 0.05)\"};\n  }\n`;\n\nconst DayHeader = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 0.75rem;\n  padding-bottom: 0.5rem;\n  border-bottom: 1px solid ${({ theme }) => theme.colors.border};\n`;\n\nconst DayName = styled.div`\n  font-weight: 600;\n  color: ${({ $isWeekend, theme }) =>\n    $isWeekend ? theme.colors.text.secondary : theme.colors.text.primary};\n`;\n\nconst DayDate = styled.div`\n  font-size: 0.85rem;\n  color: ${({ theme }) => theme.colors.text.secondary};\n`;\n\nconst InputGroup = styled.div`\n  margin-bottom: 0.75rem;\n`;\n\nconst InputLabel = styled.label`\n  display: block;\n  font-size: 0.85rem;\n  font-weight: 500;\n  margin-bottom: 0.25rem;\n  color: ${({ theme }) => theme.colors.text.secondary};\n`;\n\nconst ButtonGroup = styled.div`\n  display: flex;\n  gap: 0.5rem;\n\n  @media (max-width: 576px) {\n    width: 100%;\n    justify-content: flex-end;\n  }\n`;\n\nconst ActionButton = styled(Button)`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  gap: 0.5rem;\n  transition: all 0.2s ease;\n\n  &:hover {\n    transform: translateY(-2px);\n  }\n`;\n\nconst TotalHours = styled.div`\n  font-size: 1rem;\n  font-weight: 600;\n  margin-top: 1rem;\n  padding-top: 1rem;\n  border-top: 1px solid ${({ theme }) => theme.colors.border};\n  display: flex;\n  justify-content: space-between;\n`;\n\nconst TimeSlotContainer = styled.div`\n  margin-bottom: 0.5rem;\n`;\n\nconst TimeSlot = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n  margin-bottom: 0.5rem;\n`;\n\nconst TimeInput = styled(FormInput)`\n  width: 100%;\n  max-width: 120px;\n  background-color: ${({ theme }) => theme.colors.background.input};\n  color: ${({ theme }) => theme.colors.text.primary};\n  border-color: ${({ theme }) => theme.colors.border};\n\n  &:focus {\n    border-color: ${({ theme }) => theme.colors.primary.main};\n    box-shadow: 0 0 0 2px\n      ${({ theme }) =>\n        theme.mode === \"dark\"\n          ? \"rgba(59, 130, 246, 0.3)\"\n          : \"rgba(59, 130, 246, 0.2)\"};\n  }\n`;\n\nconst AddSlotButton = styled(Button)`\n  padding: 0.25rem 0.5rem;\n  font-size: 0.8rem;\n  margin-top: 0.25rem;\n`;\n\nconst RemoveSlotButton = styled(Button)`\n  padding: 0.25rem;\n  font-size: 0.8rem;\n  min-width: auto;\n`;\n\nconst RadioGroup = styled.div`\n  display: flex;\n  gap: 1rem;\n  margin-bottom: 0.75rem;\n`;\n\nconst RadioLabel = styled.label`\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n  font-size: 0.9rem;\n  cursor: pointer;\n  color: ${({ theme }) => theme.colors.text.primary};\n`;\n\nconst RadioInput = styled.input`\n  cursor: pointer;\n  accent-color: ${({ theme }) => theme.colors.primary.main};\n`;\n\nconst StyledFormInput = styled(FormInput)`\n  background-color: ${({ theme }) => theme.colors.background.input};\n  color: ${({ theme }) => theme.colors.text.primary};\n  border-color: ${({ theme }) => theme.colors.border};\n\n  &:focus {\n    border-color: ${({ theme }) => theme.colors.primary.main};\n    box-shadow: 0 0 0 2px\n      ${({ theme }) =>\n        theme.mode === \"dark\"\n          ? \"rgba(59, 130, 246, 0.3)\"\n          : \"rgba(59, 130, 246, 0.2)\"};\n  }\n\n  &::placeholder {\n    color: ${({ theme }) => theme.colors.text.placeholder};\n  }\n`;\n\n// Ajouter ce style après les autres styles\nconst WeekInfo = styled.div`\n  font-size: 0.9rem;\n  color: ${({ theme }) => theme.colors.info.dark};\n  background-color: ${({ theme }) => theme.colors.info.light};\n  padding: 0.75rem;\n  border-radius: 4px;\n  margin-bottom: 1rem;\n  border-left: 3px solid ${({ theme }) => theme.colors.info.main};\n`;\n\n// Fonction utilitaire pour convertir les données existantes au nouveau format\nconst convertToNewFormat = (day) => {\n  // Si le jour a déjà le format attendu, le retourner tel quel\n  if (day.type) {\n    return { ...day };\n  }\n\n  // Sinon, convertir au nouveau format\n  return {\n    type: day.absence ? \"absence\" : \"work\",\n    hours: day.hours || \"0\",\n    absence: day.absence || \"\",\n    note: day.note || \"\",\n    timeSlots:\n      day.timeSlots ||\n      (day.hours && parseFloat(day.hours) > 0\n        ? [{ start: \"09:00\", end: \"17:00\" }]\n        : []),\n  };\n};\n\n// Fonction utilitaire pour calculer les heures d'un créneau\nconst calculateDayHours = (timeSlots) => {\n  if (!timeSlots || timeSlots.length === 0) return \"0\";\n\n  let totalHours = 0;\n\n  timeSlots.forEach((slot) => {\n    if (slot.start && slot.end) {\n      const startParts = slot.start.split(\":\").map(Number);\n      const endParts = slot.end.split(\":\").map(Number);\n\n      if (startParts.length === 2 && endParts.length === 2) {\n        const startDate = new Date();\n        startDate.setHours(startParts[0], startParts[1], 0);\n\n        const endDate = new Date();\n        endDate.setHours(endParts[0], endParts[1], 0);\n\n        // Si l'heure de fin est avant l'heure de début, on considère que c'est le jour suivant\n        if (endDate < startDate) {\n          endDate.setDate(endDate.getDate() + 1);\n        }\n\n        const hours = calculateHours(startDate, endDate);\n        totalHours += hours;\n      }\n    }\n  });\n\n  return totalHours.toFixed(1);\n};\n\nconst EmployeeScheduleForm = ({\n  employee,\n  weekStart,\n  scheduleData,\n  onSave,\n  onCancel,\n}) => {\n  // Créer un tableau de jours vides\n  const emptyDays = Array(7)\n    .fill()\n    .map(() => ({\n      type: \"work\",\n      hours: \"0\",\n      absence: \"\",\n      note: \"\",\n      timeSlots: [],\n    }));\n\n  // Initialiser les données du formulaire\n  const initialScheduleData = useMemo(() => {\n    // Si scheduleData est un tableau, l'utiliser directement\n    if (Array.isArray(scheduleData)) {\n      return scheduleData;\n    }\n\n    // Si scheduleData est un objet avec une propriété days, utiliser days\n    if (scheduleData && scheduleData.days && Array.isArray(scheduleData.days)) {\n      return scheduleData.days;\n    }\n\n    // Sinon, utiliser le tableau de jours vides\n    return emptyDays;\n  }, [scheduleData]);\n\n  const [formData, setFormData] = useState(initialScheduleData);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [errors, setErrors] = useState({});\n\n  const weekDays = getDaysOfWeek(weekStart);\n\n  // Vérifier si un jour est un weekend\n  const isWeekend = useCallback((dayIndex) => {\n    return dayIndex === 5 || dayIndex === 6; // Samedi ou Dimanche\n  }, []);\n\n  // Gérer le changement de type (travail ou absence)\n  const handleTypeChange = useCallback((dayIndex, type) => {\n    setFormData((prevFormData) => {\n      const newFormData = [...prevFormData];\n      newFormData[dayIndex] = {\n        ...newFormData[dayIndex],\n        type: type,\n        // Si on passe en mode absence, on vide les créneaux horaires\n        timeSlots: type === \"absence\" ? [] : newFormData[dayIndex].timeSlots,\n        // Si on passe en mode travail, on vide le motif d'absence\n        absence: type === \"work\" ? \"\" : newFormData[dayIndex].absence,\n        // Mettre à jour les heures\n        hours:\n          type === \"absence\"\n            ? \"0\"\n            : calculateDayHours(newFormData[dayIndex].timeSlots),\n      };\n      return newFormData;\n    });\n  }, []);\n\n  // Gérer le changement du motif d'absence\n  const handleAbsenceChange = useCallback((dayIndex, value) => {\n    setFormData((prevFormData) => {\n      const newFormData = [...prevFormData];\n      newFormData[dayIndex] = {\n        ...newFormData[dayIndex],\n        absence: value,\n      };\n      return newFormData;\n    });\n  }, []);\n\n  // Gérer le changement de note\n  const handleNoteChange = useCallback((dayIndex, value) => {\n    setFormData((prevFormData) => {\n      const newFormData = [...prevFormData];\n      newFormData[dayIndex] = {\n        ...newFormData[dayIndex],\n        note: value,\n      };\n      return newFormData;\n    });\n  }, []);\n\n  // Ajouter un créneau horaire\n  const addTimeSlot = useCallback((dayIndex) => {\n    setFormData((prevFormData) => {\n      const newFormData = [...prevFormData];\n      const newTimeSlots = [\n        ...(newFormData[dayIndex].timeSlots || []),\n        { start: \"09:00\", end: \"17:00\" },\n      ];\n\n      newFormData[dayIndex] = {\n        ...newFormData[dayIndex],\n        timeSlots: newTimeSlots,\n        hours: calculateDayHours(newTimeSlots),\n      };\n\n      return newFormData;\n    });\n  }, []);\n\n  // Supprimer un créneau horaire\n  const removeTimeSlot = useCallback((dayIndex, slotIndex) => {\n    setFormData((prevFormData) => {\n      const newFormData = [...prevFormData];\n      const newTimeSlots = [...newFormData[dayIndex].timeSlots];\n      newTimeSlots.splice(slotIndex, 1);\n\n      newFormData[dayIndex] = {\n        ...newFormData[dayIndex],\n        timeSlots: newTimeSlots,\n        hours: calculateDayHours(newTimeSlots),\n      };\n\n      return newFormData;\n    });\n  }, []);\n\n  // Mettre à jour un créneau horaire\n  const updateTimeSlot = useCallback((dayIndex, slotIndex, field, value) => {\n    setFormData((prevFormData) => {\n      const newFormData = [...prevFormData];\n      const newTimeSlots = [...newFormData[dayIndex].timeSlots];\n\n      newTimeSlots[slotIndex] = {\n        ...newTimeSlots[slotIndex],\n        [field]: value,\n      };\n\n      newFormData[dayIndex] = {\n        ...newFormData[dayIndex],\n        timeSlots: newTimeSlots,\n        hours: calculateDayHours(newTimeSlots),\n      };\n\n      return newFormData;\n    });\n  }, []);\n\n  // Calculer le total des heures\n  const calculateTotalHours = useCallback(() => {\n    return formData\n      .reduce((total, day) => total + (parseFloat(day.hours) || 0), 0)\n      .toFixed(1);\n  }, [formData]);\n\n  // Gérer la sauvegarde du planning\n  const handleSave = useCallback(() => {\n    // Convertir le format pour la sauvegarde\n    const formattedSchedule = formData.map((day) => ({\n      hours: day.hours,\n      absence: day.absence,\n      note: day.note,\n      timeSlots: day.timeSlots,\n      type: day.type,\n    }));\n\n    const updatedScheduleData = {\n      employeeId: employee.id,\n      weekStart: formatDateForInput(weekStart),\n      days: formattedSchedule,\n    };\n\n    onSave(updatedScheduleData);\n  }, [employee, onSave, formData, weekStart]);\n\n  if (!employee || !weekDays || formData.length === 0) {\n    return null;\n  }\n\n  return (\n    <FormContainer>\n      <FormTitle>\n        <div>\n          Planning du {formatDate(weekStart)} au {formatDate(weekDays[6])}\n        </div>\n        <ButtonGroup>\n          <ActionButton variant=\"outline\" onClick={onCancel}>\n            <FaTimes /> Annuler\n          </ActionButton>\n          <ActionButton\n            variant=\"primary\"\n            onClick={handleSave}\n            disabled={isSubmitting}\n          >\n            <FaSave /> {isSubmitting ? \"Enregistrement...\" : \"Enregistrer\"}\n          </ActionButton>\n        </ButtonGroup>\n      </FormTitle>\n\n      <EmployeeInfo>\n        <EmployeeName>\n          {employee.first_name} {employee.last_name}\n        </EmployeeName>\n        <EmployeeDetails>\n          <div>Département: {employee.department || \"Non défini\"}</div>\n          <div>Heures contractuelles: {employee.contractHours}h</div>\n        </EmployeeDetails>\n      </EmployeeInfo>\n\n      <WeekInfo>\n        Ce planning est spécifique à la semaine du {formatDate(weekStart)} au{\" \"}\n        {formatDate(weekDays[6])}. Il n'affectera pas les autres semaines.\n      </WeekInfo>\n\n      <DaysGrid>\n        {weekDays.map((day, index) => (\n          <DayCard key={index} $isWeekend={isWeekend(index)}>\n            <DayHeader>\n              <DayName $isWeekend={isWeekend(index)}>\n                {formatDate(day, \"EEEE\")}\n              </DayName>\n              <DayDate>{formatDate(day, \"dd/MM\")}</DayDate>\n            </DayHeader>\n\n            <RadioGroup>\n              <RadioLabel>\n                <RadioInput\n                  type=\"radio\"\n                  name={`day-type-${index}`}\n                  checked={formData[index]?.type === \"work\"}\n                  onChange={() => handleTypeChange(index, \"work\")}\n                />\n                Travail\n              </RadioLabel>\n              <RadioLabel>\n                <RadioInput\n                  type=\"radio\"\n                  name={`day-type-${index}`}\n                  checked={formData[index]?.type === \"absence\"}\n                  onChange={() => handleTypeChange(index, \"absence\")}\n                />\n                Absence\n              </RadioLabel>\n            </RadioGroup>\n\n            {formData[index]?.type === \"work\" ? (\n              <TimeSlotContainer>\n                <InputLabel>\n                  Créneaux horaires ({formData[index]?.hours || \"0\"}h)\n                </InputLabel>\n\n                {formData[index]?.timeSlots?.map((slot, slotIndex) => (\n                  <TimeSlot key={slotIndex}>\n                    <TimeInput\n                      type=\"time\"\n                      value={slot.start}\n                      onChange={(e) =>\n                        updateTimeSlot(\n                          index,\n                          slotIndex,\n                          \"start\",\n                          e.target.value\n                        )\n                      }\n                    />\n                    <span>-</span>\n                    <TimeInput\n                      type=\"time\"\n                      value={slot.end}\n                      onChange={(e) =>\n                        updateTimeSlot(index, slotIndex, \"end\", e.target.value)\n                      }\n                    />\n                    <RemoveSlotButton\n                      variant=\"danger\"\n                      onClick={() => removeTimeSlot(index, slotIndex)}\n                    >\n                      ×\n                    </RemoveSlotButton>\n                  </TimeSlot>\n                ))}\n\n                <AddSlotButton\n                  variant=\"outline\"\n                  onClick={() => addTimeSlot(index)}\n                >\n                  + Ajouter un créneau\n                </AddSlotButton>\n              </TimeSlotContainer>\n            ) : (\n              <InputGroup>\n                <InputLabel>Motif d'absence</InputLabel>\n                <StyledFormInput\n                  type=\"text\"\n                  value={formData[index]?.absence || \"\"}\n                  onChange={(e) => handleAbsenceChange(index, e.target.value)}\n                  placeholder=\"Saisir le motif d'absence...\"\n                />\n              </InputGroup>\n            )}\n\n            <InputGroup>\n              <InputLabel>Note (optionnelle)</InputLabel>\n              <StyledFormInput\n                type=\"text\"\n                value={formData[index]?.note || \"\"}\n                onChange={(e) => handleNoteChange(index, e.target.value)}\n                placeholder=\"Ajouter une note...\"\n              />\n            </InputGroup>\n          </DayCard>\n        ))}\n      </DaysGrid>\n\n      <TotalHours>\n        <span>Total des heures:</span>\n        <span>{calculateTotalHours()}h</span>\n      </TotalHours>\n    </FormContainer>\n  );\n};\n\nEmployeeScheduleForm.propTypes = {\n  employee: PropTypes.object.isRequired,\n  weekStart: PropTypes.instanceOf(Date).isRequired,\n  scheduleData: PropTypes.array,\n  onSave: PropTypes.func.isRequired,\n  onCancel: PropTypes.func.isRequired,\n};\n\nexport default EmployeeScheduleForm;\n","import { useCallback, useState } from \"react\";\nimport { toast } from \"react-hot-toast\";\nimport { HourBalanceService } from \"../services/api\";\n\n/**\n * Hook personnalisé pour gérer le solde d'heures des employés\n */\nconst useHourBalance = () => {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  /**\n   * Récupère le solde d'heures d'un employé\n   * @param {number} employeeId - ID de l'employé\n   * @returns {Promise<Object>} - Solde d'heures de l'employé\n   */\n  const getEmployeeBalance = useCallback(async (employeeId) => {\n    setLoading(true);\n    setError(null);\n\n    try {\n      const result = await HourBalanceService.getByEmployee(employeeId);\n\n      if (!result.success) {\n        console.warn(\n          `Avertissement: Impossible de récupérer le solde d'heures pour l'employé ${employeeId}:`,\n          result.message\n        );\n        return 0; // Retourner 0 par défaut au lieu de lancer une erreur\n      }\n\n      return result.balance;\n    } catch (err) {\n      console.warn(\n        `Avertissement: Erreur lors de la récupération du solde d'heures pour l'employé ${employeeId}:`,\n        err\n      );\n      setError(\n        err.message || \"Erreur lors de la récupération du solde d'heures\"\n      );\n      // Ne pas afficher de toast d'erreur pour ne pas perturber l'utilisateur\n      return 0; // Retourner 0 par défaut\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  /**\n   * Met à jour le solde d'heures d'un employé\n   * @param {number} employeeId - ID de l'employé\n   * @param {Object} balanceData - Données du solde d'heures\n   * @returns {Promise<Object>} - Résultat de la mise à jour\n   */\n  const updateEmployeeBalance = useCallback(async (employeeId, balanceData) => {\n    setLoading(true);\n    setError(null);\n\n    try {\n      const result = await HourBalanceService.updateBalance(\n        employeeId,\n        balanceData\n      );\n\n      if (!result.success) {\n        throw new Error(\n          result.message || \"Erreur lors de la mise à jour du solde d'heures\"\n        );\n      }\n\n      toast.success(\"Solde d'heures mis à jour avec succès\");\n      return { success: true, balance: result.balance };\n    } catch (err) {\n      console.error(\n        `Erreur lors de la mise à jour du solde d'heures pour l'employé ${employeeId}:`,\n        err\n      );\n      setError(\n        err.message || \"Erreur lors de la mise à jour du solde d'heures\"\n      );\n      toast.error(\"Erreur lors de la mise à jour du solde d'heures\");\n      return { success: false, error: err.message };\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  return {\n    loading,\n    error,\n    getEmployeeBalance,\n    updateEmployeeBalance,\n  };\n};\n\nexport default useHourBalance;\n","/**\n * Utilitaires pour la gestion des plannings\n */\n\n// Importer la fonction formatDateForInput\nimport { formatDateForInput } from \"./dateUtils\";\n\n/**\n * Format standard des données de planning\n *\n * Structure:\n * {\n *   employeeId: number,           // ID de l'employé\n *   days: [                       // Tableau de 7 jours (lundi à dimanche)\n *     {\n *       type: string,             // \"work\" ou \"absence\"\n *       hours: string,            // Nombre d'heures travaillées (format \"0.0\")\n *       absence: string,          // Type d'absence (congé, maladie, etc.)\n *       note: string,             // Note ou commentaire\n *       timeSlots: [              // Créneaux horaires\n *         {\n *           start: string,        // Heure de début (format \"HH:MM\")\n *           end: string,          // Heure de fin (format \"HH:MM\")\n *           break: string         // Durée de la pause en heures (optionnel)\n *         }\n *       ]\n *     }\n *   ]\n * }\n */\n\n/**\n * Convertit les anciennes données de planning au format standard\n * @param {Object} schedule - Données de planning à convertir\n * @returns {Object} - Données de planning au format standard\n */\nexport const standardizeScheduleData = (schedule) => {\n  if (!schedule) return null;\n\n  // Si le planning est déjà au format standard, le retourner tel quel\n  if (\n    schedule.days &&\n    Array.isArray(schedule.days) &&\n    schedule.days.length > 0 &&\n    schedule.days[0].type !== undefined\n  ) {\n    return {\n      ...schedule,\n      // S'assurer que weekStart est présent\n      weekStart:\n        schedule.weekStart ||\n        schedule.week_start ||\n        formatDateForInput(new Date()),\n    };\n  }\n\n  // Convertir au format standard\n  return {\n    employeeId: schedule.employeeId || schedule.employee_id,\n    weekStart:\n      schedule.weekStart ||\n      schedule.week_start ||\n      formatDateForInput(new Date()),\n    days: Array.isArray(schedule.days)\n      ? schedule.days.map(convertDayToStandardFormat)\n      : Array(7)\n          .fill()\n          .map(() => createEmptyDay()),\n  };\n};\n\n/**\n * Convertit un jour de planning au format standard\n * @param {Object} day - Jour de planning à convertir\n * @returns {Object} - Jour de planning au format standard\n */\nexport const convertDayToStandardFormat = (day) => {\n  if (!day) return createEmptyDay();\n\n  // Si le jour est déjà au format standard, le retourner tel quel\n  if (day.type) {\n    return { ...day };\n  }\n\n  // Convertir au format standard\n  return {\n    type: day.absence ? \"absence\" : \"work\",\n    hours: day.hours || \"0\",\n    absence: day.absence || \"\",\n    note: day.note || \"\",\n    timeSlots:\n      day.timeSlots ||\n      (day.hours && parseFloat(day.hours) > 0\n        ? [{ start: \"09:00\", end: \"17:00\" }]\n        : []),\n  };\n};\n\n/**\n * Crée un jour de planning vide au format standard\n * @returns {Object} - Jour de planning vide\n */\nexport const createEmptyDay = () => ({\n  type: \"work\",\n  hours: \"0\",\n  absence: \"\",\n  note: \"\",\n  timeSlots: [],\n});\n\n/**\n * Calcule le total des heures pour un planning\n * @param {Object} schedule - Données de planning\n * @returns {number} - Total des heures\n */\nexport const calculateTotalHours = (schedule) => {\n  if (!schedule || !schedule.days) return 0;\n\n  return schedule.days.reduce((total, day) => {\n    return total + (parseFloat(day.hours) || 0);\n  }, 0);\n};\n\n/**\n * Vérifie si un employé est absent pour un jour donné\n * @param {Object} day - Jour de planning\n * @returns {boolean} - True si l'employé est absent\n */\nexport const isAbsent = (day) => {\n  return (\n    day && day.type === \"absence\" && day.absence && day.absence.trim() !== \"\"\n  );\n};\n\n/**\n * Prépare les données de planning pour l'envoi à l'API\n * @param {Object} schedule - Données de planning au format standard\n * @returns {Object} - Données formatées pour l'API\n */\nexport const prepareScheduleForApi = (schedule) => {\n  if (!schedule) return null;\n\n  const standardSchedule = standardizeScheduleData(schedule);\n\n  return {\n    employee_id: standardSchedule.employeeId,\n    week_start: standardSchedule.weekStart,\n    schedule_data: JSON.stringify(standardSchedule.days),\n    total_hours: calculateTotalHours(standardSchedule).toFixed(1),\n  };\n};\n\n/**\n * Analyse les données de planning reçues de l'API\n * @param {Object} apiData - Données reçues de l'API\n * @returns {Object} - Données de planning au format standard\n */\nexport const parseScheduleFromApi = (apiData) => {\n  if (!apiData) return null;\n\n  let days;\n  try {\n    days =\n      typeof apiData.schedule_data === \"string\"\n        ? JSON.parse(apiData.schedule_data)\n        : apiData.schedule_data;\n  } catch (error) {\n    console.error(\"Erreur lors de l'analyse des données de planning:\", error);\n    days = Array(7)\n      .fill()\n      .map(() => createEmptyDay());\n  }\n\n  return {\n    employeeId: apiData.employee_id,\n    days: Array.isArray(days)\n      ? days.map(convertDayToStandardFormat)\n      : Array(7)\n          .fill()\n          .map(() => createEmptyDay()),\n  };\n};\n\nconst scheduleUtils = {\n  standardizeScheduleData,\n  convertDayToStandardFormat,\n  createEmptyDay,\n  calculateTotalHours,\n  isAbsent,\n  prepareScheduleForApi,\n  parseScheduleFromApi,\n};\n\nexport default scheduleUtils;\n","import DOMPurify from \"dompurify\";\nimport html2canvas from \"html2canvas\";\nimport { jsPDF } from \"jspdf\";\nimport PropTypes from \"prop-types\";\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { toast } from \"react-hot-toast\";\nimport {\n  FaEdit,\n  FaFilePdf,\n  FaSortAmountDown,\n  FaSortAmountUp,\n} from \"react-icons/fa\";\nimport styled, { useTheme } from \"styled-components\";\nimport Button from \"../../components/ui/Button\";\nimport useHourBalance from \"../../hooks/useHourBalance\";\nimport { formatDate, getDayName, getDaysOfWeek } from \"../../utils/dateUtils\";\nimport {\n  calculateTotalHours,\n  isAbsent as isEmployeeAbsent,\n  standardizeScheduleData,\n} from \"../../utils/scheduleUtils\";\n\n// Styles\nconst ScheduleGrid = styled.div`\n  display: grid;\n  grid-template-columns: 220px repeat(7, 1fr) 90px 90px 90px;\n  gap: 1px;\n  background-color: ${({ theme }) => theme.colors.border.light};\n  border-radius: 0.5rem;\n  overflow-x: auto;\n  width: 100%;\n  box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1),\n    0 2px 4px -1px rgba(0, 0, 0, 0.06);\n  position: relative;\n  font-size: 0.9rem;\n\n  &::after {\n    content: \"\";\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    pointer-events: none;\n    background-image: linear-gradient(\n        to right,\n        transparent,\n        transparent 99%,\n        ${({ theme }) => theme.colors.border.light} 99%,\n        ${({ theme }) => theme.colors.border.light} 100%\n      ),\n      linear-gradient(\n        to bottom,\n        transparent,\n        transparent 99%,\n        ${({ theme }) => theme.colors.border.light} 99%,\n        ${({ theme }) => theme.colors.border.light} 100%\n      );\n    background-size: 100% 100%;\n    background-position: 0 0;\n    background-repeat: repeat;\n    z-index: 1;\n  }\n\n  @media (max-width: 1200px) {\n    grid-template-columns: 200px repeat(7, 1fr) 90px 90px 90px;\n  }\n\n  @media (max-width: 992px) {\n    grid-template-columns: 180px repeat(7, minmax(70px, 1fr)) 90px 90px 90px;\n  }\n\n  @media (max-width: 768px) {\n    grid-template-columns: 150px repeat(7, minmax(60px, 1fr)) 90px 90px 90px;\n    font-size: 0.8rem;\n  }\n\n  @media (max-width: 576px) {\n    display: block;\n    overflow-x: visible;\n    background-color: transparent;\n    gap: 0;\n  }\n`;\n\nconst GridCell = styled.div`\n  padding: 0.6rem;\n  background-color: ${({ theme }) => theme.colors.background.primary};\n  color: ${({ theme }) => theme.colors.text.primary};\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  min-height: 48px;\n  transition: all 0.3s ease;\n  position: relative;\n  z-index: 2;\n\n  &:hover {\n    transform: translateZ(0);\n    box-shadow: 0 0 0 1px ${({ theme }) => theme.colors.primary.main}40;\n  }\n\n  @media (max-width: 576px) {\n    padding: 0.5rem;\n    min-height: auto;\n  }\n`;\n\nconst HeaderCell = styled(GridCell)`\n  font-weight: 600;\n  background-color: ${({ theme }) => theme.colors.background.secondary};\n  text-align: center;\n  position: sticky;\n  top: 0;\n  z-index: 10;\n  cursor: ${(props) => (props.sortable ? \"pointer\" : \"default\")};\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  gap: 5px;\n\n  &:hover {\n    background-color: ${(props) =>\n      props.sortable\n        ? ({ theme }) => theme.colors.background.tertiary\n        : \"inherit\"};\n  }\n\n  @media (max-width: 576px) {\n    display: none;\n  }\n`;\n\nconst EmployeeCell = styled(GridCell)`\n  justify-content: flex-start;\n  font-weight: 600;\n  position: sticky;\n  left: 0;\n  z-index: 3;\n  box-shadow: 2px 0 5px rgba(0, 0, 0, 0.05);\n  padding: 0.6rem 0.8rem;\n  min-width: 150px;\n  flex-direction: column;\n  align-items: flex-start;\n  transition: all 0.3s ease;\n\n  &:hover {\n    background-color: ${({ theme }) => theme.colors.background.secondary}50;\n  }\n`;\n\nconst EmployeeName = styled.div`\n  font-weight: 700;\n  font-size: 0.95rem;\n  margin-bottom: 0.25rem;\n  color: ${({ theme }) => theme.colors.primary.main};\n  display: block;\n  width: 100%;\n  text-align: left;\n`;\n\nconst TotalCell = styled(GridCell)`\n  font-weight: 600;\n  background-color: ${({ theme }) => theme.colors.background.secondary};\n  position: sticky;\n  right: 180px;\n  z-index: 5;\n  transition: all 0.3s ease;\n\n  &:hover {\n    background-color: ${({ theme }) => theme.colors.background.tertiary};\n  }\n\n  @media (max-width: 576px) {\n    position: static;\n    border-bottom-left-radius: 0.5rem;\n    border-bottom-right-radius: 0.5rem;\n    margin-bottom: 1rem;\n  }\n`;\n\nconst DayCell = styled(GridCell)`\n  ${({ isWeekend, theme }) =>\n    isWeekend &&\n    `\n    background-color: ${theme.colors.background.tertiary};\n  `}\n\n  ${({ isAbsent }) =>\n    isAbsent &&\n    `\n    color: #ef4444;\n  `}\n  \n  flex-direction: column;\n  gap: 0.25rem;\n  font-size: 0.8rem;\n  text-align: center;\n  cursor: ${(props) => (props.readOnly ? \"default\" : \"pointer\")};\n  transition: all 0.3s ease;\n\n  &:hover {\n    transform: ${(props) => (props.readOnly ? \"none\" : \"translateY(-2px)\")};\n    box-shadow: ${(props) =>\n      props.readOnly ? \"none\" : \"0 4px 6px rgba(0, 0, 0, 0.1)\"};\n  }\n\n  @media (max-width: 576px) {\n    display: grid;\n    grid-template-columns: 100px 1fr;\n    text-align: left;\n    border-radius: 0;\n    margin: 0;\n\n    &::before {\n      content: attr(data-day);\n      font-weight: 600;\n      color: ${({ theme }) => theme.colors.text.secondary};\n    }\n  }\n`;\n\nconst TimeSlot = styled.div`\n  font-size: 0.9rem;\n  font-weight: 600;\n  color: ${({ theme }) => theme.colors.text.primary};\n  white-space: nowrap;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nconst BreakInfo = styled.div`\n  font-size: 0.65rem;\n  color: ${({ theme }) => theme.colors.text.tertiary};\n  font-style: italic;\n`;\n\nconst HoursValue = styled.div`\n  font-size: 0.7rem;\n  color: ${({ theme }) => theme.colors.text.secondary};\n`;\n\nconst AbsenceValue = styled.div`\n  font-size: 1rem;\n  font-weight: 700;\n  color: #ef4444;\n`;\n\nconst NoteText = styled.div`\n  font-style: italic;\n  font-size: 0.7rem;\n  color: ${({ theme }) => theme.colors.text.secondary};\n  margin-top: 0.25rem;\n  max-width: 100%;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n`;\n\nconst ActionCell = styled(GridCell)`\n  position: sticky;\n  right: 0;\n  z-index: 5;\n  background-color: ${({ theme }) => theme.colors.background.secondary};\n  padding: 0.4rem;\n  width: 90px;\n\n  @media (max-width: 576px) {\n    position: static;\n    padding: 0.4rem;\n  }\n`;\n\nconst ExportCell = styled(GridCell)`\n  position: sticky;\n  right: 90px;\n  z-index: 5;\n  background-color: ${({ theme }) => theme.colors.background.secondary};\n  padding: 0.4rem;\n  width: 90px;\n\n  @media (max-width: 576px) {\n    position: static;\n    padding: 0.4rem;\n  }\n`;\n\nconst EmployeeRow = styled.div`\n  display: contents;\n\n  &:nth-child(even)\n    ${GridCell}:not(${HeaderCell}):not(${ActionCell}):not(${ExportCell}) {\n    background-color: ${({ theme }) => theme.colors.background.secondary}20;\n  }\n\n  @media (max-width: 576px) {\n    display: flex;\n    flex-direction: column;\n    border-radius: 0.5rem;\n    overflow: hidden;\n    box-shadow: 0 2px 8px\n      ${({ theme }) =>\n        theme.mode === \"dark\" ? \"rgba(0, 0, 0, 0.3)\" : \"rgba(0, 0, 0, 0.1)\"};\n    margin-bottom: 1.5rem;\n  }\n`;\n\nconst QuickEditButton = styled.button`\n  position: absolute;\n  top: 0.25rem;\n  right: 0.25rem;\n  opacity: 0;\n  padding: 0.25rem;\n  font-size: 0.7rem;\n  background-color: ${({ theme }) => theme.colors.background.secondary};\n  color: ${({ theme }) => theme.colors.text.secondary};\n  border: 1px solid ${({ theme }) => theme.colors.border.main};\n  border-radius: 4px;\n  transition: all 0.2s ease;\n\n  ${DayCell}:hover & {\n    opacity: 1;\n  }\n\n  &:hover {\n    background-color: ${({ theme }) => theme.colors.primary.main};\n    color: white;\n  }\n`;\n\nconst ActionButton = styled(Button)`\n  width: 100%;\n  padding: 0.4rem;\n  font-size: 0.8rem;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  gap: 0.3rem;\n  transition: all 0.3s cubic-bezier(0.175, 0.885, 0.32, 1.275);\n  border-radius: 8px;\n  position: relative;\n  overflow: hidden;\n  z-index: 1;\n\n  &::after {\n    content: \"\";\n    position: absolute;\n    bottom: 0;\n    left: 0;\n    width: 100%;\n    height: 0;\n    background: ${({ theme }) => theme.colors.primary}20;\n    transition: height 0.3s ease;\n    z-index: -1;\n  }\n\n  &:hover {\n    transform: translateY(-2px);\n    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n\n    &::after {\n      height: 100%;\n    }\n  }\n\n  &:active {\n    transform: translateY(0);\n  }\n\n  svg {\n    transition: transform 0.3s ease;\n  }\n\n  &:hover svg {\n    transform: scale(1.2);\n  }\n\n  @media (max-width: 768px) {\n    padding: 0.3rem;\n    font-size: 0.75rem;\n  }\n`;\n\nconst EditButton = styled(ActionButton)`\n  background: ${({ theme }) => theme.colors.primary.main};\n  color: white;\n\n  &:hover {\n    background: ${({ theme }) => theme.colors.primary.dark};\n  }\n`;\n\nconst PdfButton = styled(ActionButton)`\n  background: ${({ theme }) => theme.colors.secondary};\n  color: white;\n\n  &:hover {\n    background: ${({ theme }) => theme.colors.secondary}dd;\n  }\n`;\n\nconst WeeklyScheduleGrid = ({\n  employees,\n  weekStart,\n  scheduleData,\n  onChange,\n  readOnly,\n  onEditEmployee,\n  onGeneratePDF,\n}) => {\n  const theme = useTheme();\n  const { getEmployeeBalance } = useHourBalance();\n\n  // S'assurer que employees est un tableau\n  const employeesArray = Array.isArray(employees) ? employees : [];\n\n  // S'assurer que scheduleData est un tableau\n  const scheduleDataArray = useMemo(() => {\n    return Array.isArray(scheduleData) ? scheduleData : [];\n  }, [scheduleData]);\n\n  // S'assurer que weekStart est une date valide\n  const validWeekStart = useMemo(() => {\n    try {\n      const date = weekStart instanceof Date ? weekStart : new Date(weekStart);\n      return !isNaN(date.getTime()) ? date : new Date();\n    } catch (error) {\n      console.error(\"Date de début de semaine invalide:\", weekStart);\n      return new Date();\n    }\n  }, [weekStart]);\n\n  // État pour le tri\n  const [sortConfig, setSortConfig] = useState({\n    key: null,\n    direction: \"ascending\",\n  });\n\n  // Obtenir les jours de la semaine\n  const daysOfWeek = getDaysOfWeek(validWeekStart);\n\n  // Fonction pour trier les employés\n  const sortedEmployees = [...employeesArray].sort((a, b) => {\n    if (sortConfig.key === null) {\n      return 0;\n    }\n\n    let aValue, bValue;\n\n    if (sortConfig.key === \"name\") {\n      aValue = `${a.lastName} ${a.firstName}`.toLowerCase();\n      bValue = `${b.lastName} ${b.firstName}`.toLowerCase();\n    } else if (sortConfig.key === \"total\") {\n      aValue = parseFloat(calculateEmployeeTotal(a.id));\n      bValue = parseFloat(calculateEmployeeTotal(b.id));\n    } else {\n      aValue = a[sortConfig.key];\n      bValue = b[sortConfig.key];\n    }\n\n    if (aValue < bValue) {\n      return sortConfig.direction === \"ascending\" ? -1 : 1;\n    }\n    if (aValue > bValue) {\n      return sortConfig.direction === \"ascending\" ? 1 : -1;\n    }\n    return 0;\n  });\n\n  // Fonction pour changer le tri\n  const requestSort = useCallback(\n    (key) => {\n      let direction = \"ascending\";\n      if (sortConfig.key === key && sortConfig.direction === \"ascending\") {\n        direction = \"descending\";\n      }\n      setSortConfig({ key, direction });\n    },\n    [sortConfig]\n  );\n\n  // Obtenir l'icône de tri\n  const getSortIcon = useCallback(\n    (key) => {\n      if (sortConfig.key !== key) {\n        return null;\n      }\n      return sortConfig.direction === \"ascending\" ? (\n        <FaSortAmountUp size={12} />\n      ) : (\n        <FaSortAmountDown size={12} />\n      );\n    },\n    [sortConfig]\n  );\n\n  // Trouver le planning d'un employé\n  const findEmployeeSchedule = useCallback(\n    (employeeId) => {\n      const schedule = scheduleDataArray.find(\n        (schedule) => schedule.employeeId === employeeId\n      );\n\n      if (!schedule) {\n        return {\n          employeeId,\n          days: Array(7)\n            .fill()\n            .map(() => ({\n              type: \"work\",\n              hours: \"0\",\n              absence: \"\",\n              note: \"\",\n              timeSlots: [],\n            })),\n        };\n      }\n\n      // Standardiser les données\n      return standardizeScheduleData(schedule);\n    },\n    [scheduleDataArray]\n  );\n\n  // Gérer le clic sur le bouton d'édition\n  const handleEditClick = useCallback(\n    (employeeId) => {\n      if (onEditEmployee) {\n        onEditEmployee(employeeId);\n      }\n    },\n    [onEditEmployee]\n  );\n\n  // Vérifier si un jour est un weekend\n  const isWeekend = useCallback((dayIndex) => {\n    return dayIndex === 5 || dayIndex === 6; // Samedi ou Dimanche\n  }, []);\n\n  // Vérifier si un employé est absent pour un jour donné\n  const isAbsent = useCallback(\n    (employeeId, dayIndex) => {\n      const schedule = findEmployeeSchedule(employeeId);\n      const day = schedule.days[dayIndex];\n      return isEmployeeAbsent(day);\n    },\n    [findEmployeeSchedule]\n  );\n\n  // Formater l'affichage d'une cellule de jour\n  const formatDayCell = useCallback(\n    (employeeId, dayIndex) => {\n      const schedule = findEmployeeSchedule(employeeId);\n      const day = schedule.days[dayIndex];\n\n      if (!day) return null;\n\n      const hasTimeSlots = day.timeSlots && day.timeSlots.length > 0;\n\n      return (\n        <>\n          {day.type === \"absence\" &&\n          day.absence &&\n          day.absence.trim() !== \"\" ? (\n            <AbsenceValue>{day.absence}</AbsenceValue>\n          ) : hasTimeSlots ? (\n            day.timeSlots.map((slot, index) => (\n              <TimeSlot key={index}>\n                {slot.start} - {slot.end}\n                {slot.break && <BreakInfo>Pause: {slot.break}h</BreakInfo>}\n              </TimeSlot>\n            ))\n          ) : (\n            <TimeSlot>-</TimeSlot>\n          )}\n          <HoursValue>{day.hours || \"0\"}h</HoursValue>\n          {day.note && day.note.trim() !== \"\" && (\n            <NoteText title={day.note}>{day.note}</NoteText>\n          )}\n        </>\n      );\n    },\n    [findEmployeeSchedule]\n  );\n\n  // Calculer le total des heures pour un employé\n  const calculateEmployeeTotal = useCallback(\n    (employeeId) => {\n      const schedule = findEmployeeSchedule(employeeId);\n      return calculateTotalHours(schedule).toFixed(1);\n    },\n    [findEmployeeSchedule]\n  );\n\n  // Obtenir le compteur horaire d'un employé (heures contractuelles vs heures travaillées)\n  const getEmployeeHoursCounter = useCallback(\n    (employeeId) => {\n      try {\n        const employee = employees.find((emp) => emp.id === employeeId);\n        if (!employee) return \"N/A\";\n\n        // Vérifier si contractHours existe et est un nombre valide\n        const contractHours = employee.contractHours\n          ? parseFloat(employee.contractHours)\n          : null;\n        if (contractHours === null || isNaN(contractHours)) return \"N/A\";\n\n        // Calculer les heures travaillées\n        const workedHours = parseFloat(calculateEmployeeTotal(employeeId));\n        if (isNaN(workedHours)) return \"N/A\";\n\n        // Utiliser le solde d'heures de l'API si disponible\n        if (employee.hour_balance !== undefined) {\n          const balance = parseFloat(employee.hour_balance);\n          if (!isNaN(balance)) {\n            return balance === 0\n              ? \"0\"\n              : balance > 0\n              ? `+${balance.toFixed(1)}`\n              : balance.toFixed(1);\n          }\n        }\n\n        // Sinon, calculer la différence localement\n        const diff = workedHours - contractHours;\n\n        return diff === 0\n          ? \"0\"\n          : diff > 0\n          ? `+${diff.toFixed(1)}`\n          : diff.toFixed(1);\n      } catch (error) {\n        console.error(\"Erreur lors du calcul du solde d'heures:\", error);\n        return \"N/A\";\n      }\n    },\n    [employees, calculateEmployeeTotal]\n  );\n\n  // Charger le solde d'heures pour chaque employé\n  useEffect(() => {\n    const loadHourBalances = async () => {\n      try {\n        for (const employee of employees) {\n          if (employee && employee.id) {\n            try {\n              const balance = await getEmployeeBalance(employee.id);\n              if (balance !== null) {\n                // Mettre à jour l'employé avec le solde d'heures\n                employee.hour_balance = balance;\n              }\n            } catch (error) {\n              console.warn(\n                `Avertissement: Impossible de récupérer le solde d'heures pour l'employé ${employee.id}:`,\n                error\n              );\n              // Continuer avec les autres employés même si une erreur se produit\n            }\n          }\n        }\n      } catch (error) {\n        console.warn(\n          \"Avertissement lors du chargement des soldes d'heures:\",\n          error\n        );\n        // Ne pas afficher de toast d'erreur pour ne pas perturber l'utilisateur\n      }\n    };\n\n    loadHourBalances();\n  }, [employees, getEmployeeBalance]);\n\n  // Fonction pour générer un PDF du planning d'un employé\n  const generatePDF = (employee, days, weekStart) => {\n    // Vérifier si weekStart est valide\n    if (!weekStart || isNaN(new Date(weekStart).getTime())) {\n      console.error(\n        \"Date de début de semaine invalide pour le PDF:\",\n        weekStart\n      );\n      toast.error(\"Impossible de générer le PDF: date invalide\");\n      return;\n    }\n\n    // Créer un élément temporaire pour le rendu\n    const tempElement = document.createElement(\"div\");\n    tempElement.style.position = \"absolute\";\n    tempElement.style.left = \"-9999px\";\n    tempElement.style.top = \"-9999px\";\n    tempElement.style.width = \"1000px\"; // Plus large pour le format paysage\n\n    // Formater les dates\n    const weekStartDate = new Date(weekStart);\n    const weekEndDate = new Date(weekStart);\n    weekEndDate.setDate(weekEndDate.getDate() + 6);\n\n    const formattedWeekStart = formatDate(weekStartDate);\n    const formattedWeekEnd = formatDate(weekEndDate);\n\n    // Récupérer le prénom et le nom en tenant compte des différentes structures possibles\n    const firstName = employee.firstName || employee.first_name || \"Inconnu\";\n    const lastName = employee.lastName || employee.last_name || \"Inconnu\";\n\n    // Calculer le total des heures\n    const totalHours = days.reduce((sum, day) => {\n      return sum + (day.isAbsent ? 0 : parseFloat(day.hours || 0));\n    }, 0);\n\n    // Créer le contenu HTML\n    const content = `\n      <div style=\"font-family: Arial, sans-serif; padding: 20px; color: #333; text-align: center;\">\n        <h2 style=\"text-align: center; color: #2563eb;\">Planning Hebdomadaire</h2>\n        <h3 style=\"text-align: center; margin-bottom: 10px;\">Du ${formattedWeekStart} au ${formattedWeekEnd}</h3>\n        \n        <div style=\"margin-bottom: 20px; text-align: center;\">\n          <h2 style=\"margin-bottom: 5px; color: #2563eb; font-size: 24px; font-weight: bold;\">${firstName} ${lastName}</h2>\n          <p style=\"margin: 5px 0;\">Poste: ${employee.role || \"Inconnu\"}</p>\n          <p style=\"margin: 5px 0;\">Département: ${\n            employee.department || \"Inconnu\"\n          }</p>\n          <p style=\"margin: 5px 0;\">Heures contractuelles: ${\n            employee.contractHours || \"0\"\n          }h</p>\n          <p style=\"margin: 5px 0;\">Total heures planifiées: ${totalHours.toFixed(\n            1\n          )}h</p>\n        </div>\n        \n        <table style=\"width: 100%; border-collapse: collapse; margin: 0 auto; max-width: 900px;\">\n          <thead>\n            <tr style=\"background-color: #e5e7eb;\">\n              <th style=\"padding: 10px; border: 1px solid #d1d5db; text-align: left;\">Jour</th>\n              <th style=\"padding: 10px; border: 1px solid #d1d5db; text-align: left;\">Heures</th>\n              <th style=\"padding: 10px; border: 1px solid #d1d5db; text-align: left;\">Créneaux</th>\n              <th style=\"padding: 10px; border: 1px solid #d1d5db; text-align: left;\">Notes</th>\n            </tr>\n          </thead>\n          <tbody>\n            ${days\n              .map((day, index) => {\n                const dayDate = new Date(weekStart);\n                dayDate.setDate(dayDate.getDate() + index);\n                const isWeekendDay = isWeekend(dayDate);\n\n                return `\n              <tr style=\"background-color: ${\n                isWeekendDay ? \"#f9fafb\" : \"white\"\n              };\">\n                <td style=\"padding: 10px; border: 1px solid #d1d5db; font-weight: ${\n                  isWeekendDay ? \"bold\" : \"normal\"\n                };\">\n                  ${getDayName(dayDate)} ${formatDate(dayDate, \"dd/MM\")}\n                </td>\n                <td style=\"padding: 10px; border: 1px solid #d1d5db;\">\n                  ${\n                    day.isAbsent\n                      ? `<span style=\"color: #ef4444; font-weight: bold;\">${\n                          day.absenceReason || \"Absent\"\n                        }</span>`\n                      : `${day.hours}h`\n                  }\n                </td>\n                <td style=\"padding: 10px; border: 1px solid #d1d5db;\">\n                  ${\n                    day.isAbsent\n                      ? \"-\"\n                      : (day.timeSlots || [])\n                          .map((slot) => `${slot.start} - ${slot.end}`)\n                          .join(\"<br>\")\n                  }\n                </td>\n                <td style=\"padding: 10px; border: 1px solid #d1d5db; font-style: italic;\">\n                  ${day.notes ? DOMPurify.sanitize(day.notes) : \"\"}\n                </td>\n              </tr>\n              `;\n              })\n              .join(\"\")}\n          </tbody>\n        </table>\n      </div>\n    `;\n\n    // Ajouter le contenu à l'élément temporaire\n    tempElement.innerHTML = DOMPurify.sanitize(content);\n    document.body.appendChild(tempElement);\n\n    // Générer le PDF\n    html2canvas(tempElement, {\n      scale: 1,\n      useCORS: true,\n      logging: false,\n    }).then((canvas) => {\n      const imgData = canvas.toDataURL(\"image/png\");\n      const pdf = new jsPDF(\"l\", \"mm\", \"a4\"); // Format paysage\n      const pdfWidth = pdf.internal.pageSize.getWidth();\n      const ratio = canvas.width / canvas.height;\n      const imgWidth = pdfWidth;\n      const imgHeight = imgWidth / ratio;\n\n      pdf.addImage(imgData, \"PNG\", 0, 0, imgWidth, imgHeight);\n      pdf.save(`Planning_${firstName}_${lastName}_${formattedWeekStart}.pdf`);\n\n      // Nettoyer\n      document.body.removeChild(tempElement);\n    });\n  };\n\n  const handleGeneratePDF = (employee) => {\n    if (onGeneratePDF) {\n      onGeneratePDF(employee);\n      return;\n    }\n\n    // Vérifier si weekStart est une date valide\n    if (!validWeekStart) {\n      console.error(\"Date de début de semaine invalide\");\n      toast.error(\"Impossible de générer le PDF : date invalide\");\n      return;\n    }\n\n    const employeeSchedule = scheduleDataArray.find(\n      (schedule) => schedule.employeeId === employee.id\n    );\n\n    if (employeeSchedule) {\n      // Convertir les jours au format attendu par generatePDF\n      const formattedDays = employeeSchedule.days.map((day) => {\n        return {\n          isAbsent:\n            day.type === \"absence\" && day.absence && day.absence.trim() !== \"\",\n          absenceReason: day.absence || \"\",\n          hours: day.hours || \"0\",\n          timeSlots: day.timeSlots || [],\n          notes: day.note || \"\",\n        };\n      });\n\n      generatePDF(employee, formattedDays, validWeekStart);\n    } else {\n      // Créer un planning vide si aucun n'existe\n      const emptyDays = Array(7)\n        .fill()\n        .map(() => ({\n          isAbsent: false,\n          absenceReason: \"\",\n          hours: \"0\",\n          timeSlots: [],\n          notes: \"\",\n        }));\n      generatePDF(employee, emptyDays, validWeekStart);\n    }\n  };\n\n  // Fonction pour formater la cellule d'employé\n  const formatEmployeeCell = useCallback((employee) => {\n    // Récupérer le prénom et le nom en tenant compte des différentes structures possibles\n    const firstName = employee.firstName || employee.first_name || \"\";\n    const lastName = employee.lastName || employee.last_name || \"\";\n\n    // Vérifiez si les noms sont définis\n    if (!firstName || !lastName) {\n      console.error(\"Nom ou prénom manquant pour l'employé:\", employee);\n    }\n\n    return (\n      <EmployeeName>\n        {firstName} {lastName}\n      </EmployeeName>\n    );\n  }, []);\n\n  return (\n    <ScheduleGrid>\n      {/* En-tête avec les jours de la semaine */}\n      <HeaderCell sortable onClick={() => requestSort(\"name\")}>\n        Employé {getSortIcon(\"name\")}\n      </HeaderCell>\n      {daysOfWeek.map((day, index) => (\n        <HeaderCell key={index}>{formatDate(day, \"EEE dd/MM\")}</HeaderCell>\n      ))}\n      <HeaderCell sortable onClick={() => requestSort(\"total\")}>\n        Heures planifiées {getSortIcon(\"total\")}\n      </HeaderCell>\n      <HeaderCell>Export</HeaderCell>\n      <HeaderCell>Actions</HeaderCell>\n\n      {/* Lignes pour chaque employé */}\n      {sortedEmployees.map((employee) => {\n        return (\n          <EmployeeRow key={employee.id}>\n            <EmployeeCell>{formatEmployeeCell(employee)}</EmployeeCell>\n\n            {/* Cellules pour chaque jour */}\n            {Array(7)\n              .fill()\n              .map((_, dayIndex) => (\n                <DayCell\n                  key={dayIndex}\n                  isWeekend={isWeekend(dayIndex)}\n                  isAbsent={isAbsent(employee.id, dayIndex)}\n                  data-day={formatDate(daysOfWeek[dayIndex], \"EEEE\")}\n                  onClick={() => !readOnly && onEditEmployee(employee.id)}\n                  readOnly={readOnly}\n                >\n                  {formatDayCell(employee.id, dayIndex)}\n                  {!readOnly && (\n                    <QuickEditButton\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        onEditEmployee(employee.id);\n                      }}\n                    >\n                      <FaEdit />\n                    </QuickEditButton>\n                  )}\n                </DayCell>\n              ))}\n\n            {/* Cellule de total */}\n            <TotalCell>{calculateEmployeeTotal(employee.id)}h</TotalCell>\n\n            {/* Cellule d'export */}\n            <ExportCell>\n              <PdfButton onClick={() => handleGeneratePDF(employee)}>\n                <FaFilePdf /> PDF\n              </PdfButton>\n            </ExportCell>\n\n            {/* Cellule d'action */}\n            <ActionCell>\n              <EditButton onClick={() => handleEditClick(employee.id)}>\n                <FaEdit /> Éditer\n              </EditButton>\n            </ActionCell>\n          </EmployeeRow>\n        );\n      })}\n    </ScheduleGrid>\n  );\n};\n\nWeeklyScheduleGrid.propTypes = {\n  employees: PropTypes.array,\n  weekStart: PropTypes.instanceOf(Date).isRequired,\n  scheduleData: PropTypes.array,\n  onChange: PropTypes.func,\n  readOnly: PropTypes.bool,\n  onEditEmployee: PropTypes.func,\n  onGeneratePDF: PropTypes.func,\n};\n\nWeeklyScheduleGrid.defaultProps = {\n  employees: [],\n  scheduleData: [],\n  onChange: () => {},\n  readOnly: false,\n  onEditEmployee: null,\n  onGeneratePDF: null,\n};\n\nexport default WeeklyScheduleGrid;\n","import PropTypes from \"prop-types\";\nimport styled, { keyframes } from \"styled-components\";\n\n// Animation de rotation\nconst rotate = keyframes`\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n`;\n\n// Conteneur du spinner\nconst SpinnerContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: ${({ $center }) => ($center ? \"center\" : \"flex-start\")};\n  height: ${({ $center }) => ($center ? \"100%\" : \"auto\")};\n  width: 100%;\n  padding: 1rem;\n`;\n\n// Élément du spinner\nconst SpinnerElement = styled.div`\n  width: ${({ $size }) => {\n    switch ($size) {\n      case \"small\":\n        return \"1.5rem\";\n      case \"large\":\n        return \"3rem\";\n      default:\n        return \"2rem\";\n    }\n  }};\n  height: ${({ $size }) => {\n    switch ($size) {\n      case \"small\":\n        return \"1.5rem\";\n      case \"large\":\n        return \"3rem\";\n      default:\n        return \"2rem\";\n    }\n  }};\n  border: ${({ $size }) => {\n      switch ($size) {\n        case \"small\":\n          return \"2px\";\n        case \"large\":\n          return \"4px\";\n        default:\n          return \"3px\";\n      }\n    }}\n    solid rgba(0, 0, 0, 0.1);\n  border-top: ${({ $size, theme }) => {\n    const borderWidth =\n      $size === \"small\" ? \"2px\" : $size === \"large\" ? \"4px\" : \"3px\";\n    return `${borderWidth} solid ${theme.colors.primary.main}`;\n  }};\n  border-radius: 50%;\n  animation: ${rotate} 1s linear infinite;\n`;\n\n// Texte du spinner\nconst SpinnerText = styled.p`\n  margin-top: 0.5rem;\n  color: ${({ theme }) => theme.colors.text.secondary};\n  font-size: 0.875rem;\n`;\n\n/**\n * Composant Spinner pour indiquer un chargement\n */\nconst Spinner = ({ $center, $size, text }) => {\n  return (\n    <SpinnerContainer $center={$center}>\n      <SpinnerElement $size={$size} />\n      {text && <SpinnerText>{text}</SpinnerText>}\n    </SpinnerContainer>\n  );\n};\n\nSpinner.propTypes = {\n  $center: PropTypes.bool,\n  $size: PropTypes.oneOf([\"small\", \"medium\", \"large\"]),\n  text: PropTypes.string,\n};\n\nSpinner.defaultProps = {\n  $center: false,\n  $size: \"medium\",\n  text: \"\",\n};\n\nexport default Spinner;\n","import { useCallback, useEffect, useState } from \"react\";\nimport { toast } from \"react-hot-toast\";\nimport { WeeklyScheduleService } from \"../services/api\";\nimport { formatDateForAPI } from \"../utils/dateUtils\";\nimport {\n  parseScheduleFromApi,\n  prepareScheduleForApi,\n  standardizeScheduleData,\n} from \"../utils/scheduleUtils\";\nimport useWebSocket from \"./useWebSocket\";\n\n/**\n * Hook personnalisé pour gérer les plannings hebdomadaires\n */\nconst useWeeklySchedules = () => {\n  const [schedules, setSchedules] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Intégration WebSocket pour les mises à jour en temps réel\n  const { socket, isConnected, notifyDataChange } = useWebSocket();\n\n  // Écouter les mises à jour WebSocket\n  useEffect(() => {\n    if (socket && isConnected) {\n      // Fonction pour traiter les messages WebSocket\n      const handleWebSocketMessage = (event) => {\n        try {\n          const data = JSON.parse(event.data);\n\n          // Si le message concerne une mise à jour de planning\n          if (data.type === \"SCHEDULE_UPDATED\" && data.schedule) {\n            setSchedules((prevSchedules) => {\n              // Vérifier si le planning existe déjà\n              const exists = prevSchedules.some(\n                (schedule) => schedule.id === data.schedule.id\n              );\n\n              if (exists) {\n                // Mettre à jour le planning existant\n                return prevSchedules.map((schedule) =>\n                  schedule.id === data.schedule.id\n                    ? parseScheduleFromApi(data.schedule)\n                    : schedule\n                );\n              } else {\n                // Ajouter le nouveau planning\n                return [...prevSchedules, parseScheduleFromApi(data.schedule)];\n              }\n            });\n\n            toast.info(\"Planning mis à jour en temps réel\");\n          }\n\n          // Si le message concerne une suppression de planning\n          if (data.type === \"SCHEDULE_DELETED\" && data.scheduleId) {\n            setSchedules((prevSchedules) =>\n              prevSchedules.filter(\n                (schedule) => schedule.id !== data.scheduleId\n              )\n            );\n\n            toast.info(\"Planning supprimé en temps réel\");\n          }\n        } catch (error) {\n          console.error(\n            \"Erreur lors du traitement du message WebSocket:\",\n            error\n          );\n        }\n      };\n\n      // Ajouter l'écouteur d'événements\n      socket.addEventListener(\"message\", handleWebSocketMessage);\n\n      // Nettoyer l'écouteur lors du démontage\n      return () => {\n        socket.removeEventListener(\"message\", handleWebSocketMessage);\n      };\n    }\n  }, [socket, isConnected]);\n\n  /**\n   * Récupère tous les plannings pour une semaine donnée\n   * @param {string} weekStart - Date de début de semaine (format YYYY-MM-DD)\n   * @returns {Promise<Array>} - Liste des plannings\n   */\n  const fetchSchedules = useCallback(async (weekStart) => {\n    setLoading(true);\n    setError(null);\n\n    try {\n      // Vérifier que la date est au bon format\n      if (!weekStart) {\n        throw new Error(\"Date de début de semaine non spécifiée\");\n      }\n\n      // Vérifier que le token d'authentification est présent\n      const token = localStorage.getItem(\"token\");\n      if (!token) {\n        console.error(\"Token d'authentification manquant\");\n        throw new Error(\"Vous devez être connecté pour accéder à ces données\");\n      }\n\n      // S'assurer que la date est au format YYYY-MM-DD\n      let formattedDate = weekStart;\n      if (weekStart instanceof Date) {\n        formattedDate = formatDateForAPI(weekStart);\n      } else if (typeof weekStart === \"string\" && weekStart.includes(\"T\")) {\n        // Si la date contient un T (format ISO), extraire seulement la partie date\n        formattedDate = weekStart.split(\"T\")[0];\n      }\n\n      console.error(\n        \"Tentative de récupération des plannings pour la semaine du:\",\n        formattedDate\n      );\n\n      try {\n        const result = await WeeklyScheduleService.getByWeek(formattedDate);\n\n        if (!result.success) {\n          console.error(\n            \"Échec de la récupération des plannings:\",\n            result.message,\n            result.details || \"\"\n          );\n          throw new Error(\n            result.message || \"Erreur lors du chargement des horaires\"\n          );\n        }\n\n        // Standardiser les données\n        const standardizedSchedules = result.schedules.map((schedule) =>\n          parseScheduleFromApi(schedule)\n        );\n\n        setSchedules(standardizedSchedules);\n        return standardizedSchedules;\n      } catch (apiError) {\n        console.error(\n          \"Erreur API lors de la récupération des plannings:\",\n          apiError\n        );\n        throw apiError;\n      }\n    } catch (err) {\n      console.error(\"Erreur lors du chargement des horaires:\", err);\n      console.error(\"Détails de l'erreur:\", JSON.stringify(err, null, 2));\n      setError(\n        \"Erreur lors du chargement des horaires: \" +\n          (err.message || \"Erreur inconnue\")\n      );\n      toast.error(\"Erreur lors du chargement des horaires\");\n      return [];\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  /**\n   * Crée un nouveau planning\n   * @param {Object} scheduleData - Données du planning\n   * @returns {Promise<Object>} - Résultat de la création\n   */\n  const createSchedule = useCallback(\n    async (scheduleData) => {\n      setLoading(true);\n      try {\n        // Standardiser et préparer les données pour l'API\n        const apiData = prepareScheduleForApi(\n          standardizeScheduleData(scheduleData)\n        );\n\n        const result = await WeeklyScheduleService.create(apiData);\n\n        if (!result.success) {\n          throw new Error(\n            result.message || \"Erreur lors de la création de l'horaire\"\n          );\n        }\n\n        // Ajouter le nouveau planning à la liste\n        const newSchedule = parseScheduleFromApi(result.schedule);\n        setSchedules((prev) => [...prev, newSchedule]);\n\n        // Notifier les autres clients via WebSocket\n        notifyDataChange(\"schedule\", \"create\", newSchedule.id);\n\n        toast.success(\"Planning créé avec succès\");\n        return { success: true, schedule: newSchedule };\n      } catch (error) {\n        console.error(\"Erreur lors de la création du planning:\", error);\n        toast.error(error.message || \"Erreur lors de la création du planning\");\n        return { success: false, error: error.message };\n      }\n    },\n    [notifyDataChange]\n  );\n\n  /**\n   * Met à jour un planning existant\n   * @param {number} id - ID du planning\n   * @param {Object} scheduleData - Données du planning\n   * @returns {Promise<Object>} - Résultat de la mise à jour\n   */\n  const updateSchedule = useCallback(\n    async (id, scheduleData) => {\n      setLoading(true);\n      try {\n        // Standardiser et préparer les données pour l'API\n        const apiData = prepareScheduleForApi(\n          standardizeScheduleData(scheduleData)\n        );\n\n        const result = await WeeklyScheduleService.update(id, apiData);\n\n        if (!result.success) {\n          throw new Error(\n            result.message || \"Erreur lors de la mise à jour de l'horaire\"\n          );\n        }\n\n        // Mettre à jour le planning dans la liste\n        const updatedSchedule = parseScheduleFromApi(result.schedule);\n        setSchedules((prev) =>\n          prev.map((schedule) =>\n            schedule.id === id ? updatedSchedule : schedule\n          )\n        );\n\n        // Notifier les autres clients via WebSocket\n        notifyDataChange(\"schedule\", \"update\", id);\n\n        toast.success(\"Planning mis à jour avec succès\");\n        return { success: true, schedule: updatedSchedule };\n      } catch (error) {\n        console.error(\"Erreur lors de la mise à jour du planning:\", error);\n        toast.error(\n          error.message || \"Erreur lors de la mise à jour du planning\"\n        );\n        return { success: false, error: error.message };\n      }\n    },\n    [notifyDataChange]\n  );\n\n  /**\n   * Supprime un planning\n   * @param {number} id - ID du planning\n   * @returns {Promise<Object>} - Résultat de la suppression\n   */\n  const deleteSchedule = useCallback(\n    async (id) => {\n      setLoading(true);\n      try {\n        const result = await WeeklyScheduleService.delete(id);\n\n        if (!result.success) {\n          throw new Error(\n            result.message || \"Erreur lors de la suppression de l'horaire\"\n          );\n        }\n\n        // Supprimer le planning de la liste\n        setSchedules((prev) => prev.filter((schedule) => schedule.id !== id));\n\n        // Notifier les autres clients via WebSocket\n        notifyDataChange(\"schedule\", \"delete\", id);\n\n        toast.success(\"Planning supprimé avec succès\");\n        return { success: true };\n      } catch (error) {\n        console.error(\"Erreur lors de la suppression du planning:\", error);\n        toast.error(\n          error.message || \"Erreur lors de la suppression du planning\"\n        );\n        return { success: false, error: error.message };\n      }\n    },\n    [notifyDataChange]\n  );\n\n  return {\n    schedules,\n    loading,\n    error,\n    fetchSchedules,\n    createSchedule,\n    updateSchedule,\n    deleteSchedule,\n  };\n};\n\nexport default useWeeklySchedules;\n","import DOMPurify from \"dompurify\";\nimport html2canvas from \"html2canvas\";\nimport { jsPDF } from \"jspdf\";\nimport \"jspdf-autotable\";\nimport { useCallback, useEffect, useMemo, useRef, useState } from \"react\";\nimport { toast } from \"react-hot-toast\";\nimport {\n  FaArrowLeft,\n  FaArrowRight,\n  FaCalendarDay,\n  FaFilePdf,\n  FaUsers,\n} from \"react-icons/fa\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport thinkingAnimation from \"../assets/animations/thinking.json\";\nimport EmployeeScheduleForm from \"../components/schedule/EmployeeScheduleForm\";\nimport WeeklyScheduleGrid from \"../components/schedule/WeeklyScheduleGrid\";\nimport Button from \"../components/ui/Button\";\nimport Card, { CardContent, CardHeader } from \"../components/ui/Card\";\nimport { FormInput, FormSelect } from \"../components/ui/Form\";\nimport Spinner from \"../components/ui/Spinner\";\nimport useEmployees from \"../hooks/useEmployees\";\nimport useWeeklySchedules from \"../hooks/useWeeklySchedules\";\nimport { WeeklyScheduleService } from \"../services/api\";\nimport {\n  addWeeks,\n  formatDate,\n  formatDateForInput,\n  getDayName,\n  getDaysOfWeek,\n  getWeekEnd,\n  getWeekStart,\n  isWeekend,\n} from \"../utils/dateUtils\";\nimport { standardizeScheduleData } from \"../utils/scheduleUtils\";\n\n// Importer react-lottie avec require pour éviter les problèmes de compatibilité\nconst Lottie = require(\"react-lottie\").default;\n\n// Styles\nconst ScheduleContainer = styled.div`\n  padding: 1rem;\n  display: flex;\n  flex-direction: column;\n  gap: 1.5rem;\n\n  @media (min-width: 768px) {\n    padding: 2rem;\n    gap: 2rem;\n  }\n`;\n\nconst ScheduleHeader = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 1rem;\n  margin-bottom: 0.5rem;\n\n  @media (min-width: 768px) {\n    flex-direction: row;\n    justify-content: space-between;\n    align-items: center;\n    margin-bottom: 1rem;\n  }\n`;\n\nconst ScheduleFilters = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 0.75rem;\n  margin-bottom: 0.75rem;\n\n  @media (min-width: 768px) {\n    flex-direction: row;\n    gap: 1rem;\n    margin-bottom: 1rem;\n    align-items: center;\n    justify-content: space-between;\n  }\n`;\n\nconst FiltersGroup = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 0.75rem;\n  width: 100%;\n\n  @media (min-width: 768px) {\n    flex-direction: row;\n    gap: 1rem;\n  }\n`;\n\n// Nouveau style pour la navigation de semaine\nconst WeekNavigation = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 1rem;\n  margin-bottom: 1rem;\n  background: ${({ theme }) => theme.colors.background.secondary};\n  border-radius: 16px;\n  padding: 1rem;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);\n  transition: all 0.3s ease;\n\n  &:hover {\n    box-shadow: 0 6px 16px rgba(0, 0, 0, 0.12);\n    transform: translateY(-2px);\n  }\n\n  @media (min-width: 768px) {\n    flex-direction: column;\n    align-items: center;\n    gap: 1rem;\n    min-width: 320px;\n  }\n`;\n\n// Nouveau style pour l'affichage de la semaine\nconst WeekDisplay = styled.div`\n  text-align: center;\n  background: ${({ theme }) => theme.colors.primary}10;\n  padding: 0.75rem 1rem;\n  border-radius: 12px;\n  margin-bottom: 0.5rem;\n  position: relative;\n  overflow: hidden;\n\n  &::before {\n    content: \"\";\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 4px;\n    background: linear-gradient(\n      90deg,\n      ${({ theme }) => theme.colors.primary},\n      ${({ theme }) => theme.colors.secondary}\n    );\n    animation: shimmer 2s infinite linear;\n  }\n\n  @keyframes shimmer {\n    0% {\n      background-position: -200% 0;\n    }\n    100% {\n      background-position: 200% 0;\n    }\n  }\n\n  h3 {\n    font-size: 1.1rem;\n    font-weight: 600;\n    margin: 0;\n    color: ${({ theme }) => theme.colors.text.primary};\n  }\n`;\n\nconst WeekActions = styled.div`\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  gap: 0.75rem;\n  width: 100%;\n\n  @media (min-width: 768px) {\n    grid-template-columns: 1fr 1fr 1fr;\n  }\n`;\n\n// Nouveau style pour les boutons d'action\nconst ActionButton = styled(Button)`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  gap: 0.5rem;\n  transition: all 0.3s cubic-bezier(0.175, 0.885, 0.32, 1.275);\n  border-radius: 12px;\n  font-weight: 500;\n  padding: 0.75rem 1rem;\n  position: relative;\n  overflow: hidden;\n  z-index: 1;\n\n  &::after {\n    content: \"\";\n    position: absolute;\n    bottom: 0;\n    left: 0;\n    width: 100%;\n    height: 0;\n    background: ${({ theme }) => theme.colors.primary}20;\n    transition: height 0.3s ease;\n    z-index: -1;\n  }\n\n  &:hover {\n    transform: translateY(-3px);\n    box-shadow: 0 6px 12px rgba(0, 0, 0, 0.1);\n\n    &::after {\n      height: 100%;\n    }\n  }\n\n  &:active {\n    transform: translateY(0);\n  }\n\n  svg {\n    transition: transform 0.3s ease;\n  }\n\n  &:hover svg {\n    transform: scale(1.2);\n  }\n`;\n\n// Nouveau style pour le bouton d'export\nconst ExportAllButton = styled(ActionButton)`\n  grid-column: 1 / -1;\n  background: linear-gradient(\n    135deg,\n    ${({ theme }) => theme.colors.primary},\n    ${({ theme }) => theme.colors.secondary}\n  );\n  color: white;\n  border: none;\n  position: relative;\n  overflow: hidden;\n\n  &::before {\n    content: \"\";\n    position: absolute;\n    top: 0;\n    left: -100%;\n    width: 100%;\n    height: 100%;\n    background: linear-gradient(\n      90deg,\n      transparent,\n      rgba(255, 255, 255, 0.2),\n      transparent\n    );\n    transition: left 0.5s ease;\n  }\n\n  &:hover::before {\n    left: 100%;\n  }\n\n  @media (min-width: 768px) {\n    grid-column: 3;\n  }\n`;\n\nconst FilterContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 0.5rem;\n  width: 100%;\n\n  @media (min-width: 768px) {\n    min-width: 200px;\n    width: auto;\n  }\n`;\n\n/* Composants styled non utilisés - commentés pour éviter les erreurs ESLint\nconst SummaryContainer = styled.div`\n  margin-top: 1rem;\n  padding: 1rem;\n  background-color: #f9fafb;\n  border-radius: 0.5rem;\n`;\n\nconst SummaryTitle = styled.h3`\n  font-size: 1rem;\n  margin-bottom: 0.5rem;\n`;\n\nconst SummaryItem = styled.div`\n  display: flex;\n  justify-content: space-between;\n  padding: 0.5rem 0;\n  border-bottom: 1px solid #e5e7eb;\n\n  &:last-child {\n    border-bottom: none;\n  }\n`;\n\nconst SummaryLabel = styled.span`\n  font-weight: 500;\n`;\n\nconst SummaryValue = styled.span`\n  font-weight: 600;\n  color: ${(props) => (props.isNegative ? \"#ef4444\" : \"#10b981\")};\n`;\n*/\n\nconst FilterSelect = styled(FormSelect)`\n  width: 100%;\n\n  @media (min-width: 768px) {\n    min-width: 200px;\n    width: auto;\n  }\n`;\n\n/* Composant styled non utilisé - commenté pour éviter les erreurs ESLint\nconst CurrentWeek = styled.div`\n  font-size: 1.1rem;\n  font-weight: 600;\n  text-align: center;\n  width: 100%;\n`;\n*/\n\nconst SearchContainer = styled.div`\n  margin-bottom: 1rem;\n  width: 100%;\n`;\n\nconst EmployeeSearchInput = styled(FormInput)`\n  width: 100%;\n`;\n\nconst NoResultsMessage = styled.div`\n  text-align: center;\n  padding: 2rem;\n  color: ${({ theme }) => theme.colors.text.secondary};\n  font-style: italic;\n`;\n\n/* Composant styled non utilisé - commenté pour éviter les erreurs ESLint\nconst ResponsiveButton = styled(Button)`\n  font-size: 0.85rem;\n  padding: 0.5rem 0.75rem;\n\n  @media (min-width: 768px) {\n    font-size: 1rem;\n    padding: 0.5rem 1rem;\n  }\n`;\n*/\n\nconst PlanningTitle = styled.h2`\n  font-size: 1.5rem;\n  font-weight: 700;\n  color: ${({ theme }) => theme.colors.text.primary};\n  margin: 0;\n`;\n\nconst HeaderLeft = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 1.5rem;\n`;\n\nconst AnimationContainer = styled.div`\n  width: 80px;\n  height: 80px;\n  flex-shrink: 0;\n`;\n\nconst TitleContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\nconst PageTitle = styled.h1`\n  font-size: 2rem;\n  color: ${({ theme }) => theme.colors.text.primary};\n  margin-bottom: 0.5rem;\n`;\n\nconst PageDescription = styled.p`\n  color: ${({ theme }) => theme.colors.text.secondary};\n  font-size: 1.1rem;\n`;\n\nconst ExportOptions = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 1rem;\n  padding: 1rem;\n  background-color: ${({ theme }) => theme.colors.background.secondary};\n  border-radius: 0.5rem;\n  margin-top: 1rem;\n`;\n\nconst ExportOptionsTitle = styled.h4`\n  font-size: 1rem;\n  font-weight: 600;\n  margin-bottom: 0.5rem;\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n`;\n\nconst ExportOptionsGrid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\n  gap: 1rem;\n`;\n\nconst ExportOptionCard = styled.div`\n  padding: 1rem;\n  background-color: ${({ theme }) => theme.colors.background.primary};\n  border-radius: 0.5rem;\n  border: 1px solid ${({ theme }) => theme.colors.border.main};\n  display: flex;\n  flex-direction: column;\n  gap: 0.5rem;\n  transition: all 0.2s ease;\n  cursor: pointer;\n\n  &:hover {\n    transform: translateY(-2px);\n    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1),\n      0 2px 4px -1px rgba(0, 0, 0, 0.06);\n  }\n`;\n\nconst ExportOptionTitle = styled.h5`\n  font-size: 0.9rem;\n  font-weight: 600;\n  margin: 0;\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n`;\n\nconst ExportOptionDescription = styled.p`\n  font-size: 0.8rem;\n  color: ${({ theme }) => theme.colors.text.secondary};\n  margin: 0;\n`;\n\n// Ajouter ce style après les autres styles\nconst InfoMessage = styled.div`\n  background-color: ${({ theme }) => theme.colors.info.light};\n  color: ${({ theme }) => theme.colors.info.dark};\n  border-left: 4px solid ${({ theme }) => theme.colors.info.main};\n  padding: 0.75rem 1rem;\n  margin-bottom: 1.5rem;\n  border-radius: 4px;\n  font-size: 0.9rem;\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n`;\n\n/**\n * Page de gestion des plannings hebdomadaires\n */\nconst WeeklySchedulePage = () => {\n  const navigate = useNavigate();\n  const { weekStart: weekStartParam } = useParams();\n\n  // Références pour éviter les boucles infinies\n  const prevScheduleDataRef = useRef(null);\n  const prevFormattedScheduleDataRef = useRef(null);\n\n  // États pour la gestion des plannings\n  const [currentWeekStart, setCurrentWeekStart] = useState(() => {\n    try {\n      // Essayer de créer une date à partir de weekStartParam\n      if (weekStartParam) {\n        const date = new Date(weekStartParam);\n        // Vérifier si la date est valide\n        if (!isNaN(date.getTime())) {\n          return date;\n        }\n      }\n      // Si weekStartParam est invalide ou non fourni, utiliser la date actuelle\n      return getWeekStart(new Date());\n    } catch (error) {\n      console.error(\n        \"Erreur lors de l'initialisation de currentWeekStart:\",\n        error\n      );\n      return getWeekStart(new Date());\n    }\n  });\n  const [scheduleData, setScheduleData] = useState([]);\n  const [editingEmployeeId, setEditingEmployeeId] = useState(null);\n  const [selectedDepartment, setSelectedDepartment] = useState(\"\");\n  const [selectedRole, setSelectedRole] = useState(\"\");\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [showExportOptions, setShowExportOptions] = useState(false);\n\n  // Formater la date de début de semaine pour l'API\n  const formattedWeekStart = useMemo(\n    () => formatDateForInput(currentWeekStart),\n    [currentWeekStart]\n  );\n\n  // Récupérer les employés\n  const {\n    employees,\n    loading: employeesLoading,\n    // eslint-disable-next-line no-unused-vars\n    error: employeesError,\n  } = useEmployees();\n\n  // Récupérer les plannings\n  const {\n    schedules,\n    loading: schedulesLoading,\n    error: schedulesError,\n    fetchSchedules,\n    createSchedule,\n    updateSchedule,\n  } = useWeeklySchedules();\n\n  // Formater les données de planning pour le composant WeeklyScheduleGrid\n  const formattedScheduleData = useMemo(() => {\n    if (!schedules || !Array.isArray(schedules)) {\n      console.warn(\"Données de plannings invalides:\", schedules);\n      return [];\n    }\n\n    // Log pour débogage\n\n    // Standardiser les données de planning (incluant la conversion JSON si nécessaire)\n    // La fonction standardizeScheduleData s'assure que les données JSON sont correctement parsées\n    return schedules.map((schedule) => {\n      try {\n        const standardized = standardizeScheduleData(schedule);\n        return standardized;\n      } catch (error) {\n        console.error(\n          `Erreur lors de la standardisation du planning pour l'employé ${schedule.employee_id}:`,\n          error\n        );\n        // Retourner un planning vide en cas d'erreur\n        return {\n          employeeId: schedule.employee_id,\n          days: Array(7)\n            .fill()\n            .map(() => ({\n              type: \"work\",\n              hours: \"0\",\n              absence: \"\",\n              note: \"\",\n              timeSlots: [],\n            })),\n        };\n      }\n    });\n  }, [schedules]);\n\n  // Mettre à jour les données de planning lorsque les plannings changent\n  useEffect(() => {\n    // Vérifier si les données ont changé pour éviter les boucles infinies\n    const currentScheduleDataStr = JSON.stringify(scheduleData);\n    const currentFormattedScheduleDataStr = JSON.stringify(\n      formattedScheduleData\n    );\n\n    if (\n      prevFormattedScheduleDataRef.current !==\n        currentFormattedScheduleDataStr &&\n      prevScheduleDataRef.current !== currentScheduleDataStr\n    ) {\n      prevFormattedScheduleDataRef.current = currentFormattedScheduleDataStr;\n      prevScheduleDataRef.current = currentScheduleDataStr;\n\n      setScheduleData(formattedScheduleData);\n    }\n  }, [formattedScheduleData, scheduleData]);\n\n  // Charger les plannings lorsque la semaine change\n  useEffect(() => {\n    fetchSchedules(formattedWeekStart)\n      .then((data) => {\n        // Mettre à jour l'état local avec les plannings récupérés\n        setScheduleData(data); // Assurez-vous que 'data' contient les plannings\n      })\n      .catch((error) => {\n        console.error(\"Erreur lors de la récupération des plannings:\", error);\n      });\n  }, [fetchSchedules, formattedWeekStart]);\n\n  // Gérer les erreurs de chargement des plannings\n  useEffect(() => {\n    if (schedulesError) {\n      console.error(\"Erreur de chargement des plannings:\", schedulesError);\n      toast.error(`Erreur lors du chargement des plannings: ${schedulesError}`);\n    }\n  }, [schedulesError]);\n\n  // Obtenir l'employé en cours d'édition\n  const editingEmployee = useMemo(() => {\n    if (!editingEmployeeId || !employees) return null;\n    return employees.find((emp) => emp.id === editingEmployeeId) || null;\n  }, [editingEmployeeId, employees]);\n\n  // Extraire les départements uniques\n  const uniqueDepartments = useMemo(() => {\n    if (!employees || !Array.isArray(employees)) return [];\n    const departments = [...new Set(employees.map((emp) => emp.department))];\n    return departments.filter((dept) => dept && dept.trim() !== \"\");\n  }, [employees]);\n\n  // Extraire les rôles uniques\n  const uniqueRoles = useMemo(() => {\n    if (!employees || !Array.isArray(employees)) return [];\n    const roles = [...new Set(employees.map((emp) => emp.role))];\n    return roles.filter((role) => role && role.trim() !== \"\");\n  }, [employees]);\n\n  // Mettre à jour l'URL lorsque la semaine change\n  useEffect(() => {\n    const formattedDate = formatDateForInput(currentWeekStart);\n    navigate(`/weekly-schedule/${formattedDate}`, { replace: true });\n  }, [currentWeekStart, navigate]);\n\n  // Filtrer les employés en fonction des critères\n  const filteredEmployees = useMemo(() => {\n    if (!employees || !Array.isArray(employees)) {\n      return [];\n    }\n\n    let filtered = employees;\n\n    // Filtrer par département si sélectionné\n    if (selectedDepartment) {\n      filtered = filtered.filter(\n        (emp) => emp.department === selectedDepartment\n      );\n    }\n\n    // Filtrer par rôle si sélectionné\n    if (selectedRole) {\n      filtered = filtered.filter((emp) => emp.role === selectedRole);\n    }\n\n    // Filtrer par recherche si saisie\n    if (searchQuery) {\n      const query = searchQuery.toLowerCase();\n      filtered = filtered.filter(\n        (emp) =>\n          (emp.firstName && emp.firstName.toLowerCase().includes(query)) ||\n          (emp.lastName && emp.lastName.toLowerCase().includes(query)) ||\n          (emp.email && emp.email.toLowerCase().includes(query))\n      );\n    }\n\n    return filtered;\n  }, [employees, selectedDepartment, selectedRole, searchQuery]);\n\n  // Fonctions de navigation entre les semaines\n  const goToPreviousWeek = useCallback(() => {\n    setCurrentWeekStart((prev) => addWeeks(prev, -1));\n  }, []);\n\n  const goToNextWeek = useCallback(() => {\n    setCurrentWeekStart((prev) => addWeeks(prev, 1));\n  }, []);\n\n  const goToCurrentWeek = useCallback(() => {\n    setCurrentWeekStart(getWeekStart(new Date()));\n  }, []);\n\n  // Fonction pour gérer l'édition d'un employé\n  const handleEditEmployee = useCallback((employeeId) => {\n    setEditingEmployeeId(employeeId);\n  }, []);\n\n  // Fonction pour annuler l'édition\n  const handleCancelEdit = useCallback(() => {\n    setEditingEmployeeId(null);\n  }, []);\n\n  // Fonction pour gérer la recherche\n  const handleSearchChange = useCallback((e) => {\n    setSearchQuery(e.target.value);\n  }, []);\n\n  // Fonction pour gérer le changement de département\n  const handleDepartmentChange = useCallback((e) => {\n    setSelectedDepartment(e.target.value);\n  }, []);\n\n  // Fonction pour gérer le changement de rôle\n  const handleRoleChange = useCallback((e) => {\n    setSelectedRole(e.target.value);\n  }, []);\n\n  // Fonction pour gérer le changement de planning\n  const handleScheduleChange = useCallback(\n    async (updatedScheduleData) => {\n      try {\n        // S'assurer que la date de début de semaine est correctement définie\n        if (!updatedScheduleData.weekStart) {\n          updatedScheduleData.weekStart = formattedWeekStart;\n        }\n\n        // Si les données mises à jour concernent un seul employé\n        if (updatedScheduleData.employeeId) {\n          // Vérifier si un planning existe déjà pour cet employé et cette semaine spécifique\n          // en utilisant le service getByEmployeeAndWeek\n          const existingScheduleResult =\n            await WeeklyScheduleService.getByEmployeeAndWeek(\n              updatedScheduleData.employeeId,\n              updatedScheduleData.weekStart\n            );\n\n          let result;\n\n          if (\n            existingScheduleResult.success &&\n            existingScheduleResult.schedule\n          ) {\n            // Mettre à jour le planning existant dans la base de données\n            result = await updateSchedule(\n              existingScheduleResult.schedule.id,\n              updatedScheduleData\n            );\n          } else {\n            // Créer un nouveau planning dans la base de données\n            result = await createSchedule(updatedScheduleData);\n          }\n\n          if (result.success) {\n            // Mettre à jour l'état local\n            setScheduleData((prevData) => {\n              const existingIndex = prevData.findIndex(\n                (s) => s.employeeId === updatedScheduleData.employeeId\n              );\n\n              const newData = [...prevData];\n\n              if (existingIndex >= 0) {\n                // Mettre à jour le planning existant\n                newData[existingIndex] = {\n                  ...updatedScheduleData,\n                  id: result.schedule.id, // Ajouter l'ID retourné par l'API\n                };\n              } else {\n                // Ajouter un nouveau planning\n                newData.push({\n                  ...updatedScheduleData,\n                  id: result.schedule.id, // Ajouter l'ID retourné par l'API\n                });\n              }\n\n              return newData;\n            });\n\n            // Fermer le formulaire d'édition\n            setEditingEmployeeId(null);\n\n            // Afficher un message de succès\n            toast.success(\n              \"Planning enregistré avec succès dans la base de données\"\n            );\n          } else {\n            // Afficher un message d'erreur\n            toast.error(\n              result.error || \"Erreur lors de l'enregistrement du planning\"\n            );\n          }\n        } else {\n          // Si c'est un tableau complet de plannings, remplacer tout\n          setScheduleData(updatedScheduleData);\n        }\n      } catch (error) {\n        console.error(\"Erreur lors de l'enregistrement du planning:\", error);\n        toast.error(\"Erreur lors de l'enregistrement du planning\");\n      }\n    },\n    [updateSchedule, createSchedule, formattedWeekStart]\n  );\n\n  // Fonction pour générer un PDF global de tous les employés\n  const generateAllEmployeesPDF = () => {\n    // Filtrer les employés actifs (non absents toute la semaine)\n    const activeEmployees = filteredEmployees.filter((employee) => {\n      const employeeSchedule = scheduleData.find(\n        (s) => s.employeeId === employee.id\n      );\n      if (!employeeSchedule) return true; // Inclure les employés sans planning\n\n      // Vérifier si l'employé est absent toute la semaine\n      const isAbsentAllWeek = employeeSchedule.days.every(\n        (day) =>\n          day.type === \"absence\" && day.absence && day.absence.trim() !== \"\"\n      );\n      return !isAbsentAllWeek;\n    });\n\n    if (activeEmployees.length === 0) {\n      toast.info(\"Aucun employé actif trouvé pour cette semaine\");\n      return;\n    }\n\n    // Créer un élément temporaire pour le rendu\n    const tempElement = document.createElement(\"div\");\n    tempElement.style.position = \"absolute\";\n    tempElement.style.left = \"-9999px\";\n    tempElement.style.top = \"-9999px\";\n    tempElement.style.width = \"1200px\"; // Plus large pour le format paysage\n\n    // Formater les dates\n    const weekStartDate = new Date(currentWeekStart);\n    const weekEndDate = new Date(currentWeekStart);\n    weekEndDate.setDate(weekEndDate.getDate() + 6);\n\n    const formattedWeekStart = formatDate(weekStartDate);\n    const formattedWeekEnd = formatDate(weekEndDate);\n\n    // Créer le contenu HTML\n    const content = `\n      <div style=\"font-family: Arial, sans-serif; padding: 20px; color: #333;\">\n        <h2 style=\"text-align: center; color: #2563eb;\">Planning Hebdomadaire Global</h2>\n        <h3 style=\"text-align: center; margin-bottom: 20px;\">Du ${formattedWeekStart} au ${formattedWeekEnd}</h3>\n        \n        <div style=\"margin-bottom: 20px;\">\n          <p style=\"margin: 5px 0;\">Département: ${\n            selectedDepartment || \"Tous\"\n          }</p>\n          <p style=\"margin: 5px 0;\">Nombre d'employés: ${\n            activeEmployees.length\n          }</p>\n        </div>\n        \n        <table style=\"width: 100%; border-collapse: collapse; margin-top: 20px;\">\n          <thead>\n            <tr style=\"background-color: #e5e7eb;\">\n              <th style=\"padding: 10px; border: 1px solid #d1d5db; text-align: left;\">Employé</th>\n              ${getDaysOfWeek(currentWeekStart)\n                .map(\n                  (day) => `\n                <th style=\"padding: 10px; border: 1px solid #d1d5db; text-align: center; ${\n                  isWeekend(day) ? \"background-color: #f3f4f6;\" : \"\"\n                }\">\n                  ${getDayName(day, true)} ${formatDate(day, \"dd/MM\")}\n                </th>\n              `\n                )\n                .join(\"\")}\n              <th style=\"padding: 10px; border: 1px solid #d1d5db; text-align: center; background-color: #e5e7eb;\">Total</th>\n            </tr>\n          </thead>\n          <tbody>\n            ${activeEmployees\n              .map((employee) => {\n                const employeeSchedule = scheduleData.find(\n                  (s) => s.employeeId === employee.id\n                );\n                const totalHours = employeeSchedule\n                  ? employeeSchedule.days.reduce(\n                      (sum, day) =>\n                        sum +\n                        (day.type === \"absence\"\n                          ? 0\n                          : parseFloat(day.hours || 0)),\n                      0\n                    )\n                  : 0;\n\n                return `\n                <tr>\n                  <td style=\"padding: 10px; border: 1px solid #d1d5db; text-align: left;\">\n                    <strong>${\n                      employee.firstName || employee.first_name || \"Inconnu\"\n                    } ${\n                  employee.lastName || employee.last_name || \"Inconnu\"\n                }</strong><br>\n                    <small>${employee.role || \"Inconnu\"}</small>\n                  </td>\n                  ${getDaysOfWeek(currentWeekStart)\n                    .map((dayDate, index) => {\n                      const isWeekendDay = isWeekend(dayDate);\n\n                      // Récupérer les données du jour pour cet employé\n                      const dayData = employeeSchedule\n                        ? employeeSchedule.days[index]\n                        : null;\n\n                      // Déterminer le contenu de la cellule\n                      let cellContent = \"-\";\n                      if (dayData) {\n                        if (\n                          dayData.type === \"absence\" &&\n                          dayData.absence &&\n                          dayData.absence.trim() !== \"\"\n                        ) {\n                          cellContent = `<span style=\"color: #ef4444;\">${\n                            dayData.absence || \"Absent\"\n                          }</span>`;\n                        } else if (\n                          dayData.timeSlots &&\n                          dayData.timeSlots.length > 0\n                        ) {\n                          cellContent = dayData.timeSlots\n                            .map((slot) => `${slot.start}-${slot.end}`)\n                            .join(\"<br>\");\n\n                          // Ajouter les heures si disponibles\n                          if (dayData.hours) {\n                            cellContent += `<br><small>${dayData.hours}h</small>`;\n                          }\n                        } else if (dayData.hours) {\n                          cellContent = `${dayData.hours}h`;\n                        }\n                      }\n\n                      return `\n                      <td style=\"padding: 8px; border: 1px solid #d1d5db; text-align: center; ${\n                        isWeekendDay ? \"background-color: #f9fafb;\" : \"\"\n                      }\">\n                        ${cellContent}\n                      </td>\n                    `;\n                    })\n                    .join(\"\")}\n                  <td style=\"padding: 10px; border: 1px solid #d1d5db; text-align: center; font-weight: bold;\">\n                    ${totalHours.toFixed(1)}h\n                  </td>\n                </tr>\n              `;\n              })\n              .join(\"\")}\n          </tbody>\n        </table>\n      </div>\n    `;\n\n    // Ajouter le contenu à l'élément temporaire\n    tempElement.innerHTML = DOMPurify.sanitize(content);\n    document.body.appendChild(tempElement);\n\n    // Générer le PDF\n    html2canvas(tempElement, {\n      scale: 1,\n      useCORS: true,\n      logging: false,\n    }).then((canvas) => {\n      const imgData = canvas.toDataURL(\"image/png\");\n      const pdf = new jsPDF(\"l\", \"mm\", \"a4\"); // Format paysage\n      const pdfWidth = pdf.internal.pageSize.getWidth();\n      const ratio = canvas.width / canvas.height;\n      const imgWidth = pdfWidth;\n      const imgHeight = imgWidth / ratio;\n\n      pdf.addImage(imgData, \"PNG\", 0, 0, imgWidth, imgHeight);\n      pdf.save(\n        `Planning_Global_${formatDate(currentWeekStart, \"yyyy-MM-dd\")}.pdf`\n      );\n\n      // Nettoyer\n      document.body.removeChild(tempElement);\n    });\n  };\n\n  // Fonction pour générer un PDF par département\n  const generateDepartmentPDF = (department) => {\n    // Filtrer les employés du département\n    const departmentEmployees = filteredEmployees.filter(\n      (emp) => emp.department === department\n    );\n\n    if (departmentEmployees.length === 0) {\n      toast.info(`Aucun employé trouvé dans le département ${department}`);\n      return;\n    }\n\n    // Créer un élément temporaire pour le rendu\n    const tempElement = document.createElement(\"div\");\n    tempElement.style.position = \"absolute\";\n    tempElement.style.left = \"-9999px\";\n    tempElement.style.top = \"-9999px\";\n    tempElement.style.width = \"1200px\"; // Plus large pour le format paysage\n\n    // Formater les dates\n    const weekStartDate = new Date(currentWeekStart);\n    const weekEndDate = new Date(currentWeekStart);\n    weekEndDate.setDate(weekEndDate.getDate() + 6);\n\n    const formattedWeekStart = formatDate(weekStartDate);\n    const formattedWeekEnd = formatDate(weekEndDate);\n\n    // Créer le contenu HTML\n    const content = `\n      <div style=\"font-family: Arial, sans-serif; padding: 20px; color: #333;\">\n        <h2 style=\"text-align: center; color: #2563eb;\">Planning Hebdomadaire - ${department}</h2>\n        <h3 style=\"text-align: center; margin-bottom: 20px;\">Du ${formattedWeekStart} au ${formattedWeekEnd}</h3>\n        \n        <div style=\"margin-bottom: 20px;\">\n          <p style=\"margin: 5px 0;\">Département: ${department}</p>\n          <p style=\"margin: 5px 0;\">Nombre d'employés: ${\n            departmentEmployees.length\n          }</p>\n        </div>\n        \n        <table style=\"width: 100%; border-collapse: collapse; margin-top: 20px;\">\n          <thead>\n            <tr style=\"background-color: #e5e7eb;\">\n              <th style=\"padding: 10px; border: 1px solid #d1d5db; text-align: left;\">Employé</th>\n              ${getDaysOfWeek(currentWeekStart)\n                .map(\n                  (day) => `\n                <th style=\"padding: 10px; border: 1px solid #d1d5db; text-align: center; ${\n                  isWeekend(day) ? \"background-color: #f3f4f6;\" : \"\"\n                }\">\n                  ${getDayName(day, true)} ${formatDate(day, \"dd/MM\")}\n                </th>\n              `\n                )\n                .join(\"\")}\n              <th style=\"padding: 10px; border: 1px solid #d1d5db; text-align: center; background-color: #e5e7eb;\">Total</th>\n            </tr>\n          </thead>\n          <tbody>\n            ${departmentEmployees\n              .map((employee) => {\n                const employeeSchedule = scheduleData.find(\n                  (s) => s.employeeId === employee.id\n                );\n                const days = employeeSchedule\n                  ? employeeSchedule.days.map((day) => ({\n                      isAbsent:\n                        day.type === \"absence\" &&\n                        day.absence &&\n                        day.absence.trim() !== \"\",\n                      absenceReason: day.absence || \"\",\n                      hours: day.hours || \"0\",\n                      timeSlots: day.timeSlots || [],\n                      notes: day.note || \"\",\n                    }))\n                  : Array(7)\n                      .fill()\n                      .map(() => ({\n                        isAbsent: false,\n                        absenceReason: \"\",\n                        hours: \"0\",\n                        timeSlots: [],\n                        notes: \"\",\n                      }));\n\n                // Calculer le total des heures\n                const totalHours = days.reduce((sum, day) => {\n                  return sum + (day.isAbsent ? 0 : parseFloat(day.hours || 0));\n                }, 0);\n\n                // Déterminer la couleur du total (rouge si < heures contractuelles, vert si >=)\n                const totalColor =\n                  totalHours < employee.contractHours ? \"#ef4444\" : \"#10b981\";\n\n                return `\n                <tr>\n                  <td style=\"padding: 10px; border: 1px solid #d1d5db; font-weight: bold;\">\n                    ${employee.firstName || employee.first_name || \"Inconnu\"} ${\n                  employee.lastName || employee.last_name || \"Inconnu\"\n                }<br>\n                    <span style=\"font-weight: normal; font-size: 0.9em;\">${\n                      employee.role\n                    }</span>\n                  </td>\n                  ${days\n                    .map((day, index) => {\n                      const dayDate = new Date(currentWeekStart);\n                      dayDate.setDate(dayDate.getDate() + index);\n                      const isWeekendDay = isWeekend(dayDate);\n\n                      return `\n                      <td style=\"padding: 8px; border: 1px solid #d1d5db; text-align: center; ${\n                        isWeekendDay ? \"background-color: #f9fafb;\" : \"\"\n                      }\">\n                        ${\n                          day.isAbsent\n                            ? `<span style=\"color: #ef4444; font-weight: bold;\">${\n                                day.absenceReason || \"Absent\"\n                              }</span>`\n                            : `\n                            <div style=\"font-weight: bold; font-size: 1.2em;\">${(\n                              day.timeSlots || []\n                            )\n                              .map((slot) => `${slot.start}-${slot.end}`)\n                              .join(\"<br>\")}</div>\n                            <div style=\"font-size: 0.8em; margin-top: 3px;\">${\n                              day.hours\n                            }h</div>\n                            ${\n                              day.notes\n                                ? `<div style=\"font-style: italic; font-size: 0.8em; color: #6b7280;\">${DOMPurify.sanitize(\n                                    day.notes\n                                  )}</div>`\n                                : \"\"\n                            }\n                          `\n                        }\n                      </td>\n                    `;\n                    })\n                    .join(\"\")}\n                  <td style=\"padding: 10px; border: 1px solid #d1d5db; text-align: center; font-weight: bold; color: ${totalColor};\">\n                    ${totalHours.toFixed(1)}h<br>\n                    <span style=\"font-size: 0.8em; font-weight: normal;\">(${\n                      employee.contractHours\n                    }h)</span>\n                  </td>\n                </tr>\n              `;\n              })\n              .join(\"\")}\n          </tbody>\n        </table>\n      </div>\n    `;\n\n    // Ajouter le contenu à l'élément temporaire\n    tempElement.innerHTML = DOMPurify.sanitize(content);\n    document.body.appendChild(tempElement);\n\n    // Générer le PDF\n    html2canvas(tempElement, {\n      scale: 1,\n      useCORS: true,\n      logging: false,\n    }).then((canvas) => {\n      const imgData = canvas.toDataURL(\"image/png\");\n      const pdf = new jsPDF(\"l\", \"mm\", \"a4\"); // Format paysage\n      const pdfWidth = pdf.internal.pageSize.getWidth();\n      const ratio = canvas.width / canvas.height;\n      const imgWidth = pdfWidth;\n      const imgHeight = imgWidth / ratio;\n\n      pdf.addImage(imgData, \"PNG\", 0, 0, imgWidth, imgHeight);\n      pdf.save(\n        `Planning_${department}_${formatDate(\n          currentWeekStart,\n          \"yyyy-MM-dd\"\n        )}.pdf`\n      );\n\n      // Nettoyer\n      document.body.removeChild(tempElement);\n\n      toast.success(\n        `Planning du département ${department} exporté avec succès`\n      );\n    });\n  };\n\n  // Fonction pour générer un PDF pour un employé spécifique\n  const generateEmployeePDF = (employee) => {\n    if (!employee) {\n      toast.error(\"Employé non trouvé\");\n      return;\n    }\n\n    // Trouver le planning de l'employé\n    const employeeSchedule = scheduleData.find(\n      (s) => s.employeeId === employee.id\n    );\n\n    if (!employeeSchedule) {\n      toast.info(\n        `Aucun planning trouvé pour ${\n          employee.firstName || employee.first_name || \"Inconnu\"\n        } ${employee.lastName || employee.last_name || \"Inconnu\"}`\n      );\n      return;\n    }\n\n    // Convertir les jours au format attendu\n    const formattedDays = employeeSchedule.days.map((day) => {\n      return {\n        isAbsent:\n          day.type === \"absence\" && day.absence && day.absence.trim() !== \"\",\n        absenceReason: day.absence || \"\",\n        hours: day.hours || \"0\",\n        timeSlots: day.timeSlots || [],\n        notes: day.note || \"\",\n      };\n    });\n\n    // Créer un élément temporaire pour le rendu\n    const tempElement = document.createElement(\"div\");\n    tempElement.style.position = \"absolute\";\n    tempElement.style.left = \"-9999px\";\n    tempElement.style.top = \"-9999px\";\n    tempElement.style.width = \"1000px\"; // Plus large pour le format paysage\n\n    // Formater les dates\n    const weekStartDate = new Date(currentWeekStart);\n    const weekEndDate = new Date(currentWeekStart);\n    weekEndDate.setDate(weekEndDate.getDate() + 6);\n\n    const formattedWeekStart = formatDate(weekStartDate);\n    const formattedWeekEnd = formatDate(weekEndDate);\n\n    // Calculer le total des heures\n    const totalHours = formattedDays.reduce((sum, day) => {\n      return sum + (day.isAbsent ? 0 : parseFloat(day.hours || 0));\n    }, 0);\n\n    // Créer le contenu HTML\n    const content = `\n      <div style=\"font-family: Arial, sans-serif; padding: 20px; color: #333; text-align: center;\">\n        <h2 style=\"text-align: center; color: #2563eb;\">Planning Hebdomadaire</h2>\n        <h3 style=\"text-align: center; margin-bottom: 10px;\">Du ${formattedWeekStart} au ${formattedWeekEnd}</h3>\n        \n        <div style=\"margin-bottom: 20px; text-align: center;\">\n          <h2 style=\"margin-bottom: 5px; color: #2563eb; font-size: 24px; font-weight: bold;\">${\n            employee.firstName || employee.first_name || \"Inconnu\"\n          } ${employee.lastName || employee.last_name || \"Inconnu\"}</h2>\n          <p style=\"margin: 5px 0;\">Poste: ${employee.role}</p>\n          <p style=\"margin: 5px 0;\">Département: ${employee.department}</p>\n          <p style=\"margin: 5px 0;\">Heures contractuelles: ${\n            employee.contractHours\n          }h</p>\n          <p style=\"margin: 5px 0;\">Total heures planifiées: ${totalHours.toFixed(\n            1\n          )}h</p>\n        </div>\n        \n        <table style=\"width: 100%; border-collapse: collapse; margin: 0 auto; max-width: 900px;\">\n          <thead>\n            <tr style=\"background-color: #e5e7eb;\">\n              <th style=\"padding: 10px; border: 1px solid #d1d5db; text-align: left;\">Jour</th>\n              <th style=\"padding: 10px; border: 1px solid #d1d5db; text-align: left;\">Heures</th>\n              <th style=\"padding: 10px; border: 1px solid #d1d5db; text-align: left;\">Créneaux</th>\n              <th style=\"padding: 10px; border: 1px solid #d1d5db; text-align: left;\">Notes</th>\n            </tr>\n          </thead>\n          <tbody>\n            ${formattedDays\n              .map((day, index) => {\n                const dayDate = new Date(currentWeekStart);\n                dayDate.setDate(dayDate.getDate() + index);\n                const isWeekendDay = isWeekend(dayDate);\n\n                return `\n                <tr style=\"background-color: ${\n                  isWeekendDay ? \"#f9fafb\" : \"white\"\n                };\">\n                  <td style=\"padding: 10px; border: 1px solid #d1d5db; font-weight: ${\n                    isWeekendDay ? \"bold\" : \"normal\"\n                  };\">\n                    ${getDayName(dayDate)} ${formatDate(dayDate, \"dd/MM\")}\n                  </td>\n                  <td style=\"padding: 10px; border: 1px solid #d1d5db;\">\n                    ${\n                      day.isAbsent\n                        ? `<span style=\"color: #ef4444; font-weight: bold;\">${\n                            day.absenceReason || \"Absent\"\n                          }</span>`\n                        : `${day.hours}h`\n                    }\n                  </td>\n                  <td style=\"padding: 10px; border: 1px solid #d1d5db;\">\n                    ${\n                      day.isAbsent\n                        ? \"-\"\n                        : (day.timeSlots || [])\n                            .map((slot) => `${slot.start} - ${slot.end}`)\n                            .join(\"<br>\")\n                    }\n                  </td>\n                  <td style=\"padding: 10px; border: 1px solid #d1d5db; font-style: italic;\">\n                    ${day.notes || \"-\"}\n                  </td>\n                </tr>\n              `;\n              })\n              .join(\"\")}\n          </tbody>\n        </table>\n      </div>\n    `;\n\n    // Ajouter le contenu à l'élément temporaire\n    tempElement.innerHTML = DOMPurify.sanitize(content);\n    document.body.appendChild(tempElement);\n\n    // Générer le PDF\n    html2canvas(tempElement, {\n      scale: 1,\n      useCORS: true,\n      logging: false,\n    }).then((canvas) => {\n      const imgData = canvas.toDataURL(\"image/png\");\n      const pdf = new jsPDF(\"l\", \"mm\", \"a4\"); // Format paysage\n      const pdfWidth = pdf.internal.pageSize.getWidth();\n      const ratio = canvas.width / canvas.height;\n      const imgWidth = pdfWidth;\n      const imgHeight = imgWidth / ratio;\n\n      pdf.addImage(imgData, \"PNG\", 0, 0, imgWidth, imgHeight);\n      pdf.save(\n        `Planning_${employee.firstName || employee.first_name || \"Inconnu\"}_${\n          employee.lastName || employee.last_name || \"Inconnu\"\n        }_${formatDate(currentWeekStart, \"yyyy-MM-dd\")}.pdf`\n      );\n\n      // Nettoyer\n      document.body.removeChild(tempElement);\n\n      toast.success(\n        `Planning de ${\n          employee.firstName || employee.first_name || \"Inconnu\"\n        } ${\n          employee.lastName || employee.last_name || \"Inconnu\"\n        } exporté avec succès`\n      );\n    });\n  };\n\n  // Ajouter la fonction de gestion de création\n  // eslint-disable-next-line no-unused-vars\n  const handleCreateSchedule = async (formData) => {\n    try {\n      // S'assurer que la date de début de semaine est correctement définie\n      if (!formData.weekStart) {\n        formData.weekStart = formattedWeekStart;\n      }\n\n      const result = await createSchedule(formData);\n      if (result.success) {\n        await fetchSchedules(formData.weekStart);\n        toast.success(\n          \"Planning créé avec succès pour la semaine du \" +\n            formatDate(new Date(formData.weekStart))\n        );\n      } else {\n        toast.error(result.error || \"Erreur lors de la création du planning\");\n      }\n    } catch (error) {\n      console.error(\"Erreur lors de la création du planning:\", error);\n      toast.error(\"Erreur lors de la création du planning\");\n    }\n  };\n\n  // Vérifier si le token d'authentification est présent\n  useEffect(() => {\n    const token = localStorage.getItem(\"token\");\n    console.log(\n      \"Token d'authentification dans WeeklySchedule:\",\n      token ? \"Présent\" : \"Manquant\",\n      token ? `(${token.substring(0, 10)}...)` : \"\"\n    );\n\n    if (!token) {\n      console.error(\"Token d'authentification manquant dans WeeklySchedule\");\n      toast.error(\"Vous devez être connecté pour accéder à cette page\");\n      navigate(\"/login\");\n    }\n  }, [navigate]);\n\n  // Afficher un spinner pendant le chargement\n  if (employeesLoading || schedulesLoading) {\n    return (\n      <Spinner $center={true} $size=\"large\" text=\"Chargement du planning...\" />\n    );\n  }\n\n  return (\n    <div>\n      <ScheduleContainer>\n        <ScheduleHeader>\n          <HeaderLeft>\n            <AnimationContainer>\n              <Lottie\n                options={{\n                  loop: true,\n                  autoplay: true,\n                  animationData: thinkingAnimation,\n                  rendererSettings: {\n                    preserveAspectRatio: \"xMidYMid slice\",\n                  },\n                }}\n                height={80}\n                width={80}\n              />\n            </AnimationContainer>\n            <TitleContainer>\n              <PageTitle>Planning Hebdomadaire</PageTitle>\n              <PageDescription>\n                Gérez les horaires de travail de vos employés pour la semaine\n                sélectionnée. Chaque semaine a son propre planning indépendant.\n              </PageDescription>\n            </TitleContainer>\n          </HeaderLeft>\n          <div>\n            <WeekNavigation>\n              <WeekDisplay>\n                <h3>\n                  Semaine du {formatDate(currentWeekStart)} au{\" \"}\n                  {formatDate(getWeekEnd(currentWeekStart))}\n                </h3>\n              </WeekDisplay>\n              <WeekActions>\n                <ActionButton variant=\"outline\" onClick={goToPreviousWeek}>\n                  <FaArrowLeft /> Précédente\n                </ActionButton>\n                <ActionButton variant=\"outline\" onClick={goToCurrentWeek}>\n                  <FaCalendarDay /> Actuelle\n                </ActionButton>\n                <ActionButton variant=\"outline\" onClick={goToNextWeek}>\n                  Suivante <FaArrowRight />\n                </ActionButton>\n              </WeekActions>\n            </WeekNavigation>\n          </div>\n        </ScheduleHeader>\n\n        {!editingEmployeeId && (\n          <>\n            <SearchContainer>\n              <EmployeeSearchInput\n                type=\"text\"\n                placeholder=\"Rechercher un employé par nom, prénom ou email...\"\n                value={searchQuery}\n                onChange={handleSearchChange}\n              />\n            </SearchContainer>\n\n            <ScheduleFilters>\n              <FiltersGroup>\n                <FilterContainer>\n                  <FilterSelect\n                    value={selectedDepartment}\n                    onChange={handleDepartmentChange}\n                    placeholder=\"Tous les départements\"\n                  >\n                    <option value=\"\">Tous les départements</option>\n                    {uniqueDepartments.map((dept) => (\n                      <option key={dept} value={dept}>\n                        {dept}\n                      </option>\n                    ))}\n                  </FilterSelect>\n                </FilterContainer>\n\n                <FilterContainer>\n                  <FilterSelect\n                    value={selectedRole}\n                    onChange={handleRoleChange}\n                    placeholder=\"Tous les rôles\"\n                  >\n                    <option value=\"\">Tous les rôles</option>\n                    {uniqueRoles.map((role) => (\n                      <option key={role} value={role}>\n                        {role}\n                      </option>\n                    ))}\n                  </FilterSelect>\n                </FilterContainer>\n              </FiltersGroup>\n\n              <ExportAllButton\n                onClick={() => setShowExportOptions(!showExportOptions)}\n                style={{ minWidth: \"200px\" }}\n              >\n                <FaFilePdf /> Options d'export\n              </ExportAllButton>\n            </ScheduleFilters>\n\n            {showExportOptions && (\n              <ExportOptions>\n                <ExportOptionsTitle>\n                  <FaFilePdf /> Options d'exportation PDF\n                </ExportOptionsTitle>\n                <ExportOptionsGrid>\n                  <ExportOptionCard onClick={generateAllEmployeesPDF}>\n                    <ExportOptionTitle>\n                      <FaUsers /> Planning global\n                    </ExportOptionTitle>\n                    <ExportOptionDescription>\n                      Exporter le planning de tous les employés affichés dans un\n                      seul document PDF\n                    </ExportOptionDescription>\n                  </ExportOptionCard>\n\n                  {uniqueDepartments.map((dept) => (\n                    <ExportOptionCard\n                      key={dept}\n                      onClick={() => generateDepartmentPDF(dept)}\n                    >\n                      <ExportOptionTitle>\n                        <FaUsers /> Département: {dept}\n                      </ExportOptionTitle>\n                      <ExportOptionDescription>\n                        Exporter uniquement le planning des employés du\n                        département {dept}\n                      </ExportOptionDescription>\n                    </ExportOptionCard>\n                  ))}\n                </ExportOptionsGrid>\n              </ExportOptions>\n            )}\n\n            <Card>\n              <CardHeader>\n                <PlanningTitle>\n                  {filteredEmployees.length > 1\n                    ? `Plannings hebdomadaires (${filteredEmployees.length})`\n                    : \"Planning hebdomadaire\"}\n                </PlanningTitle>\n              </CardHeader>\n              <CardContent>\n                {filteredEmployees.length === 0 ? (\n                  <NoResultsMessage>\n                    {searchQuery\n                      ? \"Aucun employé trouvé avec cette recherche.\"\n                      : \"Aucun employé trouvé avec les filtres sélectionnés.\"}\n                  </NoResultsMessage>\n                ) : (\n                  <>\n                    <WeeklyScheduleGrid\n                      employees={filteredEmployees}\n                      weekStart={currentWeekStart}\n                      scheduleData={scheduleData}\n                      onChange={handleScheduleChange}\n                      readOnly={false}\n                      onEditEmployee={handleEditEmployee}\n                      onGeneratePDF={generateEmployeePDF}\n                    />\n                  </>\n                )}\n              </CardContent>\n            </Card>\n          </>\n        )}\n\n        {editingEmployeeId && (\n          <Card>\n            <CardHeader>\n              <div className=\"flex justify-between items-center\">\n                <h2>Modifier le planning</h2>\n                <Button variant=\"secondary\" onClick={handleCancelEdit}>\n                  Annuler\n                </Button>\n              </div>\n            </CardHeader>\n            <CardContent>\n              {editingEmployee && (\n                <EmployeeScheduleForm\n                  employee={editingEmployee}\n                  weekStart={currentWeekStart}\n                  scheduleData={\n                    scheduleData.find(\n                      (s) => s.employeeId === editingEmployeeId\n                    ) || {\n                      employeeId: editingEmployeeId,\n                      days: Array(7)\n                        .fill()\n                        .map(() => ({\n                          type: \"work\",\n                          hours: \"0\",\n                          absence: \"\",\n                          note: \"\",\n                          timeSlots: [],\n                        })),\n                    }\n                  }\n                  onSave={handleScheduleChange}\n                  onCancel={handleCancelEdit}\n                />\n              )}\n            </CardContent>\n          </Card>\n        )}\n      </ScheduleContainer>\n    </div>\n  );\n};\n\nexport default WeeklySchedulePage;\n"],"names":["fadeIn","keyframes","FormContainer","styled","div","_ref","theme","colors","background","primary","_ref2","text","_ref3","mode","FormTitle","h3","_ref4","EmployeeInfo","_ref5","border","EmployeeName","EmployeeDetails","_ref6","secondary","DaysGrid","DayCard","_ref7","$isWeekend","tertiary","_ref8","_ref9","_ref10","DayHeader","_ref11","DayName","_ref12","DayDate","_ref13","InputGroup","InputLabel","label","_ref14","ButtonGroup","ActionButton","Button","TotalHours","_ref15","TimeSlotContainer","TimeSlot","TimeInput","FormInput","_ref16","input","_ref17","_ref18","_ref19","main","_ref20","AddSlotButton","RemoveSlotButton","RadioGroup","RadioLabel","_ref21","RadioInput","_ref22","StyledFormInput","_ref23","_ref24","_ref25","_ref26","_ref27","_ref28","placeholder","WeekInfo","_ref29","info","dark","_ref30","light","_ref31","calculateDayHours","timeSlots","length","totalHours","forEach","slot","start","end","startParts","split","map","Number","endParts","startDate","Date","setHours","endDate","setDate","getDate","hours","calculateHours","toFixed","_ref32","employee","weekStart","scheduleData","onSave","onCancel","emptyDays","Array","fill","type","absence","note","initialScheduleData","useMemo","isArray","days","formData","setFormData","useState","isSubmitting","setIsSubmitting","errors","setErrors","weekDays","getDaysOfWeek","isWeekend","useCallback","dayIndex","handleTypeChange","prevFormData","newFormData","handleAbsenceChange","value","handleNoteChange","addTimeSlot","newTimeSlots","removeTimeSlot","slotIndex","splice","updateTimeSlot","field","calculateTotalHours","reduce","total","day","parseFloat","handleSave","formattedSchedule","updatedScheduleData","employeeId","id","formatDateForInput","_jsxs","children","formatDate","variant","onClick","_jsx","FaTimes","disabled","FaSave","first_name","last_name","department","contractHours","index","_formData$index","_formData$index2","_formData$index3","_formData$index4","_formData$index5","_formData$index5$time","_formData$index6","_formData$index7","name","checked","onChange","e","target","useHourBalance","loading","setLoading","error","setError","getEmployeeBalance","async","result","HourBalanceService","getByEmployee","success","balance","console","warn","message","err","updateEmployeeBalance","balanceData","updateBalance","Error","toast","standardizeScheduleData","schedule","undefined","week_start","employee_id","convertDayToStandardFormat","createEmptyDay","isAbsent","trim","prepareScheduleForApi","standardSchedule","schedule_data","JSON","stringify","total_hours","parseScheduleFromApi","apiData","parse","ScheduleGrid","GridCell","HeaderCell","props","sortable","EmployeeCell","TotalCell","DayCell","readOnly","BreakInfo","HoursValue","AbsenceValue","NoteText","ActionCell","ExportCell","EmployeeRow","QuickEditButton","button","EditButton","PdfButton","_ref33","_ref34","WeeklyScheduleGrid","_ref35","employees","onEditEmployee","onGeneratePDF","useTheme","employeesArray","scheduleDataArray","validWeekStart","date","isNaN","getTime","sortConfig","setSortConfig","key","direction","daysOfWeek","sortedEmployees","sort","a","b","aValue","bValue","lastName","firstName","toLowerCase","calculateEmployeeTotal","requestSort","getSortIcon","FaSortAmountUp","size","FaSortAmountDown","findEmployeeSchedule","find","handleEditClick","isEmployeeAbsent","formatDayCell","hasTimeSlots","_Fragment","break","title","emp","workedHours","hour_balance","diff","useEffect","loadHourBalances","generatePDF","tempElement","document","createElement","style","position","left","top","width","weekStartDate","weekEndDate","formattedWeekStart","formattedWeekEnd","sum","content","role","dayDate","isWeekendDay","getDayName","absenceReason","join","notes","DOMPurify","sanitize","innerHTML","body","appendChild","html2canvas","scale","useCORS","logging","then","canvas","imgData","toDataURL","pdf","jsPDF","imgWidth","internal","pageSize","getWidth","imgHeight","height","addImage","save","removeChild","formatEmployeeCell","_","stopPropagation","FaEdit","employeeSchedule","formattedDays","handleGeneratePDF","FaFilePdf","defaultProps","rotate","SpinnerContainer","$center","SpinnerElement","$size","SpinnerText","p","Spinner","useWeeklySchedules","schedules","setSchedules","socket","isConnected","notifyDataChange","useWebSocket","handleWebSocketMessage","event","data","prevSchedules","some","scheduleId","filter","addEventListener","removeEventListener","fetchSchedules","localStorage","getItem","formattedDate","formatDateForAPI","includes","WeeklyScheduleService","getByWeek","details","standardizedSchedules","apiError","createSchedule","create","newSchedule","prev","updateSchedule","update","updatedSchedule","deleteSchedule","delete","Lottie","require","ScheduleContainer","ScheduleHeader","ScheduleFilters","FiltersGroup","WeekNavigation","WeekDisplay","WeekActions","ExportAllButton","FilterContainer","FilterSelect","FormSelect","SearchContainer","EmployeeSearchInput","NoResultsMessage","PlanningTitle","h2","HeaderLeft","AnimationContainer","TitleContainer","PageTitle","h1","PageDescription","ExportOptions","ExportOptionsTitle","h4","ExportOptionsGrid","ExportOptionCard","ExportOptionTitle","h5","ExportOptionDescription","WeeklySchedulePage","navigate","useNavigate","weekStartParam","useParams","prevScheduleDataRef","useRef","prevFormattedScheduleDataRef","currentWeekStart","setCurrentWeekStart","getWeekStart","setScheduleData","editingEmployeeId","setEditingEmployeeId","selectedDepartment","setSelectedDepartment","selectedRole","setSelectedRole","searchQuery","setSearchQuery","showExportOptions","setShowExportOptions","employeesLoading","employeesError","useEmployees","schedulesLoading","schedulesError","formattedScheduleData","currentScheduleDataStr","currentFormattedScheduleDataStr","current","catch","editingEmployee","uniqueDepartments","Set","dept","uniqueRoles","replace","filteredEmployees","filtered","query","email","goToPreviousWeek","addWeeks","goToNextWeek","goToCurrentWeek","handleEditEmployee","handleCancelEdit","handleSearchChange","handleDepartmentChange","handleRoleChange","handleScheduleChange","existingScheduleResult","getByEmployeeAndWeek","prevData","existingIndex","findIndex","s","newData","push","token","log","substring","options","loop","autoplay","animationData","thinkingAnimation","rendererSettings","preserveAspectRatio","getWeekEnd","FaArrowLeft","FaCalendarDay","FaArrowRight","minWidth","generateAllEmployeesPDF","activeEmployees","every","dayData","cellContent","FaUsers","departmentEmployees","totalColor","generateDepartmentPDF","Card","CardHeader","CardContent","className","EmployeeScheduleForm"],"sourceRoot":""}