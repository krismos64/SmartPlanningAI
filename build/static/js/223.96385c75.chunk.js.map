{"version":3,"file":"static/js/223.96385c75.chunk.js","mappings":"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","sources":["services/api.js","components/schedule/EmployeeScheduleForm.js","hooks/useHourBalance.js","utils/scheduleUtils.js","components/schedule/WeeklyScheduleGrid.js","components/ui/PageHeader.js","components/ui/Spinner.js","hooks/useWeeklySchedules.js","pages/WeeklySchedule.js"],"sourcesContent":["import { API_ENDPOINTS, apiRequest } from \"../config/api\";\n\nexport const AuthService = {\n  login: async (email, password) => {\n    console.log(\"🔐 Tentative de connexion avec:\", { email, password: \"***\" });\n    try {\n      const response = await apiRequest(API_ENDPOINTS.LOGIN, \"POST\", {\n        email,\n        password,\n      });\n\n      if (response.error) {\n        console.error(\"❌ Erreur de connexion:\", response.error);\n        return { success: false, message: response.error };\n      }\n\n      if (response.token) {\n        console.log(\"✅ Connexion réussie, token reçu\");\n        localStorage.setItem(\"token\", response.token);\n        localStorage.setItem(\n          \"user\",\n          JSON.stringify({\n            id: response.id,\n            email: response.email,\n            role: response.role,\n            first_name: response.first_name,\n            last_name: response.last_name,\n          })\n        );\n        return { success: true, user: response };\n      } else {\n        console.error(\"❌ Connexion échouée: pas de token reçu\");\n        return { success: false, message: \"Erreur d'authentification\" };\n      }\n    } catch (error) {\n      console.error(\"❌ Erreur lors de la connexion:\", error);\n      return {\n        success: false,\n        message: error.message || \"Erreur de connexion\",\n      };\n    }\n  },\n\n  register: async (userData) => {\n    try {\n      const response = await apiRequest(API_ENDPOINTS.REGISTER, \"POST\", {\n        ...userData,\n        first_name: userData.first_name,\n        last_name: userData.last_name,\n      });\n\n      if (response.error) {\n        return { success: false, message: response.error };\n      }\n\n      return { success: true, user: response };\n    } catch (error) {\n      return {\n        success: false,\n        message: error.message || \"Erreur d'inscription\",\n      };\n    }\n  },\n\n  logout: () => {\n    localStorage.removeItem(\"token\");\n    localStorage.removeItem(\"user\");\n    return { success: true };\n  },\n\n  getCurrentUser: () => {\n    const userStr = localStorage.getItem(\"user\");\n    if (!userStr) return null;\n\n    try {\n      return JSON.parse(userStr);\n    } catch (error) {\n      console.error(\"Erreur lors de la récupération de l'utilisateur:\", error);\n      return null;\n    }\n  },\n};\n\nexport const EmployeeService = {\n  getAll: async () => {\n    try {\n      const response = await apiRequest(API_ENDPOINTS.EMPLOYEES.BASE, \"GET\");\n\n      if (response.error) {\n        return { success: false, message: response.error };\n      }\n\n      return { success: true, employees: response };\n    } catch (error) {\n      return {\n        success: false,\n        message: error.message || \"Erreur lors de la récupération des employés\",\n      };\n    }\n  },\n\n  getById: async (id) => {\n    try {\n      const response = await apiRequest(\n        API_ENDPOINTS.EMPLOYEES.BY_ID(id),\n        \"GET\"\n      );\n\n      if (response.error) {\n        return { success: false, message: response.error };\n      }\n\n      return {\n        ...response,\n        first_name: response.first_name,\n        last_name: response.last_name,\n      };\n    } catch (error) {\n      return {\n        success: false,\n        message: error.message || \"Erreur lors de la récupération de l'employé\",\n      };\n    }\n  },\n\n  create: async (employeeData) => {\n    try {\n      const response = await apiRequest(\n        API_ENDPOINTS.EMPLOYEES.BASE,\n        \"POST\",\n        employeeData\n      );\n\n      if (response.error) {\n        return { success: false, message: response.error };\n      }\n\n      return { success: true, employee: response };\n    } catch (error) {\n      return {\n        success: false,\n        message: error.message || \"Erreur lors de la création de l'employé\",\n      };\n    }\n  },\n\n  update: async (id, employeeData) => {\n    try {\n      const response = await apiRequest(\n        API_ENDPOINTS.EMPLOYEES.BY_ID(id),\n        \"PUT\",\n        employeeData\n      );\n\n      if (response.error) {\n        return { success: false, message: response.error };\n      }\n\n      return { success: true, employee: response };\n    } catch (error) {\n      return {\n        success: false,\n        message: error.message || \"Erreur lors de la mise à jour de l'employé\",\n      };\n    }\n  },\n\n  delete: async (id) => {\n    try {\n      const response = await apiRequest(\n        API_ENDPOINTS.EMPLOYEES.BY_ID(id),\n        \"DELETE\"\n      );\n\n      if (response.error) {\n        return { success: false, message: response.error };\n      }\n\n      return { success: true };\n    } catch (error) {\n      return {\n        success: false,\n        message: error.message || \"Erreur lors de la suppression de l'employé\",\n      };\n    }\n  },\n};\n\nexport const VacationService = {\n  getAll: async () => {\n    try {\n      const response = await apiRequest(API_ENDPOINTS.VACATIONS, \"GET\");\n\n      if (response.error) {\n        return { success: false, message: response.error };\n      }\n\n      return { success: true, vacations: response };\n    } catch (error) {\n      return {\n        success: false,\n        message: error.message || \"Erreur lors de la récupération des congés\",\n      };\n    }\n  },\n\n  getById: async (id) => {\n    try {\n      const response = await apiRequest(\n        `${API_ENDPOINTS.VACATIONS}/${id}`,\n        \"GET\"\n      );\n\n      if (response.error) {\n        return { success: false, message: response.error };\n      }\n\n      return { success: true, vacation: response };\n    } catch (error) {\n      return {\n        success: false,\n        message: error.message || \"Erreur lors de la récupération du congé\",\n      };\n    }\n  },\n\n  create: async (vacationData) => {\n    try {\n      const response = await apiRequest(\n        API_ENDPOINTS.VACATIONS,\n        \"POST\",\n        vacationData\n      );\n\n      if (response.error) {\n        return { success: false, message: response.error };\n      }\n\n      return { success: true, vacation: response };\n    } catch (error) {\n      return {\n        success: false,\n        message: error.message || \"Erreur lors de la création du congé\",\n      };\n    }\n  },\n\n  update: async (id, vacationData) => {\n    try {\n      const response = await apiRequest(\n        `${API_ENDPOINTS.VACATIONS}/${id}`,\n        \"PUT\",\n        vacationData\n      );\n\n      if (response.error) {\n        return { success: false, message: response.error };\n      }\n\n      return { success: true, vacation: response };\n    } catch (error) {\n      return {\n        success: false,\n        message: error.message || \"Erreur lors de la mise à jour du congé\",\n      };\n    }\n  },\n\n  delete: async (id) => {\n    try {\n      const response = await apiRequest(\n        `${API_ENDPOINTS.VACATIONS}/${id}`,\n        \"DELETE\"\n      );\n\n      if (response.error) {\n        return { success: false, message: response.error };\n      }\n\n      return { success: true };\n    } catch (error) {\n      return {\n        success: false,\n        message: error.message || \"Erreur lors de la suppression du congé\",\n      };\n    }\n  },\n};\n\nexport const ActivityService = {\n  getAll: async () => {\n    try {\n      const response = await apiRequest(API_ENDPOINTS.ACTIVITIES.LIST, \"GET\");\n\n      if (response.error) {\n        return { success: false, message: response.error };\n      }\n\n      return { success: true, activities: response };\n    } catch (error) {\n      return {\n        success: false,\n        message:\n          error.message || \"Erreur lors de la récupération des activités\",\n      };\n    }\n  },\n\n  create: async (activityData) => {\n    try {\n      const response = await apiRequest(\n        API_ENDPOINTS.ACTIVITIES.CREATE,\n        \"POST\",\n        activityData\n      );\n\n      if (response.error) {\n        return { success: false, message: response.error };\n      }\n\n      return { success: true, activity: response };\n    } catch (error) {\n      return {\n        success: false,\n        message: error.message || \"Erreur lors de la création de l'activité\",\n      };\n    }\n  },\n\n  update: async (id, activityData) => {\n    try {\n      const response = await apiRequest(\n        API_ENDPOINTS.ACTIVITIES.UPDATE(id),\n        \"PUT\",\n        activityData\n      );\n\n      if (response.error) {\n        return { success: false, message: response.error };\n      }\n\n      return { success: true, activity: response };\n    } catch (error) {\n      return {\n        success: false,\n        message: error.message || \"Erreur lors de la mise à jour de l'activité\",\n      };\n    }\n  },\n\n  delete: async (id) => {\n    try {\n      const response = await apiRequest(\n        API_ENDPOINTS.ACTIVITIES.DELETE(id),\n        \"DELETE\"\n      );\n\n      if (response.error) {\n        return { success: false, message: response.error };\n      }\n\n      return { success: true };\n    } catch (error) {\n      return {\n        success: false,\n        message: error.message || \"Erreur lors de la suppression de l'activité\",\n      };\n    }\n  },\n};\n\nexport const WeeklyScheduleService = {\n  getAll: async () => {\n    try {\n      const response = await apiRequest(API_ENDPOINTS.WEEKLY_SCHEDULES, \"GET\");\n\n      if (response.error) {\n        return { success: false, message: response.error };\n      }\n\n      return { success: true, schedules: response };\n    } catch (error) {\n      return {\n        success: false,\n        message:\n          error.message || \"Erreur lors de la récupération des plannings\",\n      };\n    }\n  },\n\n  getByWeek: async (weekStart) => {\n    try {\n      const response = await apiRequest(\n        `${API_ENDPOINTS.WEEKLY_SCHEDULES}?weekStart=${weekStart}`,\n        \"GET\"\n      );\n\n      if (response.error) {\n        return { success: false, message: response.error };\n      }\n\n      return { success: true, schedules: response };\n    } catch (error) {\n      return {\n        success: false,\n        message:\n          error.message ||\n          \"Erreur lors de la récupération des plannings pour cette semaine\",\n      };\n    }\n  },\n\n  getByEmployee: async (employeeId) => {\n    try {\n      const response = await apiRequest(\n        `${API_ENDPOINTS.EMPLOYEES.SCHEDULES(employeeId)}`,\n        \"GET\"\n      );\n\n      if (response.error) {\n        return { success: false, message: response.error };\n      }\n\n      return { success: true, schedules: response };\n    } catch (error) {\n      return {\n        success: false,\n        message:\n          error.message ||\n          \"Erreur lors de la récupération des plannings de l'employé\",\n      };\n    }\n  },\n\n  getByEmployeeAndWeek: async (employeeId, weekStart) => {\n    try {\n      const response = await apiRequest(\n        `${API_ENDPOINTS.EMPLOYEES.SCHEDULES(\n          employeeId\n        )}?weekStart=${weekStart}`,\n        \"GET\"\n      );\n\n      if (response.error) {\n        return { success: false, message: response.error };\n      }\n\n      return { success: true, schedule: response };\n    } catch (error) {\n      return {\n        success: false,\n        message: error.message || \"Erreur lors de la récupération du planning\",\n      };\n    }\n  },\n\n  create: async (scheduleData) => {\n    try {\n      const response = await apiRequest(\n        API_ENDPOINTS.WEEKLY_SCHEDULES,\n        \"POST\",\n        scheduleData\n      );\n\n      if (response.error) {\n        return { success: false, message: response.error };\n      }\n\n      return { success: true, schedule: response };\n    } catch (error) {\n      return {\n        success: false,\n        message: error.message || \"Erreur lors de la création du planning\",\n      };\n    }\n  },\n\n  update: async (id, scheduleData) => {\n    try {\n      const response = await apiRequest(\n        `${API_ENDPOINTS.WEEKLY_SCHEDULES}/${id}`,\n        \"PUT\",\n        scheduleData\n      );\n\n      if (response.error) {\n        return { success: false, message: response.error };\n      }\n\n      return { success: true, schedule: response };\n    } catch (error) {\n      return {\n        success: false,\n        message: error.message || \"Erreur lors de la mise à jour du planning\",\n      };\n    }\n  },\n\n  delete: async (id) => {\n    try {\n      const response = await apiRequest(\n        `${API_ENDPOINTS.WEEKLY_SCHEDULES}/${id}`,\n        \"DELETE\"\n      );\n\n      if (response.error) {\n        return { success: false, message: response.error };\n      }\n\n      return { success: true };\n    } catch (error) {\n      return {\n        success: false,\n        message: error.message || \"Erreur lors de la suppression du planning\",\n      };\n    }\n  },\n};\n\nexport const HourBalanceService = {\n  getByEmployee: async (employeeId) => {\n    try {\n      const response = await apiRequest(\n        API_ENDPOINTS.HOUR_BALANCE.BY_EMPLOYEE(employeeId),\n        \"GET\"\n      );\n\n      if (response && response.error) {\n        return { success: false, message: response.error };\n      }\n\n      if (response && typeof response.balance !== \"undefined\") {\n        return { success: true, balance: response.balance };\n      }\n\n      if (response && typeof response === \"object\") {\n        if (typeof response.hour_balance !== \"undefined\") {\n          return { success: true, balance: response.hour_balance };\n        }\n\n        if (\n          Object.keys(response).length === 1 &&\n          typeof Object.values(response)[0] === \"number\"\n        ) {\n          return { success: true, balance: Object.values(response)[0] };\n        }\n      }\n\n      console.warn(\n        `Avertissement: Format de réponse inattendu pour le solde d'heures de l'employé ${employeeId}:`,\n        response\n      );\n      return { success: true, balance: 0 };\n    } catch (error) {\n      console.warn(\n        \"Avertissement lors de la récupération du solde d'heures:\",\n        error\n      );\n      return {\n        success: false,\n        message:\n          error.message || \"Erreur lors de la récupération du solde d'heures\",\n      };\n    }\n  },\n\n  updateBalance: async (employeeId, balanceData) => {\n    try {\n      const response = await apiRequest(\n        API_ENDPOINTS.HOUR_BALANCE.BY_EMPLOYEE(employeeId),\n        \"PUT\",\n        balanceData\n      );\n\n      if (response && response.error) {\n        return { success: false, message: response.error };\n      }\n\n      return {\n        success: true,\n        balance:\n          response.balance ||\n          response.hour_balance ||\n          (typeof response === \"number\" ? response : 0),\n      };\n    } catch (error) {\n      console.error(\"Erreur lors de la mise à jour du solde d'heures:\", error);\n      return {\n        success: false,\n        message:\n          error.message || \"Erreur lors de la mise à jour du solde d'heures\",\n      };\n    }\n  },\n};\n","import PropTypes from \"prop-types\";\nimport { useCallback, useMemo, useState } from \"react\";\nimport { FaSave, FaTimes } from \"react-icons/fa\";\nimport styled, { keyframes } from \"styled-components\";\nimport {\n  calculateHours,\n  formatDate,\n  getDaysOfWeek,\n} from \"../../utils/dateUtils\";\nimport Button from \"../ui/Button\";\nimport { FormInput } from \"../ui/Form\";\n\n// Animations\nconst fadeIn = keyframes`\n  from {\n    opacity: 0;\n    transform: translateY(-10px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n`;\n\nconst FormContainer = styled.div`\n  background-color: ${({ theme }) => theme.colors.background.primary};\n  color: ${({ theme }) => theme.colors.text.primary};\n  border-radius: 8px;\n  box-shadow: 0 4px 12px\n    ${({ theme }) =>\n      theme.mode === \"dark\" ? \"rgba(0, 0, 0, 0.3)\" : \"rgba(0, 0, 0, 0.1)\"};\n  padding: 1.5rem;\n  margin: 1rem 0;\n  animation: ${fadeIn} 0.3s ease-out;\n  max-width: 100%;\n  overflow-x: auto;\n  transition: background-color 0.2s ease, color 0.2s ease;\n\n  @media (max-width: 768px) {\n    padding: 1rem;\n  }\n`;\n\nconst FormTitle = styled.h3`\n  font-size: 1.25rem;\n  font-weight: 600;\n  margin-bottom: 1.5rem;\n  color: ${({ theme }) => theme.colors.text.primary};\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n\n  @media (max-width: 576px) {\n    flex-direction: column;\n    align-items: flex-start;\n    gap: 0.5rem;\n  }\n`;\n\nconst EmployeeInfo = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 1.5rem;\n  padding-bottom: 1rem;\n  border-bottom: 1px solid ${({ theme }) => theme.colors.border};\n\n  @media (min-width: 768px) {\n    flex-direction: row;\n    align-items: center;\n    justify-content: space-between;\n  }\n`;\n\nconst EmployeeName = styled.div`\n  font-size: 1.1rem;\n  font-weight: 600;\n  margin-bottom: 0.5rem;\n\n  @media (min-width: 768px) {\n    margin-bottom: 0;\n  }\n`;\n\nconst EmployeeDetails = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 0.25rem;\n  font-size: 0.9rem;\n  color: ${({ theme }) => theme.colors.text.secondary};\n\n  @media (min-width: 768px) {\n    align-items: flex-end;\n  }\n`;\n\nconst DaysGrid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n  gap: 1rem;\n  margin-bottom: 1.5rem;\n`;\n\nconst DayCard = styled.div`\n  background-color: ${({ $isWeekend, theme }) =>\n    $isWeekend\n      ? theme.colors.background.tertiary\n      : theme.colors.background.secondary};\n  color: ${({ theme }) => theme.colors.text.primary};\n  border: 1px solid ${({ theme }) => theme.colors.border};\n  border-radius: 6px;\n  padding: 1rem;\n  transition: all 0.2s ease;\n\n  &:hover {\n    box-shadow: 0 2px 8px\n      ${({ theme }) =>\n        theme.mode === \"dark\" ? \"rgba(0, 0, 0, 0.3)\" : \"rgba(0, 0, 0, 0.05)\"};\n  }\n`;\n\nconst DayHeader = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 0.75rem;\n  padding-bottom: 0.5rem;\n  border-bottom: 1px solid ${({ theme }) => theme.colors.border};\n`;\n\nconst DayName = styled.div`\n  font-weight: 600;\n  color: ${({ $isWeekend, theme }) =>\n    $isWeekend ? theme.colors.text.secondary : theme.colors.text.primary};\n`;\n\nconst DayDate = styled.div`\n  font-size: 0.85rem;\n  color: ${({ theme }) => theme.colors.text.secondary};\n`;\n\nconst InputGroup = styled.div`\n  margin-bottom: 0.75rem;\n`;\n\nconst InputLabel = styled.label`\n  display: block;\n  font-size: 0.85rem;\n  font-weight: 500;\n  margin-bottom: 0.25rem;\n  color: ${({ theme }) => theme.colors.text.secondary};\n`;\n\nconst ButtonGroup = styled.div`\n  display: flex;\n  gap: 0.5rem;\n\n  @media (max-width: 576px) {\n    width: 100%;\n    justify-content: flex-end;\n  }\n`;\n\nconst ActionButton = styled(Button)`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  gap: 0.5rem;\n  transition: all 0.2s ease;\n\n  &:hover {\n    transform: translateY(-2px);\n  }\n`;\n\nconst TotalHours = styled.div`\n  font-size: 1rem;\n  font-weight: 600;\n  margin-top: 1rem;\n  padding-top: 1rem;\n  border-top: 1px solid ${({ theme }) => theme.colors.border};\n  display: flex;\n  justify-content: space-between;\n`;\n\nconst TimeSlotContainer = styled.div`\n  margin-bottom: 0.5rem;\n`;\n\nconst TimeSlot = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n  margin-bottom: 0.5rem;\n`;\n\nconst TimeInput = styled(FormInput)`\n  width: 100%;\n  max-width: 120px;\n  background-color: ${({ theme }) => theme.colors.background.input};\n  color: ${({ theme }) => theme.colors.text.primary};\n  border-color: ${({ theme }) => theme.colors.border};\n\n  &:focus {\n    border-color: ${({ theme }) => theme.colors.primary.main};\n    box-shadow: 0 0 0 2px\n      ${({ theme }) =>\n        theme.mode === \"dark\"\n          ? \"rgba(59, 130, 246, 0.3)\"\n          : \"rgba(59, 130, 246, 0.2)\"};\n  }\n`;\n\nconst AddSlotButton = styled(Button)`\n  padding: 0.25rem 0.5rem;\n  font-size: 0.8rem;\n  margin-top: 0.25rem;\n`;\n\nconst RemoveSlotButton = styled(Button)`\n  padding: 0.25rem;\n  font-size: 0.8rem;\n  min-width: auto;\n`;\n\nconst RadioGroup = styled.div`\n  display: flex;\n  gap: 1rem;\n  margin-bottom: 0.75rem;\n`;\n\nconst RadioLabel = styled.label`\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n  font-size: 0.9rem;\n  cursor: pointer;\n  color: ${({ theme }) => theme.colors.text.primary};\n`;\n\nconst RadioInput = styled.input`\n  cursor: pointer;\n  accent-color: ${({ theme }) => theme.colors.primary.main};\n`;\n\nconst StyledFormInput = styled(FormInput)`\n  background-color: ${({ theme }) => theme.colors.background.input};\n  color: ${({ theme }) => theme.colors.text.primary};\n  border-color: ${({ theme }) => theme.colors.border};\n\n  &:focus {\n    border-color: ${({ theme }) => theme.colors.primary.main};\n    box-shadow: 0 0 0 2px\n      ${({ theme }) =>\n        theme.mode === \"dark\"\n          ? \"rgba(59, 130, 246, 0.3)\"\n          : \"rgba(59, 130, 246, 0.2)\"};\n  }\n\n  &::placeholder {\n    color: ${({ theme }) => theme.colors.text.placeholder};\n  }\n`;\n\n// Fonction utilitaire pour convertir les données existantes au nouveau format\nconst convertToNewFormat = (day) => {\n  // Si le jour a déjà le format attendu, le retourner tel quel\n  if (day.type) {\n    return { ...day };\n  }\n\n  // Sinon, convertir au nouveau format\n  return {\n    type: day.absence ? \"absence\" : \"work\",\n    hours: day.hours || \"0\",\n    absence: day.absence || \"\",\n    note: day.note || \"\",\n    timeSlots:\n      day.timeSlots ||\n      (day.hours && parseFloat(day.hours) > 0\n        ? [{ start: \"09:00\", end: \"17:00\" }]\n        : []),\n  };\n};\n\n// Fonction utilitaire pour calculer les heures d'un créneau\nconst calculateDayHours = (timeSlots) => {\n  if (!timeSlots || timeSlots.length === 0) return \"0\";\n\n  let totalHours = 0;\n\n  timeSlots.forEach((slot) => {\n    if (slot.start && slot.end) {\n      const startParts = slot.start.split(\":\").map(Number);\n      const endParts = slot.end.split(\":\").map(Number);\n\n      if (startParts.length === 2 && endParts.length === 2) {\n        const startDate = new Date();\n        startDate.setHours(startParts[0], startParts[1], 0);\n\n        const endDate = new Date();\n        endDate.setHours(endParts[0], endParts[1], 0);\n\n        // Si l'heure de fin est avant l'heure de début, on considère que c'est le jour suivant\n        if (endDate < startDate) {\n          endDate.setDate(endDate.getDate() + 1);\n        }\n\n        const hours = calculateHours(startDate, endDate);\n        totalHours += hours;\n      }\n    }\n  });\n\n  return totalHours.toFixed(1);\n};\n\nconst EmployeeScheduleForm = ({\n  employee,\n  weekStart,\n  scheduleData,\n  onSave,\n  onCancel,\n}) => {\n  // Créer un tableau de jours vides\n  const emptyDays = Array(7)\n    .fill()\n    .map(() => ({\n      type: \"work\",\n      hours: \"0\",\n      absence: \"\",\n      note: \"\",\n      timeSlots: [],\n    }));\n\n  // Initialiser les données du formulaire\n  const initialScheduleData = useMemo(() => {\n    // Si scheduleData est un tableau, l'utiliser directement\n    if (Array.isArray(scheduleData)) {\n      return scheduleData;\n    }\n\n    // Si scheduleData est un objet avec une propriété days, utiliser days\n    if (scheduleData && scheduleData.days && Array.isArray(scheduleData.days)) {\n      return scheduleData.days;\n    }\n\n    // Sinon, utiliser le tableau de jours vides\n    return emptyDays;\n  }, [scheduleData]);\n\n  const [formData, setFormData] = useState(initialScheduleData);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [errors, setErrors] = useState({});\n\n  const weekDays = getDaysOfWeek(weekStart);\n\n  // Vérifier si un jour est un weekend\n  const isWeekend = useCallback((dayIndex) => {\n    return dayIndex === 5 || dayIndex === 6; // Samedi ou Dimanche\n  }, []);\n\n  // Gérer le changement de type (travail ou absence)\n  const handleTypeChange = useCallback((dayIndex, type) => {\n    setFormData((prevFormData) => {\n      const newFormData = [...prevFormData];\n      newFormData[dayIndex] = {\n        ...newFormData[dayIndex],\n        type: type,\n        // Si on passe en mode absence, on vide les créneaux horaires\n        timeSlots: type === \"absence\" ? [] : newFormData[dayIndex].timeSlots,\n        // Si on passe en mode travail, on vide le motif d'absence\n        absence: type === \"work\" ? \"\" : newFormData[dayIndex].absence,\n        // Mettre à jour les heures\n        hours:\n          type === \"absence\"\n            ? \"0\"\n            : calculateDayHours(newFormData[dayIndex].timeSlots),\n      };\n      return newFormData;\n    });\n  }, []);\n\n  // Gérer le changement du motif d'absence\n  const handleAbsenceChange = useCallback((dayIndex, value) => {\n    setFormData((prevFormData) => {\n      const newFormData = [...prevFormData];\n      newFormData[dayIndex] = {\n        ...newFormData[dayIndex],\n        absence: value,\n      };\n      return newFormData;\n    });\n  }, []);\n\n  // Gérer le changement de note\n  const handleNoteChange = useCallback((dayIndex, value) => {\n    setFormData((prevFormData) => {\n      const newFormData = [...prevFormData];\n      newFormData[dayIndex] = {\n        ...newFormData[dayIndex],\n        note: value,\n      };\n      return newFormData;\n    });\n  }, []);\n\n  // Ajouter un créneau horaire\n  const addTimeSlot = useCallback((dayIndex) => {\n    setFormData((prevFormData) => {\n      const newFormData = [...prevFormData];\n      const newTimeSlots = [\n        ...(newFormData[dayIndex].timeSlots || []),\n        { start: \"09:00\", end: \"17:00\" },\n      ];\n\n      newFormData[dayIndex] = {\n        ...newFormData[dayIndex],\n        timeSlots: newTimeSlots,\n        hours: calculateDayHours(newTimeSlots),\n      };\n\n      return newFormData;\n    });\n  }, []);\n\n  // Supprimer un créneau horaire\n  const removeTimeSlot = useCallback((dayIndex, slotIndex) => {\n    setFormData((prevFormData) => {\n      const newFormData = [...prevFormData];\n      const newTimeSlots = [...newFormData[dayIndex].timeSlots];\n      newTimeSlots.splice(slotIndex, 1);\n\n      newFormData[dayIndex] = {\n        ...newFormData[dayIndex],\n        timeSlots: newTimeSlots,\n        hours: calculateDayHours(newTimeSlots),\n      };\n\n      return newFormData;\n    });\n  }, []);\n\n  // Mettre à jour un créneau horaire\n  const updateTimeSlot = useCallback((dayIndex, slotIndex, field, value) => {\n    setFormData((prevFormData) => {\n      const newFormData = [...prevFormData];\n      const newTimeSlots = [...newFormData[dayIndex].timeSlots];\n\n      newTimeSlots[slotIndex] = {\n        ...newTimeSlots[slotIndex],\n        [field]: value,\n      };\n\n      newFormData[dayIndex] = {\n        ...newFormData[dayIndex],\n        timeSlots: newTimeSlots,\n        hours: calculateDayHours(newTimeSlots),\n      };\n\n      return newFormData;\n    });\n  }, []);\n\n  // Calculer le total des heures\n  const calculateTotalHours = useCallback(() => {\n    return formData\n      .reduce((total, day) => total + (parseFloat(day.hours) || 0), 0)\n      .toFixed(1);\n  }, [formData]);\n\n  // Gérer la sauvegarde du planning\n  const handleSave = useCallback(() => {\n    // Convertir le format pour la sauvegarde\n    const formattedSchedule = formData.map((day) => ({\n      hours: day.hours,\n      absence: day.absence,\n      note: day.note,\n      timeSlots: day.timeSlots,\n      type: day.type,\n    }));\n\n    const updatedScheduleData = {\n      employeeId: employee.id,\n      days: formattedSchedule,\n    };\n\n    onSave(updatedScheduleData);\n  }, [employee, onSave, formData]);\n\n  if (!employee || !weekDays || formData.length === 0) {\n    return null;\n  }\n\n  return (\n    <FormContainer>\n      <FormTitle>\n        <div>\n          Planning du {formatDate(weekStart)} au {formatDate(weekDays[6])}\n        </div>\n        <ButtonGroup>\n          <ActionButton variant=\"outline\" onClick={onCancel}>\n            <FaTimes /> Annuler\n          </ActionButton>\n          <ActionButton\n            variant=\"primary\"\n            onClick={handleSave}\n            disabled={isSubmitting}\n          >\n            <FaSave /> {isSubmitting ? \"Enregistrement...\" : \"Enregistrer\"}\n          </ActionButton>\n        </ButtonGroup>\n      </FormTitle>\n\n      <EmployeeInfo>\n        <EmployeeName>\n          {employee.first_name} {employee.last_name}\n        </EmployeeName>\n        <EmployeeDetails>\n          <div>Département: {employee.department || \"Non défini\"}</div>\n          <div>Heures contractuelles: {employee.contractHours}h</div>\n        </EmployeeDetails>\n      </EmployeeInfo>\n\n      <DaysGrid>\n        {weekDays.map((day, index) => (\n          <DayCard key={index} $isWeekend={isWeekend(index)}>\n            <DayHeader>\n              <DayName $isWeekend={isWeekend(index)}>\n                {formatDate(day, \"EEEE\")}\n              </DayName>\n              <DayDate>{formatDate(day, \"dd/MM\")}</DayDate>\n            </DayHeader>\n\n            <RadioGroup>\n              <RadioLabel>\n                <RadioInput\n                  type=\"radio\"\n                  name={`day-type-${index}`}\n                  checked={formData[index]?.type === \"work\"}\n                  onChange={() => handleTypeChange(index, \"work\")}\n                />\n                Travail\n              </RadioLabel>\n              <RadioLabel>\n                <RadioInput\n                  type=\"radio\"\n                  name={`day-type-${index}`}\n                  checked={formData[index]?.type === \"absence\"}\n                  onChange={() => handleTypeChange(index, \"absence\")}\n                />\n                Absence\n              </RadioLabel>\n            </RadioGroup>\n\n            {formData[index]?.type === \"work\" ? (\n              <TimeSlotContainer>\n                <InputLabel>\n                  Créneaux horaires ({formData[index]?.hours || \"0\"}h)\n                </InputLabel>\n\n                {formData[index]?.timeSlots?.map((slot, slotIndex) => (\n                  <TimeSlot key={slotIndex}>\n                    <TimeInput\n                      type=\"time\"\n                      value={slot.start}\n                      onChange={(e) =>\n                        updateTimeSlot(\n                          index,\n                          slotIndex,\n                          \"start\",\n                          e.target.value\n                        )\n                      }\n                    />\n                    <span>-</span>\n                    <TimeInput\n                      type=\"time\"\n                      value={slot.end}\n                      onChange={(e) =>\n                        updateTimeSlot(index, slotIndex, \"end\", e.target.value)\n                      }\n                    />\n                    <RemoveSlotButton\n                      variant=\"danger\"\n                      onClick={() => removeTimeSlot(index, slotIndex)}\n                    >\n                      ×\n                    </RemoveSlotButton>\n                  </TimeSlot>\n                ))}\n\n                <AddSlotButton\n                  variant=\"outline\"\n                  onClick={() => addTimeSlot(index)}\n                >\n                  + Ajouter un créneau\n                </AddSlotButton>\n              </TimeSlotContainer>\n            ) : (\n              <InputGroup>\n                <InputLabel>Motif d'absence</InputLabel>\n                <StyledFormInput\n                  type=\"text\"\n                  value={formData[index]?.absence || \"\"}\n                  onChange={(e) => handleAbsenceChange(index, e.target.value)}\n                  placeholder=\"Saisir le motif d'absence...\"\n                />\n              </InputGroup>\n            )}\n\n            <InputGroup>\n              <InputLabel>Note (optionnelle)</InputLabel>\n              <StyledFormInput\n                type=\"text\"\n                value={formData[index]?.note || \"\"}\n                onChange={(e) => handleNoteChange(index, e.target.value)}\n                placeholder=\"Ajouter une note...\"\n              />\n            </InputGroup>\n          </DayCard>\n        ))}\n      </DaysGrid>\n\n      <TotalHours>\n        <span>Total des heures:</span>\n        <span>{calculateTotalHours()}h</span>\n      </TotalHours>\n    </FormContainer>\n  );\n};\n\nEmployeeScheduleForm.propTypes = {\n  employee: PropTypes.object.isRequired,\n  weekStart: PropTypes.instanceOf(Date).isRequired,\n  scheduleData: PropTypes.array,\n  onSave: PropTypes.func.isRequired,\n  onCancel: PropTypes.func.isRequired,\n};\n\nexport default EmployeeScheduleForm;\n","import { useCallback, useState } from \"react\";\nimport { toast } from \"react-hot-toast\";\nimport { HourBalanceService } from \"../services/api\";\n\n/**\n * Hook personnalisé pour gérer le solde d'heures des employés\n */\nconst useHourBalance = () => {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  /**\n   * Récupère le solde d'heures d'un employé\n   * @param {number} employeeId - ID de l'employé\n   * @returns {Promise<Object>} - Solde d'heures de l'employé\n   */\n  const getEmployeeBalance = useCallback(async (employeeId) => {\n    setLoading(true);\n    setError(null);\n\n    try {\n      const result = await HourBalanceService.getByEmployee(employeeId);\n\n      if (!result.success) {\n        console.warn(\n          `Avertissement: Impossible de récupérer le solde d'heures pour l'employé ${employeeId}:`,\n          result.message\n        );\n        return 0; // Retourner 0 par défaut au lieu de lancer une erreur\n      }\n\n      return result.balance;\n    } catch (err) {\n      console.warn(\n        `Avertissement: Erreur lors de la récupération du solde d'heures pour l'employé ${employeeId}:`,\n        err\n      );\n      setError(\n        err.message || \"Erreur lors de la récupération du solde d'heures\"\n      );\n      // Ne pas afficher de toast d'erreur pour ne pas perturber l'utilisateur\n      return 0; // Retourner 0 par défaut\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  /**\n   * Met à jour le solde d'heures d'un employé\n   * @param {number} employeeId - ID de l'employé\n   * @param {Object} balanceData - Données du solde d'heures\n   * @returns {Promise<Object>} - Résultat de la mise à jour\n   */\n  const updateEmployeeBalance = useCallback(async (employeeId, balanceData) => {\n    setLoading(true);\n    setError(null);\n\n    try {\n      const result = await HourBalanceService.updateBalance(\n        employeeId,\n        balanceData\n      );\n\n      if (!result.success) {\n        throw new Error(\n          result.message || \"Erreur lors de la mise à jour du solde d'heures\"\n        );\n      }\n\n      toast.success(\"Solde d'heures mis à jour avec succès\");\n      return { success: true, balance: result.balance };\n    } catch (err) {\n      console.error(\n        `Erreur lors de la mise à jour du solde d'heures pour l'employé ${employeeId}:`,\n        err\n      );\n      setError(\n        err.message || \"Erreur lors de la mise à jour du solde d'heures\"\n      );\n      toast.error(\"Erreur lors de la mise à jour du solde d'heures\");\n      return { success: false, error: err.message };\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  return {\n    loading,\n    error,\n    getEmployeeBalance,\n    updateEmployeeBalance,\n  };\n};\n\nexport default useHourBalance;\n","/**\n * Utilitaires pour la gestion des plannings\n */\n\n/**\n * Format standard des données de planning\n *\n * Structure:\n * {\n *   employeeId: number,           // ID de l'employé\n *   days: [                       // Tableau de 7 jours (lundi à dimanche)\n *     {\n *       type: string,             // \"work\" ou \"absence\"\n *       hours: string,            // Nombre d'heures travaillées (format \"0.0\")\n *       absence: string,          // Type d'absence (congé, maladie, etc.)\n *       note: string,             // Note ou commentaire\n *       timeSlots: [              // Créneaux horaires\n *         {\n *           start: string,        // Heure de début (format \"HH:MM\")\n *           end: string,          // Heure de fin (format \"HH:MM\")\n *           break: string         // Durée de la pause en heures (optionnel)\n *         }\n *       ]\n *     }\n *   ]\n * }\n */\n\n/**\n * Convertit les anciennes données de planning au format standard\n * @param {Object} schedule - Données de planning à convertir\n * @returns {Object} - Données de planning au format standard\n */\nexport const standardizeScheduleData = (schedule) => {\n  if (!schedule) return null;\n\n  // Si le planning est déjà au format standard, le retourner tel quel\n  if (\n    schedule.days &&\n    Array.isArray(schedule.days) &&\n    schedule.days.length > 0 &&\n    schedule.days[0].type !== undefined\n  ) {\n    return schedule;\n  }\n\n  // Convertir au format standard\n  return {\n    employeeId: schedule.employeeId || schedule.employee_id,\n    days: Array.isArray(schedule.days)\n      ? schedule.days.map(convertDayToStandardFormat)\n      : Array(7)\n          .fill()\n          .map(() => createEmptyDay()),\n  };\n};\n\n/**\n * Convertit un jour de planning au format standard\n * @param {Object} day - Jour de planning à convertir\n * @returns {Object} - Jour de planning au format standard\n */\nexport const convertDayToStandardFormat = (day) => {\n  if (!day) return createEmptyDay();\n\n  // Si le jour est déjà au format standard, le retourner tel quel\n  if (day.type) {\n    return { ...day };\n  }\n\n  // Convertir au format standard\n  return {\n    type: day.absence ? \"absence\" : \"work\",\n    hours: day.hours || \"0\",\n    absence: day.absence || \"\",\n    note: day.note || \"\",\n    timeSlots:\n      day.timeSlots ||\n      (day.hours && parseFloat(day.hours) > 0\n        ? [{ start: \"09:00\", end: \"17:00\" }]\n        : []),\n  };\n};\n\n/**\n * Crée un jour de planning vide au format standard\n * @returns {Object} - Jour de planning vide\n */\nexport const createEmptyDay = () => ({\n  type: \"work\",\n  hours: \"0\",\n  absence: \"\",\n  note: \"\",\n  timeSlots: [],\n});\n\n/**\n * Calcule le total des heures pour un planning\n * @param {Object} schedule - Données de planning\n * @returns {number} - Total des heures\n */\nexport const calculateTotalHours = (schedule) => {\n  if (!schedule || !schedule.days) return 0;\n\n  return schedule.days.reduce((total, day) => {\n    return total + (parseFloat(day.hours) || 0);\n  }, 0);\n};\n\n/**\n * Vérifie si un employé est absent pour un jour donné\n * @param {Object} day - Jour de planning\n * @returns {boolean} - True si l'employé est absent\n */\nexport const isAbsent = (day) => {\n  return (\n    day && day.type === \"absence\" && day.absence && day.absence.trim() !== \"\"\n  );\n};\n\n/**\n * Prépare les données de planning pour l'envoi à l'API\n * @param {Object} schedule - Données de planning au format standard\n * @returns {Object} - Données formatées pour l'API\n */\nexport const prepareScheduleForApi = (schedule) => {\n  if (!schedule) return null;\n\n  const standardSchedule = standardizeScheduleData(schedule);\n\n  return {\n    employee_id: standardSchedule.employeeId,\n    schedule_data: JSON.stringify(standardSchedule.days),\n    total_hours: calculateTotalHours(standardSchedule).toFixed(1),\n  };\n};\n\n/**\n * Analyse les données de planning reçues de l'API\n * @param {Object} apiData - Données reçues de l'API\n * @returns {Object} - Données de planning au format standard\n */\nexport const parseScheduleFromApi = (apiData) => {\n  if (!apiData) return null;\n\n  let days;\n  try {\n    days =\n      typeof apiData.schedule_data === \"string\"\n        ? JSON.parse(apiData.schedule_data)\n        : apiData.schedule_data;\n  } catch (error) {\n    console.error(\"Erreur lors de l'analyse des données de planning:\", error);\n    days = Array(7)\n      .fill()\n      .map(() => createEmptyDay());\n  }\n\n  return {\n    employeeId: apiData.employee_id,\n    days: Array.isArray(days)\n      ? days.map(convertDayToStandardFormat)\n      : Array(7)\n          .fill()\n          .map(() => createEmptyDay()),\n  };\n};\n\nconst scheduleUtils = {\n  standardizeScheduleData,\n  convertDayToStandardFormat,\n  createEmptyDay,\n  calculateTotalHours,\n  isAbsent,\n  prepareScheduleForApi,\n  parseScheduleFromApi,\n};\n\nexport default scheduleUtils;\n","import DOMPurify from \"dompurify\";\nimport html2canvas from \"html2canvas\";\nimport { jsPDF } from \"jspdf\";\nimport PropTypes from \"prop-types\";\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { toast } from \"react-hot-toast\";\nimport {\n  FaEdit,\n  FaFilePdf,\n  FaSortAmountDown,\n  FaSortAmountUp,\n} from \"react-icons/fa\";\nimport styled, { useTheme } from \"styled-components\";\nimport Button from \"../../components/ui/Button\";\nimport useHourBalance from \"../../hooks/useHourBalance\";\nimport { formatDate, getDayName, getDaysOfWeek } from \"../../utils/dateUtils\";\nimport {\n  calculateTotalHours,\n  isAbsent as isEmployeeAbsent,\n  standardizeScheduleData,\n} from \"../../utils/scheduleUtils\";\n\n// Styles\nconst ScheduleGrid = styled.div`\n  display: grid;\n  grid-template-columns: 250px repeat(7, 1fr) 100px 80px 80px;\n  gap: 1px;\n  background-color: ${({ theme }) => theme.colors.border.light};\n  border-radius: 0.5rem;\n  overflow-x: auto;\n  width: 100%;\n  box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1),\n    0 2px 4px -1px rgba(0, 0, 0, 0.06);\n  position: relative;\n\n  &::after {\n    content: \"\";\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    pointer-events: none;\n    background-image: linear-gradient(\n        to right,\n        transparent,\n        transparent 99%,\n        ${({ theme }) => theme.colors.border.light} 99%,\n        ${({ theme }) => theme.colors.border.light} 100%\n      ),\n      linear-gradient(\n        to bottom,\n        transparent,\n        transparent 99%,\n        ${({ theme }) => theme.colors.border.light} 99%,\n        ${({ theme }) => theme.colors.border.light} 100%\n      );\n    background-size: 100% 100%;\n    background-position: 0 0;\n    background-repeat: repeat;\n    z-index: 1;\n  }\n\n  @media (max-width: 1200px) {\n    grid-template-columns: 220px repeat(7, 1fr) 100px 80px 80px;\n  }\n\n  @media (max-width: 992px) {\n    grid-template-columns: 180px repeat(7, minmax(80px, 1fr)) 100px 80px 80px;\n  }\n\n  @media (max-width: 768px) {\n    grid-template-columns: 150px repeat(7, minmax(70px, 1fr)) 100px 80px 80px;\n    font-size: 0.85rem;\n  }\n\n  @media (max-width: 576px) {\n    display: block;\n    overflow-x: visible;\n    background-color: transparent;\n    gap: 0;\n  }\n`;\n\nconst GridCell = styled.div`\n  padding: 0.75rem;\n  background-color: ${({ theme }) => theme.colors.background.primary};\n  color: ${({ theme }) => theme.colors.text.primary};\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  min-height: 50px;\n  transition: all 0.3s ease;\n  position: relative;\n  z-index: 2;\n\n  &:hover {\n    transform: translateZ(0);\n    box-shadow: 0 0 0 1px ${({ theme }) => theme.colors.primary.main}40;\n  }\n\n  @media (max-width: 576px) {\n    padding: 0.5rem;\n    min-height: auto;\n  }\n`;\n\nconst HeaderCell = styled(GridCell)`\n  font-weight: 600;\n  background-color: ${({ theme }) => theme.colors.background.secondary};\n  text-align: center;\n  position: sticky;\n  top: 0;\n  z-index: 10;\n  cursor: ${(props) => (props.sortable ? \"pointer\" : \"default\")};\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  gap: 5px;\n\n  &:hover {\n    background-color: ${(props) =>\n      props.sortable\n        ? ({ theme }) => theme.colors.background.tertiary\n        : \"inherit\"};\n  }\n\n  @media (max-width: 576px) {\n    display: none;\n  }\n`;\n\nconst EmployeeCell = styled(GridCell)`\n  justify-content: flex-start;\n  font-weight: 600;\n  position: sticky;\n  left: 0;\n  z-index: 3;\n  box-shadow: 2px 0 5px rgba(0, 0, 0, 0.05);\n  padding: 0.75rem 1rem;\n  min-width: 150px;\n  flex-direction: column;\n  align-items: flex-start;\n`;\n\nconst EmployeeName = styled.div`\n  font-weight: 700;\n  font-size: 1.05rem;\n  margin-bottom: 0.25rem;\n  color: ${({ theme }) => theme.colors.primary.main};\n  display: block;\n  width: 100%;\n  text-align: left;\n`;\n\nconst EmployeeActions = styled.div`\n  display: flex;\n  gap: 0.5rem;\n  margin-top: 0.5rem;\n  width: 100%;\n`;\n\nconst TotalCell = styled(GridCell)`\n  font-weight: 600;\n  background-color: ${({ theme }) => theme.colors.background.secondary};\n  position: sticky;\n  right: 160px;\n  z-index: 5;\n\n  @media (max-width: 576px) {\n    position: static;\n    border-bottom-left-radius: 0.5rem;\n    border-bottom-right-radius: 0.5rem;\n    margin-bottom: 1rem;\n  }\n`;\n\nconst DayCell = styled(GridCell)`\n  ${({ isWeekend, theme }) =>\n    isWeekend &&\n    `\n    background-color: ${theme.colors.background.tertiary};\n  `}\n\n  ${({ isAbsent }) =>\n    isAbsent &&\n    `\n    color: #ef4444;\n  `}\n  \n  flex-direction: column;\n  gap: 0.25rem;\n  font-size: 0.85rem;\n  text-align: center;\n\n  @media (max-width: 576px) {\n    display: grid;\n    grid-template-columns: 100px 1fr;\n    text-align: left;\n    border-radius: 0;\n    margin: 0;\n\n    &::before {\n      content: attr(data-day);\n      font-weight: 600;\n      color: ${({ theme }) => theme.colors.text.secondary};\n    }\n  }\n`;\n\nconst TimeSlot = styled.div`\n  font-size: 1rem;\n  font-weight: 600;\n  color: ${({ theme }) => theme.colors.text.primary};\n  white-space: nowrap;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nconst BreakInfo = styled.div`\n  font-size: 0.7rem;\n  color: ${({ theme }) => theme.colors.text.tertiary};\n  font-style: italic;\n`;\n\nconst HoursValue = styled.div`\n  font-size: 0.75rem;\n  color: ${({ theme }) => theme.colors.text.secondary};\n`;\n\nconst AbsenceValue = styled.div`\n  font-size: 1.1rem;\n  font-weight: 700;\n  color: #ef4444;\n`;\n\nconst NoteText = styled.div`\n  font-style: italic;\n  font-size: 0.75rem;\n  color: ${({ theme }) => theme.colors.text.secondary};\n  margin-top: 0.25rem;\n  max-width: 100%;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n`;\n\nconst ActionCell = styled(GridCell)`\n  position: sticky;\n  right: 0;\n  z-index: 5;\n  background-color: ${({ theme }) => theme.colors.background.secondary};\n  padding: 0.5rem;\n\n  @media (max-width: 576px) {\n    position: static;\n    padding: 0.5rem;\n  }\n`;\n\nconst ExportCell = styled(GridCell)`\n  position: sticky;\n  right: 80px;\n  z-index: 5;\n  background-color: ${({ theme }) => theme.colors.background.secondary};\n  padding: 0.5rem;\n\n  @media (max-width: 576px) {\n    position: static;\n    padding: 0.5rem;\n  }\n`;\n\nconst EmployeeRow = styled.div`\n  display: contents;\n\n  @media (max-width: 576px) {\n    display: flex;\n    flex-direction: column;\n    border-radius: 0.5rem;\n    overflow: hidden;\n    box-shadow: 0 2px 8px\n      ${({ theme }) =>\n        theme.mode === \"dark\" ? \"rgba(0, 0, 0, 0.3)\" : \"rgba(0, 0, 0, 0.1)\"};\n    margin-bottom: 1.5rem;\n  }\n`;\n\nconst QuickEditButton = styled.button`\n  position: absolute;\n  top: 0.25rem;\n  right: 0.25rem;\n  opacity: 0;\n  padding: 0.25rem;\n  font-size: 0.7rem;\n  background-color: ${({ theme }) => theme.colors.background.secondary};\n  color: ${({ theme }) => theme.colors.text.secondary};\n  border: 1px solid ${({ theme }) => theme.colors.border.main};\n\n  ${DayCell}:hover & {\n    opacity: 1;\n  }\n`;\n\nconst ActionButton = styled(Button)`\n  padding: 0.4rem 0.6rem;\n  font-size: 0.85rem;\n  display: flex;\n  align-items: center;\n  gap: 0.3rem;\n  transition: all 0.2s ease;\n\n  &:hover {\n    transform: translateY(-2px);\n  }\n\n  @media (max-width: 768px) {\n    padding: 0.3rem 0.5rem;\n    font-size: 0.8rem;\n  }\n`;\n\nconst WeeklyScheduleGrid = ({\n  employees,\n  weekStart,\n  scheduleData,\n  onChange,\n  readOnly,\n  onEditEmployee,\n  onGeneratePDF,\n}) => {\n  const theme = useTheme();\n  const { getEmployeeBalance } = useHourBalance();\n\n  // S'assurer que employees est un tableau\n  const employeesArray = Array.isArray(employees) ? employees : [];\n\n  // S'assurer que scheduleData est un tableau\n  const scheduleDataArray = useMemo(() => {\n    return Array.isArray(scheduleData) ? scheduleData : [];\n  }, [scheduleData]);\n\n  // S'assurer que weekStart est une date valide\n  const validWeekStart = useMemo(() => {\n    try {\n      const date = weekStart instanceof Date ? weekStart : new Date(weekStart);\n      return !isNaN(date.getTime()) ? date : new Date();\n    } catch (error) {\n      console.error(\"Date de début de semaine invalide:\", weekStart);\n      return new Date();\n    }\n  }, [weekStart]);\n\n  // État pour le tri\n  const [sortConfig, setSortConfig] = useState({\n    key: null,\n    direction: \"ascending\",\n  });\n\n  // Obtenir les jours de la semaine\n  const daysOfWeek = getDaysOfWeek(validWeekStart);\n\n  // Fonction pour trier les employés\n  const sortedEmployees = [...employeesArray].sort((a, b) => {\n    if (sortConfig.key === null) {\n      return 0;\n    }\n\n    let aValue, bValue;\n\n    if (sortConfig.key === \"name\") {\n      aValue = `${a.lastName} ${a.firstName}`.toLowerCase();\n      bValue = `${b.lastName} ${b.firstName}`.toLowerCase();\n    } else if (sortConfig.key === \"total\") {\n      aValue = parseFloat(calculateEmployeeTotal(a.id));\n      bValue = parseFloat(calculateEmployeeTotal(b.id));\n    } else {\n      aValue = a[sortConfig.key];\n      bValue = b[sortConfig.key];\n    }\n\n    if (aValue < bValue) {\n      return sortConfig.direction === \"ascending\" ? -1 : 1;\n    }\n    if (aValue > bValue) {\n      return sortConfig.direction === \"ascending\" ? 1 : -1;\n    }\n    return 0;\n  });\n\n  // Fonction pour changer le tri\n  const requestSort = useCallback(\n    (key) => {\n      let direction = \"ascending\";\n      if (sortConfig.key === key && sortConfig.direction === \"ascending\") {\n        direction = \"descending\";\n      }\n      setSortConfig({ key, direction });\n    },\n    [sortConfig]\n  );\n\n  // Obtenir l'icône de tri\n  const getSortIcon = useCallback(\n    (key) => {\n      if (sortConfig.key !== key) {\n        return null;\n      }\n      return sortConfig.direction === \"ascending\" ? (\n        <FaSortAmountUp size={12} />\n      ) : (\n        <FaSortAmountDown size={12} />\n      );\n    },\n    [sortConfig]\n  );\n\n  // Trouver le planning d'un employé\n  const findEmployeeSchedule = useCallback(\n    (employeeId) => {\n      const schedule = scheduleDataArray.find(\n        (schedule) => schedule.employeeId === employeeId\n      );\n\n      if (!schedule) {\n        return {\n          employeeId,\n          days: Array(7)\n            .fill()\n            .map(() => ({\n              type: \"work\",\n              hours: \"0\",\n              absence: \"\",\n              note: \"\",\n              timeSlots: [],\n            })),\n        };\n      }\n\n      // Standardiser les données\n      return standardizeScheduleData(schedule);\n    },\n    [scheduleDataArray]\n  );\n\n  // Gérer le clic sur le bouton d'édition\n  const handleEditClick = useCallback(\n    (employeeId) => {\n      if (onEditEmployee) {\n        onEditEmployee(employeeId);\n      }\n    },\n    [onEditEmployee]\n  );\n\n  // Vérifier si un jour est un weekend\n  const isWeekend = useCallback((dayIndex) => {\n    return dayIndex === 5 || dayIndex === 6; // Samedi ou Dimanche\n  }, []);\n\n  // Vérifier si un employé est absent pour un jour donné\n  const isAbsent = useCallback(\n    (employeeId, dayIndex) => {\n      const schedule = findEmployeeSchedule(employeeId);\n      const day = schedule.days[dayIndex];\n      return isEmployeeAbsent(day);\n    },\n    [findEmployeeSchedule]\n  );\n\n  // Formater l'affichage d'une cellule de jour\n  const formatDayCell = useCallback(\n    (employeeId, dayIndex) => {\n      const schedule = findEmployeeSchedule(employeeId);\n      const day = schedule.days[dayIndex];\n\n      if (!day) return null;\n\n      const hasTimeSlots = day.timeSlots && day.timeSlots.length > 0;\n\n      return (\n        <>\n          {day.type === \"absence\" &&\n          day.absence &&\n          day.absence.trim() !== \"\" ? (\n            <AbsenceValue>{day.absence}</AbsenceValue>\n          ) : hasTimeSlots ? (\n            day.timeSlots.map((slot, index) => (\n              <TimeSlot key={index}>\n                {slot.start} - {slot.end}\n                {slot.break && <BreakInfo>Pause: {slot.break}h</BreakInfo>}\n              </TimeSlot>\n            ))\n          ) : (\n            <TimeSlot>-</TimeSlot>\n          )}\n          <HoursValue>{day.hours || \"0\"}h</HoursValue>\n          {day.note && day.note.trim() !== \"\" && (\n            <NoteText title={day.note}>{day.note}</NoteText>\n          )}\n        </>\n      );\n    },\n    [findEmployeeSchedule]\n  );\n\n  // Calculer le total des heures pour un employé\n  const calculateEmployeeTotal = useCallback(\n    (employeeId) => {\n      const schedule = findEmployeeSchedule(employeeId);\n      return calculateTotalHours(schedule).toFixed(1);\n    },\n    [findEmployeeSchedule]\n  );\n\n  // Obtenir le compteur horaire d'un employé (heures contractuelles vs heures travaillées)\n  const getEmployeeHoursCounter = useCallback(\n    (employeeId) => {\n      try {\n        const employee = employees.find((emp) => emp.id === employeeId);\n        if (!employee) return \"N/A\";\n\n        // Vérifier si contractHours existe et est un nombre valide\n        const contractHours = employee.contractHours\n          ? parseFloat(employee.contractHours)\n          : null;\n        if (contractHours === null || isNaN(contractHours)) return \"N/A\";\n\n        // Calculer les heures travaillées\n        const workedHours = parseFloat(calculateEmployeeTotal(employeeId));\n        if (isNaN(workedHours)) return \"N/A\";\n\n        // Utiliser le solde d'heures de l'API si disponible\n        if (employee.hour_balance !== undefined) {\n          const balance = parseFloat(employee.hour_balance);\n          if (!isNaN(balance)) {\n            return balance === 0\n              ? \"0\"\n              : balance > 0\n              ? `+${balance.toFixed(1)}`\n              : balance.toFixed(1);\n          }\n        }\n\n        // Sinon, calculer la différence localement\n        const diff = workedHours - contractHours;\n\n        return diff === 0\n          ? \"0\"\n          : diff > 0\n          ? `+${diff.toFixed(1)}`\n          : diff.toFixed(1);\n      } catch (error) {\n        console.error(\"Erreur lors du calcul du solde d'heures:\", error);\n        return \"N/A\";\n      }\n    },\n    [employees, calculateEmployeeTotal]\n  );\n\n  // Charger le solde d'heures pour chaque employé\n  useEffect(() => {\n    const loadHourBalances = async () => {\n      try {\n        for (const employee of employees) {\n          if (employee && employee.id) {\n            try {\n              const balance = await getEmployeeBalance(employee.id);\n              if (balance !== null) {\n                // Mettre à jour l'employé avec le solde d'heures\n                employee.hour_balance = balance;\n              }\n            } catch (error) {\n              console.warn(\n                `Avertissement: Impossible de récupérer le solde d'heures pour l'employé ${employee.id}:`,\n                error\n              );\n              // Continuer avec les autres employés même si une erreur se produit\n            }\n          }\n        }\n      } catch (error) {\n        console.warn(\n          \"Avertissement lors du chargement des soldes d'heures:\",\n          error\n        );\n        // Ne pas afficher de toast d'erreur pour ne pas perturber l'utilisateur\n      }\n    };\n\n    loadHourBalances();\n  }, [employees, getEmployeeBalance]);\n\n  // Fonction pour générer un PDF du planning d'un employé\n  const generatePDF = (employee, days, weekStart) => {\n    // Vérifier si weekStart est valide\n    if (!weekStart || isNaN(new Date(weekStart).getTime())) {\n      console.error(\n        \"Date de début de semaine invalide pour le PDF:\",\n        weekStart\n      );\n      toast.error(\"Impossible de générer le PDF: date invalide\");\n      return;\n    }\n\n    // Créer un élément temporaire pour le rendu\n    const tempElement = document.createElement(\"div\");\n    tempElement.style.position = \"absolute\";\n    tempElement.style.left = \"-9999px\";\n    tempElement.style.top = \"-9999px\";\n    tempElement.style.width = \"1000px\"; // Plus large pour le format paysage\n\n    // Formater les dates\n    const weekStartDate = new Date(weekStart);\n    const weekEndDate = new Date(weekStart);\n    weekEndDate.setDate(weekEndDate.getDate() + 6);\n\n    const formattedWeekStart = formatDate(weekStartDate);\n    const formattedWeekEnd = formatDate(weekEndDate);\n\n    // Récupérer le prénom et le nom en tenant compte des différentes structures possibles\n    const firstName = employee.firstName || employee.first_name || \"Inconnu\";\n    const lastName = employee.lastName || employee.last_name || \"Inconnu\";\n\n    // Calculer le total des heures\n    const totalHours = days.reduce((sum, day) => {\n      return sum + (day.isAbsent ? 0 : parseFloat(day.hours || 0));\n    }, 0);\n\n    // Créer le contenu HTML\n    const content = `\n      <div style=\"font-family: Arial, sans-serif; padding: 20px; color: #333; text-align: center;\">\n        <h2 style=\"text-align: center; color: #2563eb;\">Planning Hebdomadaire</h2>\n        <h3 style=\"text-align: center; margin-bottom: 10px;\">Du ${formattedWeekStart} au ${formattedWeekEnd}</h3>\n        \n        <div style=\"margin-bottom: 20px; text-align: center;\">\n          <h2 style=\"margin-bottom: 5px; color: #2563eb; font-size: 24px; font-weight: bold;\">${firstName} ${lastName}</h2>\n          <p style=\"margin: 5px 0;\">Poste: ${employee.role || \"Inconnu\"}</p>\n          <p style=\"margin: 5px 0;\">Département: ${\n            employee.department || \"Inconnu\"\n          }</p>\n          <p style=\"margin: 5px 0;\">Heures contractuelles: ${\n            employee.contractHours || \"0\"\n          }h</p>\n          <p style=\"margin: 5px 0;\">Total heures planifiées: ${totalHours.toFixed(\n            1\n          )}h</p>\n        </div>\n        \n        <table style=\"width: 100%; border-collapse: collapse; margin: 0 auto; max-width: 900px;\">\n          <thead>\n            <tr style=\"background-color: #e5e7eb;\">\n              <th style=\"padding: 10px; border: 1px solid #d1d5db; text-align: left;\">Jour</th>\n              <th style=\"padding: 10px; border: 1px solid #d1d5db; text-align: left;\">Heures</th>\n              <th style=\"padding: 10px; border: 1px solid #d1d5db; text-align: left;\">Créneaux</th>\n              <th style=\"padding: 10px; border: 1px solid #d1d5db; text-align: left;\">Notes</th>\n            </tr>\n          </thead>\n          <tbody>\n            ${days\n              .map((day, index) => {\n                const dayDate = new Date(weekStart);\n                dayDate.setDate(dayDate.getDate() + index);\n                const isWeekendDay = isWeekend(dayDate);\n\n                return `\n              <tr style=\"background-color: ${\n                isWeekendDay ? \"#f9fafb\" : \"white\"\n              };\">\n                <td style=\"padding: 10px; border: 1px solid #d1d5db; font-weight: ${\n                  isWeekendDay ? \"bold\" : \"normal\"\n                };\">\n                  ${getDayName(dayDate)} ${formatDate(dayDate, \"dd/MM\")}\n                </td>\n                <td style=\"padding: 10px; border: 1px solid #d1d5db;\">\n                  ${\n                    day.isAbsent\n                      ? `<span style=\"color: #ef4444; font-weight: bold;\">${\n                          day.absenceReason || \"Absent\"\n                        }</span>`\n                      : `${day.hours}h`\n                  }\n                </td>\n                <td style=\"padding: 10px; border: 1px solid #d1d5db;\">\n                  ${\n                    day.isAbsent\n                      ? \"-\"\n                      : (day.timeSlots || [])\n                          .map((slot) => `${slot.start} - ${slot.end}`)\n                          .join(\"<br>\")\n                  }\n                </td>\n                <td style=\"padding: 10px; border: 1px solid #d1d5db; font-style: italic;\">\n                  ${day.notes ? DOMPurify.sanitize(day.notes) : \"\"}\n                </td>\n              </tr>\n              `;\n              })\n              .join(\"\")}\n          </tbody>\n        </table>\n      </div>\n    `;\n\n    // Ajouter le contenu à l'élément temporaire\n    tempElement.innerHTML = DOMPurify.sanitize(content);\n    document.body.appendChild(tempElement);\n\n    // Générer le PDF\n    html2canvas(tempElement, {\n      scale: 1,\n      useCORS: true,\n      logging: false,\n    }).then((canvas) => {\n      const imgData = canvas.toDataURL(\"image/png\");\n      const pdf = new jsPDF(\"l\", \"mm\", \"a4\"); // Format paysage\n      const pdfWidth = pdf.internal.pageSize.getWidth();\n      const pdfHeight = pdf.internal.pageSize.getHeight();\n      const ratio = canvas.width / canvas.height;\n      const imgWidth = pdfWidth;\n      const imgHeight = imgWidth / ratio;\n\n      pdf.addImage(imgData, \"PNG\", 0, 0, imgWidth, imgHeight);\n      pdf.save(`Planning_${firstName}_${lastName}_${formattedWeekStart}.pdf`);\n\n      // Nettoyer\n      document.body.removeChild(tempElement);\n    });\n  };\n\n  const handleGeneratePDF = (employee) => {\n    if (onGeneratePDF) {\n      onGeneratePDF(employee);\n      return;\n    }\n\n    // Vérifier si weekStart est une date valide\n    if (!validWeekStart) {\n      console.error(\"Date de début de semaine invalide\");\n      toast.error(\"Impossible de générer le PDF : date invalide\");\n      return;\n    }\n\n    const employeeSchedule = scheduleDataArray.find(\n      (schedule) => schedule.employeeId === employee.id\n    );\n\n    if (employeeSchedule) {\n      // Convertir les jours au format attendu par generatePDF\n      const formattedDays = employeeSchedule.days.map((day) => {\n        return {\n          isAbsent:\n            day.type === \"absence\" && day.absence && day.absence.trim() !== \"\",\n          absenceReason: day.absence || \"\",\n          hours: day.hours || \"0\",\n          timeSlots: day.timeSlots || [],\n          notes: day.note || \"\",\n        };\n      });\n\n      generatePDF(employee, formattedDays, validWeekStart);\n    } else {\n      // Créer un planning vide si aucun n'existe\n      const emptyDays = Array(7)\n        .fill()\n        .map(() => ({\n          isAbsent: false,\n          absenceReason: \"\",\n          hours: \"0\",\n          timeSlots: [],\n          notes: \"\",\n        }));\n      generatePDF(employee, emptyDays, validWeekStart);\n    }\n  };\n\n  // Fonction pour formater la cellule d'employé\n  const formatEmployeeCell = useCallback((employee) => {\n    console.log(\"Données de l'employé:\", employee);\n\n    // Récupérer le prénom et le nom en tenant compte des différentes structures possibles\n    const firstName = employee.firstName || employee.first_name || \"\";\n    const lastName = employee.lastName || employee.last_name || \"\";\n\n    // Vérifiez si les noms sont définis\n    if (!firstName || !lastName) {\n      console.error(\"Nom ou prénom manquant pour l'employé:\", employee);\n    }\n\n    return (\n      <EmployeeName>\n        {firstName} {lastName}\n      </EmployeeName>\n    );\n  }, []);\n\n  return (\n    <ScheduleGrid>\n      {/* En-tête avec les jours de la semaine */}\n      <HeaderCell sortable onClick={() => requestSort(\"name\")}>\n        Employé {getSortIcon(\"name\")}\n      </HeaderCell>\n      {daysOfWeek.map((day, index) => (\n        <HeaderCell key={index}>{formatDate(day, \"EEE dd/MM\")}</HeaderCell>\n      ))}\n      <HeaderCell sortable onClick={() => requestSort(\"total\")}>\n        Total {getSortIcon(\"total\")}\n      </HeaderCell>\n      <HeaderCell>Export</HeaderCell>\n      <HeaderCell>Actions</HeaderCell>\n\n      {/* Lignes pour chaque employé */}\n      {sortedEmployees.map((employee) => {\n        const schedule = scheduleDataArray.find(\n          (s) => s.employeeId === employee.id\n        );\n        return (\n          <EmployeeRow key={employee.id}>\n            <EmployeeCell>{formatEmployeeCell(employee)}</EmployeeCell>\n\n            {/* Cellules pour chaque jour */}\n            {Array(7)\n              .fill()\n              .map((_, dayIndex) => (\n                <DayCell\n                  key={dayIndex}\n                  isWeekend={isWeekend(dayIndex)}\n                  isAbsent={isAbsent(employee.id, dayIndex)}\n                  data-day={formatDate(daysOfWeek[dayIndex], \"EEEE\")}\n                  onClick={() => !readOnly && onEditEmployee(employee.id)}\n                >\n                  {formatDayCell(employee.id, dayIndex)}\n                  {!readOnly && (\n                    <QuickEditButton\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        onEditEmployee(employee.id);\n                      }}\n                    >\n                      <FaEdit />\n                    </QuickEditButton>\n                  )}\n                </DayCell>\n              ))}\n\n            {/* Cellule de total */}\n            <TotalCell>\n              {calculateEmployeeTotal(employee.id)}h\n              <br />\n              <small\n                style={{\n                  color: getEmployeeHoursCounter(employee.id).startsWith(\"+\")\n                    ? theme.colors.success.main\n                    : getEmployeeHoursCounter(employee.id).startsWith(\"-\")\n                    ? theme.colors.error.main\n                    : \"inherit\",\n                }}\n              >\n                {getEmployeeHoursCounter(employee.id)}\n              </small>\n            </TotalCell>\n\n            {/* Cellule d'export */}\n            <ExportCell>\n              <ActionButton\n                variant=\"secondary\"\n                onClick={() => handleGeneratePDF(employee)}\n              >\n                <FaFilePdf /> PDF\n              </ActionButton>\n            </ExportCell>\n\n            {/* Cellule d'action */}\n            <ActionCell>\n              <ActionButton\n                variant=\"primary\"\n                onClick={() => handleEditClick(employee.id)}\n              >\n                <FaEdit /> Modifier\n              </ActionButton>\n            </ActionCell>\n          </EmployeeRow>\n        );\n      })}\n    </ScheduleGrid>\n  );\n};\n\nWeeklyScheduleGrid.propTypes = {\n  employees: PropTypes.array,\n  weekStart: PropTypes.instanceOf(Date).isRequired,\n  scheduleData: PropTypes.array,\n  onChange: PropTypes.func,\n  readOnly: PropTypes.bool,\n  onEditEmployee: PropTypes.func,\n  onGeneratePDF: PropTypes.func,\n};\n\nWeeklyScheduleGrid.defaultProps = {\n  employees: [],\n  scheduleData: [],\n  onChange: () => {},\n  readOnly: false,\n  onEditEmployee: null,\n  onGeneratePDF: null,\n};\n\nexport default WeeklyScheduleGrid;\n","import PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\n\nconst HeaderContainer = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 2rem;\n  padding-bottom: 1rem;\n  border-bottom: 1px solid ${({ theme }) => theme.colors.border || \"#e0e0e0\"};\n`;\n\nconst Title = styled.h1`\n  font-size: 1.75rem;\n  font-weight: 600;\n  margin: 0;\n  color: ${({ theme }) => theme.colors.text?.primary || \"#333\"};\n`;\n\nconst Description = styled.p`\n  margin: 0.5rem 0 0 0;\n  color: ${({ theme }) => theme.colors.text?.secondary || \"#666\"};\n  font-size: 0.875rem;\n`;\n\nconst ActionsContainer = styled.div`\n  display: flex;\n  gap: 0.75rem;\n`;\n\n/**\n * Composant d'en-tête de page avec titre, description et actions\n */\nconst PageHeader = ({ title, description, actions, children }) => {\n  return (\n    <HeaderContainer>\n      <div>\n        <Title>{title}</Title>\n        {description && <Description>{description}</Description>}\n        {children}\n      </div>\n      {actions && <ActionsContainer>{actions}</ActionsContainer>}\n    </HeaderContainer>\n  );\n};\n\nPageHeader.propTypes = {\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string,\n  actions: PropTypes.node,\n  children: PropTypes.node,\n};\n\nexport default PageHeader;\n","import PropTypes from \"prop-types\";\nimport styled, { keyframes } from \"styled-components\";\n\n// Animation de rotation\nconst rotate = keyframes`\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n`;\n\n// Conteneur du spinner\nconst SpinnerContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: ${({ $center }) => ($center ? \"center\" : \"flex-start\")};\n  height: ${({ $center }) => ($center ? \"100%\" : \"auto\")};\n  width: 100%;\n  padding: 1rem;\n`;\n\n// Élément du spinner\nconst SpinnerElement = styled.div`\n  width: ${({ $size }) => {\n    switch ($size) {\n      case \"small\":\n        return \"1.5rem\";\n      case \"large\":\n        return \"3rem\";\n      default:\n        return \"2rem\";\n    }\n  }};\n  height: ${({ $size }) => {\n    switch ($size) {\n      case \"small\":\n        return \"1.5rem\";\n      case \"large\":\n        return \"3rem\";\n      default:\n        return \"2rem\";\n    }\n  }};\n  border: ${({ $size }) => {\n      switch ($size) {\n        case \"small\":\n          return \"2px\";\n        case \"large\":\n          return \"4px\";\n        default:\n          return \"3px\";\n      }\n    }}\n    solid rgba(0, 0, 0, 0.1);\n  border-top: ${({ $size, theme }) => {\n    const borderWidth =\n      $size === \"small\" ? \"2px\" : $size === \"large\" ? \"4px\" : \"3px\";\n    return `${borderWidth} solid ${theme.colors.primary.main}`;\n  }};\n  border-radius: 50%;\n  animation: ${rotate} 1s linear infinite;\n`;\n\n// Texte du spinner\nconst SpinnerText = styled.p`\n  margin-top: 0.5rem;\n  color: ${({ theme }) => theme.colors.text.secondary};\n  font-size: 0.875rem;\n`;\n\n/**\n * Composant Spinner pour indiquer un chargement\n */\nconst Spinner = ({ $center, $size, text }) => {\n  return (\n    <SpinnerContainer $center={$center}>\n      <SpinnerElement $size={$size} />\n      {text && <SpinnerText>{text}</SpinnerText>}\n    </SpinnerContainer>\n  );\n};\n\nSpinner.propTypes = {\n  $center: PropTypes.bool,\n  $size: PropTypes.oneOf([\"small\", \"medium\", \"large\"]),\n  text: PropTypes.string,\n};\n\nSpinner.defaultProps = {\n  $center: false,\n  $size: \"medium\",\n  text: \"\",\n};\n\nexport default Spinner;\n","import { useCallback, useEffect, useState } from \"react\";\nimport { toast } from \"react-hot-toast\";\nimport { WeeklyScheduleService } from \"../services/api\";\nimport {\n  parseScheduleFromApi,\n  prepareScheduleForApi,\n  standardizeScheduleData,\n} from \"../utils/scheduleUtils\";\nimport useWebSocket from \"./useWebSocket\";\n\n/**\n * Hook personnalisé pour gérer les plannings hebdomadaires\n */\nconst useWeeklySchedules = () => {\n  const [schedules, setSchedules] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Intégration WebSocket pour les mises à jour en temps réel\n  const { socket, isConnected, notifyDataChange } = useWebSocket();\n\n  // Écouter les mises à jour WebSocket\n  useEffect(() => {\n    if (socket && isConnected) {\n      // Fonction pour traiter les messages WebSocket\n      const handleWebSocketMessage = (event) => {\n        try {\n          const data = JSON.parse(event.data);\n\n          // Si le message concerne une mise à jour de planning\n          if (data.type === \"SCHEDULE_UPDATED\" && data.schedule) {\n            setSchedules((prevSchedules) => {\n              // Vérifier si le planning existe déjà\n              const exists = prevSchedules.some(\n                (schedule) => schedule.id === data.schedule.id\n              );\n\n              if (exists) {\n                // Mettre à jour le planning existant\n                return prevSchedules.map((schedule) =>\n                  schedule.id === data.schedule.id\n                    ? parseScheduleFromApi(data.schedule)\n                    : schedule\n                );\n              } else {\n                // Ajouter le nouveau planning\n                return [...prevSchedules, parseScheduleFromApi(data.schedule)];\n              }\n            });\n\n            toast.info(\"Planning mis à jour en temps réel\");\n          }\n\n          // Si le message concerne une suppression de planning\n          if (data.type === \"SCHEDULE_DELETED\" && data.scheduleId) {\n            setSchedules((prevSchedules) =>\n              prevSchedules.filter(\n                (schedule) => schedule.id !== data.scheduleId\n              )\n            );\n\n            toast.info(\"Planning supprimé en temps réel\");\n          }\n        } catch (error) {\n          console.error(\n            \"Erreur lors du traitement du message WebSocket:\",\n            error\n          );\n        }\n      };\n\n      // Ajouter l'écouteur d'événements\n      socket.addEventListener(\"message\", handleWebSocketMessage);\n\n      // Nettoyer l'écouteur lors du démontage\n      return () => {\n        socket.removeEventListener(\"message\", handleWebSocketMessage);\n      };\n    }\n  }, [socket, isConnected]);\n\n  /**\n   * Récupère tous les plannings pour une semaine donnée\n   * @param {string} weekStart - Date de début de semaine (format YYYY-MM-DD)\n   * @returns {Promise<Array>} - Liste des plannings\n   */\n  const fetchSchedules = useCallback(async (weekStart) => {\n    setLoading(true);\n    setError(null);\n\n    try {\n      console.log(`Récupération des plannings pour la semaine du ${weekStart}`);\n\n      const result = await WeeklyScheduleService.getByWeek(weekStart);\n\n      if (!result.success) {\n        throw new Error(\n          result.message || \"Erreur lors du chargement des horaires\"\n        );\n      }\n\n      // Standardiser les données\n      const standardizedSchedules = result.schedules.map((schedule) =>\n        parseScheduleFromApi(schedule)\n      );\n\n      console.log(\"Plannings récupérés:\", standardizedSchedules);\n      setSchedules(standardizedSchedules);\n      return standardizedSchedules;\n    } catch (err) {\n      console.error(\"Erreur lors du chargement des horaires:\", err);\n      setError(\n        \"Erreur lors du chargement des horaires: \" +\n          (err.message || \"Erreur inconnue\")\n      );\n      toast.error(\"Erreur lors du chargement des horaires\");\n      return [];\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  /**\n   * Crée un nouveau planning\n   * @param {Object} scheduleData - Données du planning\n   * @returns {Promise<Object>} - Résultat de la création\n   */\n  const createSchedule = useCallback(\n    async (scheduleData) => {\n      try {\n        // Standardiser et préparer les données pour l'API\n        const apiData = prepareScheduleForApi(\n          standardizeScheduleData(scheduleData)\n        );\n\n        console.log(\"Données envoyées à l'API:\", apiData);\n\n        const result = await WeeklyScheduleService.create(apiData);\n\n        if (!result.success) {\n          throw new Error(\n            result.message || \"Erreur lors de la création de l'horaire\"\n          );\n        }\n\n        // Ajouter le nouveau planning à la liste\n        const newSchedule = parseScheduleFromApi(result.schedule);\n        setSchedules((prev) => [...prev, newSchedule]);\n\n        // Notifier les autres clients via WebSocket\n        notifyDataChange(\"schedule\", \"create\", newSchedule.id);\n\n        toast.success(\"Planning créé avec succès\");\n        return { success: true, schedule: newSchedule };\n      } catch (error) {\n        console.error(\"Erreur lors de la création du planning:\", error);\n        toast.error(error.message || \"Erreur lors de la création du planning\");\n        return { success: false, error: error.message };\n      }\n    },\n    [notifyDataChange]\n  );\n\n  /**\n   * Met à jour un planning existant\n   * @param {number} id - ID du planning\n   * @param {Object} scheduleData - Données du planning\n   * @returns {Promise<Object>} - Résultat de la mise à jour\n   */\n  const updateSchedule = useCallback(\n    async (id, scheduleData) => {\n      try {\n        // Standardiser et préparer les données pour l'API\n        const apiData = prepareScheduleForApi(\n          standardizeScheduleData(scheduleData)\n        );\n\n        console.log(`Mise à jour du planning ${id}:`, apiData);\n\n        const result = await WeeklyScheduleService.update(id, apiData);\n\n        if (!result.success) {\n          throw new Error(\n            result.message || \"Erreur lors de la mise à jour de l'horaire\"\n          );\n        }\n\n        // Mettre à jour le planning dans la liste\n        const updatedSchedule = parseScheduleFromApi(result.schedule);\n        setSchedules((prev) =>\n          prev.map((schedule) =>\n            schedule.id === id ? updatedSchedule : schedule\n          )\n        );\n\n        // Notifier les autres clients via WebSocket\n        notifyDataChange(\"schedule\", \"update\", id);\n\n        toast.success(\"Planning mis à jour avec succès\");\n        return { success: true, schedule: updatedSchedule };\n      } catch (error) {\n        console.error(\"Erreur lors de la mise à jour du planning:\", error);\n        toast.error(\n          error.message || \"Erreur lors de la mise à jour du planning\"\n        );\n        return { success: false, error: error.message };\n      }\n    },\n    [notifyDataChange]\n  );\n\n  /**\n   * Supprime un planning\n   * @param {number} id - ID du planning\n   * @returns {Promise<Object>} - Résultat de la suppression\n   */\n  const deleteSchedule = useCallback(\n    async (id) => {\n      try {\n        console.log(`Suppression du planning ${id}`);\n\n        const result = await WeeklyScheduleService.delete(id);\n\n        if (!result.success) {\n          throw new Error(\n            result.message || \"Erreur lors de la suppression de l'horaire\"\n          );\n        }\n\n        // Supprimer le planning de la liste\n        setSchedules((prev) => prev.filter((schedule) => schedule.id !== id));\n\n        // Notifier les autres clients via WebSocket\n        notifyDataChange(\"schedule\", \"delete\", id);\n\n        toast.success(\"Planning supprimé avec succès\");\n        return { success: true };\n      } catch (error) {\n        console.error(\"Erreur lors de la suppression du planning:\", error);\n        toast.error(\n          error.message || \"Erreur lors de la suppression du planning\"\n        );\n        return { success: false, error: error.message };\n      }\n    },\n    [notifyDataChange]\n  );\n\n  return {\n    schedules,\n    loading,\n    error,\n    fetchSchedules,\n    createSchedule,\n    updateSchedule,\n    deleteSchedule,\n  };\n};\n\nexport default useWeeklySchedules;\n","import DOMPurify from \"dompurify\";\nimport html2canvas from \"html2canvas\";\nimport { jsPDF } from \"jspdf\";\nimport \"jspdf-autotable\";\nimport { useCallback, useEffect, useMemo, useRef, useState } from \"react\";\nimport { toast } from \"react-hot-toast\";\nimport {\n  FaArrowLeft,\n  FaArrowRight,\n  FaCalendarDay,\n  FaFilePdf,\n  FaUsers,\n} from \"react-icons/fa\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport thinkingAnimation from \"../assets/animations/thinking.json\";\nimport EmployeeScheduleForm from \"../components/schedule/EmployeeScheduleForm\";\nimport WeeklyScheduleGrid from \"../components/schedule/WeeklyScheduleGrid\";\nimport Button from \"../components/ui/Button\";\nimport Card, { CardContent, CardHeader } from \"../components/ui/Card\";\nimport { FormInput, FormSelect } from \"../components/ui/Form\";\nimport PageHeader from \"../components/ui/PageHeader\";\nimport Spinner from \"../components/ui/Spinner\";\nimport useEmployees from \"../hooks/useEmployees\";\nimport useWeeklySchedules from \"../hooks/useWeeklySchedules\";\nimport {\n  addWeeks,\n  formatDate,\n  formatDateForInput,\n  getDayName,\n  getDaysOfWeek,\n  getWeekEnd,\n  getWeekStart,\n  isWeekend,\n} from \"../utils/dateUtils\";\nimport { standardizeScheduleData } from \"../utils/scheduleUtils\";\n\n// Importer react-lottie avec require pour éviter les problèmes de compatibilité\nconst Lottie = require(\"react-lottie\").default;\n\n// Styles\nconst ScheduleContainer = styled.div`\n  padding: 1rem;\n  display: flex;\n  flex-direction: column;\n  gap: 1.5rem;\n\n  @media (min-width: 768px) {\n    padding: 2rem;\n    gap: 2rem;\n  }\n`;\n\nconst ScheduleHeader = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 1rem;\n  margin-bottom: 0.5rem;\n\n  @media (min-width: 768px) {\n    flex-direction: row;\n    justify-content: space-between;\n    align-items: center;\n    margin-bottom: 1rem;\n  }\n`;\n\nconst ScheduleFilters = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 0.75rem;\n  margin-bottom: 0.75rem;\n\n  @media (min-width: 768px) {\n    flex-direction: row;\n    gap: 1rem;\n    margin-bottom: 1rem;\n  }\n`;\n\nconst WeekNavigation = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 0.75rem;\n  margin-bottom: 0.75rem;\n\n  @media (min-width: 768px) {\n    flex-direction: row;\n    align-items: center;\n    gap: 1rem;\n    margin-bottom: 1rem;\n  }\n`;\n\nconst WeekActions = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 0.5rem;\n`;\n\nconst ActionButton = styled(Button)`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  gap: 0.5rem;\n  transition: all 0.2s ease;\n\n  &:hover {\n    transform: translateY(-2px);\n  }\n`;\n\nconst ExportAllButton = styled(ActionButton)`\n  margin-left: auto;\n\n  @media (max-width: 768px) {\n    margin-left: 0;\n    width: 100%;\n    margin-top: 0.5rem;\n  }\n`;\n\nconst FilterContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 0.5rem;\n  width: 100%;\n\n  @media (min-width: 768px) {\n    min-width: 200px;\n    width: auto;\n  }\n`;\n\n/* Composants styled non utilisés - commentés pour éviter les erreurs ESLint\nconst SummaryContainer = styled.div`\n  margin-top: 1rem;\n  padding: 1rem;\n  background-color: #f9fafb;\n  border-radius: 0.5rem;\n`;\n\nconst SummaryTitle = styled.h3`\n  font-size: 1rem;\n  margin-bottom: 0.5rem;\n`;\n\nconst SummaryItem = styled.div`\n  display: flex;\n  justify-content: space-between;\n  padding: 0.5rem 0;\n  border-bottom: 1px solid #e5e7eb;\n\n  &:last-child {\n    border-bottom: none;\n  }\n`;\n\nconst SummaryLabel = styled.span`\n  font-weight: 500;\n`;\n\nconst SummaryValue = styled.span`\n  font-weight: 600;\n  color: ${(props) => (props.isNegative ? \"#ef4444\" : \"#10b981\")};\n`;\n*/\n\nconst FilterSelect = styled(FormSelect)`\n  width: 100%;\n\n  @media (min-width: 768px) {\n    min-width: 200px;\n    width: auto;\n  }\n`;\n\n/* Composant styled non utilisé - commenté pour éviter les erreurs ESLint\nconst CurrentWeek = styled.div`\n  font-size: 1.1rem;\n  font-weight: 600;\n  text-align: center;\n  width: 100%;\n`;\n*/\n\nconst SearchContainer = styled.div`\n  margin-bottom: 1rem;\n  width: 100%;\n`;\n\nconst EmployeeSearchInput = styled(FormInput)`\n  width: 100%;\n`;\n\nconst NoResultsMessage = styled.div`\n  text-align: center;\n  padding: 2rem;\n  color: ${({ theme }) => theme.colors.text.secondary};\n  font-style: italic;\n`;\n\n/* Composant styled non utilisé - commenté pour éviter les erreurs ESLint\nconst ResponsiveButton = styled(Button)`\n  font-size: 0.85rem;\n  padding: 0.5rem 0.75rem;\n\n  @media (min-width: 768px) {\n    font-size: 1rem;\n    padding: 0.5rem 1rem;\n  }\n`;\n*/\n\nconst PlanningTitle = styled.h2`\n  font-size: 1.5rem;\n  font-weight: 700;\n  color: ${({ theme }) => theme.colors.text.primary};\n  margin: 0;\n`;\n\nconst HeaderLeft = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 1.5rem;\n`;\n\nconst AnimationContainer = styled.div`\n  width: 80px;\n  height: 80px;\n  flex-shrink: 0;\n`;\n\nconst TitleContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\nconst PageTitle = styled.h1`\n  font-size: 2rem;\n  color: ${({ theme }) => theme.colors.text.primary};\n  margin-bottom: 0.5rem;\n`;\n\nconst PageDescription = styled.p`\n  color: ${({ theme }) => theme.colors.text.secondary};\n  font-size: 1.1rem;\n`;\n\nconst TableFooter = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 1rem;\n  margin-top: 1.5rem;\n  padding-top: 1.5rem;\n  border-top: 1px solid ${({ theme }) => theme.colors.border.light};\n\n  @media (min-width: 768px) {\n    flex-direction: row;\n    justify-content: space-between;\n    align-items: center;\n  }\n`;\n\nconst FooterInfo = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 0.5rem;\n`;\n\nconst FooterInfoItem = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n  font-size: 0.9rem;\n  color: ${({ theme }) => theme.colors.text.secondary};\n`;\n\nconst FooterActions = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 0.5rem;\n`;\n\nconst ExportOptions = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 1rem;\n  padding: 1rem;\n  background-color: ${({ theme }) => theme.colors.background.secondary};\n  border-radius: 0.5rem;\n  margin-top: 1rem;\n`;\n\nconst ExportOptionsTitle = styled.h4`\n  font-size: 1rem;\n  font-weight: 600;\n  margin-bottom: 0.5rem;\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n`;\n\nconst ExportOptionsGrid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\n  gap: 1rem;\n`;\n\nconst ExportOptionCard = styled.div`\n  padding: 1rem;\n  background-color: ${({ theme }) => theme.colors.background.primary};\n  border-radius: 0.5rem;\n  border: 1px solid ${({ theme }) => theme.colors.border.main};\n  display: flex;\n  flex-direction: column;\n  gap: 0.5rem;\n  transition: all 0.2s ease;\n  cursor: pointer;\n\n  &:hover {\n    transform: translateY(-2px);\n    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1),\n      0 2px 4px -1px rgba(0, 0, 0, 0.06);\n  }\n`;\n\nconst ExportOptionTitle = styled.h5`\n  font-size: 0.9rem;\n  font-weight: 600;\n  margin: 0;\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n`;\n\nconst ExportOptionDescription = styled.p`\n  font-size: 0.8rem;\n  color: ${({ theme }) => theme.colors.text.secondary};\n  margin: 0;\n`;\n\n/**\n * Page de gestion des plannings hebdomadaires\n */\nconst WeeklySchedulePage = () => {\n  const navigate = useNavigate();\n  const { weekStart: weekStartParam } = useParams();\n\n  // Références pour éviter les boucles infinies\n  const prevScheduleDataRef = useRef(null);\n  const prevFormattedScheduleDataRef = useRef(null);\n\n  // États pour la gestion des plannings\n  const [currentWeekStart, setCurrentWeekStart] = useState(() => {\n    try {\n      // Essayer de créer une date à partir de weekStartParam\n      if (weekStartParam) {\n        const date = new Date(weekStartParam);\n        // Vérifier si la date est valide\n        if (!isNaN(date.getTime())) {\n          return date;\n        }\n      }\n      // Si weekStartParam est invalide ou non fourni, utiliser la date actuelle\n      return getWeekStart(new Date());\n    } catch (error) {\n      console.error(\n        \"Erreur lors de l'initialisation de currentWeekStart:\",\n        error\n      );\n      return getWeekStart(new Date());\n    }\n  });\n  const [scheduleData, setScheduleData] = useState([]);\n  const [editingEmployeeId, setEditingEmployeeId] = useState(null);\n  const [showCreateForm, setShowCreateForm] = useState(false);\n  const [selectedDepartment, setSelectedDepartment] = useState(\"\");\n  const [selectedRole, setSelectedRole] = useState(\"\");\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [showExportOptions, setShowExportOptions] = useState(false);\n\n  // Formater la date de début de semaine pour l'API\n  const formattedWeekStart = useMemo(\n    () => formatDateForInput(currentWeekStart),\n    [currentWeekStart]\n  );\n\n  // Récupérer les employés\n  const {\n    employees,\n    loading: employeesLoading,\n    // eslint-disable-next-line no-unused-vars\n    error: employeesError,\n    fetchEmployees,\n  } = useEmployees();\n\n  // Récupérer les plannings\n  const {\n    schedules,\n    loading: schedulesLoading,\n    error: schedulesError,\n    fetchSchedules,\n    createSchedule,\n    updateSchedule,\n  } = useWeeklySchedules();\n\n  // Formater les données de planning pour le composant WeeklyScheduleGrid\n  const formattedScheduleData = useMemo(() => {\n    if (!schedules || !Array.isArray(schedules)) {\n      console.warn(\"Données de plannings invalides:\", schedules);\n      return [];\n    }\n\n    // Log pour débogage\n    console.log(\"Données brutes des plannings:\", schedules);\n\n    // Standardiser les données de planning (incluant la conversion JSON si nécessaire)\n    // La fonction standardizeScheduleData s'assure que les données JSON sont correctement parsées\n    return schedules.map((schedule) => {\n      try {\n        const standardized = standardizeScheduleData(schedule);\n        console.log(\n          `Planning standardisé pour l'employé ${schedule.employee_id}:`,\n          standardized\n        );\n        return standardized;\n      } catch (error) {\n        console.error(\n          `Erreur lors de la standardisation du planning pour l'employé ${schedule.employee_id}:`,\n          error\n        );\n        // Retourner un planning vide en cas d'erreur\n        return {\n          employeeId: schedule.employee_id,\n          days: Array(7)\n            .fill()\n            .map(() => ({\n              type: \"work\",\n              hours: \"0\",\n              absence: \"\",\n              note: \"\",\n              timeSlots: [],\n            })),\n        };\n      }\n    });\n  }, [schedules]);\n\n  // Mettre à jour les données de planning lorsque les plannings changent\n  useEffect(() => {\n    // Vérifier si les données ont changé pour éviter les boucles infinies\n    const currentScheduleDataStr = JSON.stringify(scheduleData);\n    const currentFormattedScheduleDataStr = JSON.stringify(\n      formattedScheduleData\n    );\n\n    if (\n      prevFormattedScheduleDataRef.current !==\n        currentFormattedScheduleDataStr &&\n      prevScheduleDataRef.current !== currentScheduleDataStr\n    ) {\n      prevFormattedScheduleDataRef.current = currentFormattedScheduleDataStr;\n      prevScheduleDataRef.current = currentScheduleDataStr;\n\n      console.log(\n        \"Mise à jour des données de planning:\",\n        formattedScheduleData\n      );\n      setScheduleData(formattedScheduleData);\n    }\n  }, [formattedScheduleData, scheduleData]);\n\n  // Charger les plannings lorsque la semaine change\n  useEffect(() => {\n    console.log(\n      `Récupération des plannings pour la semaine du ${formattedWeekStart}`\n    );\n    fetchSchedules(formattedWeekStart)\n      .then((data) => {\n        console.log(\"Plannings récupérés avec succès:\", data);\n        // Mettre à jour l'état local avec les plannings récupérés\n        setScheduleData(data); // Assurez-vous que 'data' contient les plannings\n      })\n      .catch((error) => {\n        console.error(\"Erreur lors de la récupération des plannings:\", error);\n      });\n  }, [fetchSchedules, formattedWeekStart]);\n\n  // Gérer les erreurs de chargement des plannings\n  useEffect(() => {\n    if (schedulesError) {\n      console.error(\"Erreur de chargement des plannings:\", schedulesError);\n      toast.error(`Erreur lors du chargement des plannings: ${schedulesError}`);\n    }\n  }, [schedulesError]);\n\n  // Obtenir l'employé en cours d'édition\n  const editingEmployee = useMemo(() => {\n    if (!editingEmployeeId || !employees) return null;\n    return employees.find((emp) => emp.id === editingEmployeeId) || null;\n  }, [editingEmployeeId, employees]);\n\n  // Extraire les départements uniques\n  const uniqueDepartments = useMemo(() => {\n    if (!employees || !Array.isArray(employees)) return [];\n    const departments = [...new Set(employees.map((emp) => emp.department))];\n    return departments.filter((dept) => dept && dept.trim() !== \"\");\n  }, [employees]);\n\n  // Extraire les rôles uniques\n  const uniqueRoles = useMemo(() => {\n    if (!employees || !Array.isArray(employees)) return [];\n    const roles = [...new Set(employees.map((emp) => emp.role))];\n    return roles.filter((role) => role && role.trim() !== \"\");\n  }, [employees]);\n\n  // Mettre à jour l'URL lorsque la semaine change\n  useEffect(() => {\n    const formattedDate = formatDateForInput(currentWeekStart);\n    navigate(`/weekly-schedule/${formattedDate}`, { replace: true });\n  }, [currentWeekStart, navigate]);\n\n  // Filtrer les employés en fonction des critères\n  const filteredEmployees = useMemo(() => {\n    if (!employees) return [];\n\n    let filtered = Array.isArray(employees) ? [...employees] : [];\n\n    // Filtrer par département si sélectionné\n    if (selectedDepartment) {\n      filtered = filtered.filter(\n        (emp) => emp.department === selectedDepartment\n      );\n    }\n\n    // Filtrer par rôle si sélectionné\n    if (selectedRole) {\n      filtered = filtered.filter((emp) => emp.role === selectedRole);\n    }\n\n    // Filtrer par recherche si saisie\n    if (searchQuery) {\n      const query = searchQuery.toLowerCase();\n      filtered = filtered.filter(\n        (emp) =>\n          emp.firstName.toLowerCase().includes(query) ||\n          emp.lastName.toLowerCase().includes(query) ||\n          (emp.email && emp.email.toLowerCase().includes(query))\n      );\n    }\n\n    return filtered;\n  }, [employees, selectedDepartment, selectedRole, searchQuery]);\n\n  // Fonctions de navigation entre les semaines\n  const goToPreviousWeek = useCallback(() => {\n    setCurrentWeekStart((prev) => addWeeks(prev, -1));\n  }, []);\n\n  const goToNextWeek = useCallback(() => {\n    setCurrentWeekStart((prev) => addWeeks(prev, 1));\n  }, []);\n\n  const goToCurrentWeek = useCallback(() => {\n    setCurrentWeekStart(getWeekStart(new Date()));\n  }, []);\n\n  // Fonction pour gérer l'édition d'un employé\n  const handleEditEmployee = useCallback((employeeId) => {\n    setEditingEmployeeId(employeeId);\n  }, []);\n\n  // Fonction pour annuler l'édition\n  const handleCancelEdit = useCallback(() => {\n    setEditingEmployeeId(null);\n  }, []);\n\n  // Fonction pour gérer la recherche\n  const handleSearchChange = useCallback((e) => {\n    setSearchQuery(e.target.value);\n  }, []);\n\n  // Fonction pour gérer le changement de département\n  const handleDepartmentChange = useCallback((e) => {\n    setSelectedDepartment(e.target.value);\n  }, []);\n\n  // Fonction pour gérer le changement de rôle\n  const handleRoleChange = useCallback((e) => {\n    setSelectedRole(e.target.value);\n  }, []);\n\n  // Fonction pour gérer le changement de planning\n  const handleScheduleChange = useCallback(\n    async (updatedScheduleData) => {\n      try {\n        // Si les données mises à jour concernent un seul employé\n        if (updatedScheduleData.employeeId) {\n          // Vérifier si un planning existe déjà pour cet employé\n          const existingSchedule = scheduleData.find(\n            (s) => s.employeeId === updatedScheduleData.employeeId\n          );\n\n          let result;\n\n          if (existingSchedule && existingSchedule.id) {\n            // Mettre à jour le planning existant dans la base de données\n            console.log(\n              \"Mise à jour du planning existant:\",\n              existingSchedule.id\n            );\n            result = await updateSchedule(\n              existingSchedule.id,\n              updatedScheduleData\n            );\n          } else {\n            // Créer un nouveau planning dans la base de données\n            console.log(\"Création d'un nouveau planning\");\n            result = await createSchedule(updatedScheduleData);\n          }\n\n          if (result.success) {\n            // Mettre à jour l'état local\n            setScheduleData((prevData) => {\n              const existingIndex = prevData.findIndex(\n                (s) => s.employeeId === updatedScheduleData.employeeId\n              );\n\n              const newData = [...prevData];\n\n              if (existingIndex >= 0) {\n                // Mettre à jour le planning existant\n                newData[existingIndex] = {\n                  ...updatedScheduleData,\n                  id: result.schedule.id, // Ajouter l'ID retourné par l'API\n                };\n              } else {\n                // Ajouter un nouveau planning\n                newData.push({\n                  ...updatedScheduleData,\n                  id: result.schedule.id, // Ajouter l'ID retourné par l'API\n                });\n              }\n\n              return newData;\n            });\n\n            // Fermer le formulaire d'édition\n            setEditingEmployeeId(null);\n\n            // Afficher un message de succès\n            toast.success(\n              \"Planning enregistré avec succès dans la base de données\"\n            );\n          } else {\n            // Afficher un message d'erreur\n            toast.error(\n              result.error || \"Erreur lors de l'enregistrement du planning\"\n            );\n          }\n        } else {\n          // Si c'est un tableau complet de plannings, remplacer tout\n          setScheduleData(updatedScheduleData);\n        }\n      } catch (error) {\n        console.error(\"Erreur lors de l'enregistrement du planning:\", error);\n        toast.error(\"Erreur lors de l'enregistrement du planning\");\n      }\n    },\n    [scheduleData, updateSchedule, createSchedule]\n  );\n\n  // Fonction pour générer un PDF global de tous les employés\n  const generateAllEmployeesPDF = () => {\n    // Filtrer les employés actifs (non absents toute la semaine)\n    const activeEmployees = filteredEmployees.filter((employee) => {\n      const employeeSchedule = scheduleData.find(\n        (s) => s.employeeId === employee.id\n      );\n      if (!employeeSchedule) return true; // Inclure les employés sans planning\n\n      // Vérifier si l'employé est absent toute la semaine\n      const isAbsentAllWeek = employeeSchedule.days.every(\n        (day) =>\n          day.type === \"absence\" && day.absence && day.absence.trim() !== \"\"\n      );\n      return !isAbsentAllWeek;\n    });\n\n    if (activeEmployees.length === 0) {\n      toast.info(\"Aucun employé actif trouvé pour cette semaine\");\n      return;\n    }\n\n    // Créer un élément temporaire pour le rendu\n    const tempElement = document.createElement(\"div\");\n    tempElement.style.position = \"absolute\";\n    tempElement.style.left = \"-9999px\";\n    tempElement.style.top = \"-9999px\";\n    tempElement.style.width = \"1200px\"; // Plus large pour le format paysage\n\n    // Formater les dates\n    const weekStartDate = new Date(currentWeekStart);\n    const weekEndDate = new Date(currentWeekStart);\n    weekEndDate.setDate(weekEndDate.getDate() + 6);\n\n    const formattedWeekStart = formatDate(weekStartDate);\n    const formattedWeekEnd = formatDate(weekEndDate);\n\n    // Créer le contenu HTML\n    const content = `\n      <div style=\"font-family: Arial, sans-serif; padding: 20px; color: #333;\">\n        <h2 style=\"text-align: center; color: #2563eb;\">Planning Hebdomadaire Global</h2>\n        <h3 style=\"text-align: center; margin-bottom: 20px;\">Du ${formattedWeekStart} au ${formattedWeekEnd}</h3>\n        \n        <div style=\"margin-bottom: 20px;\">\n          <p style=\"margin: 5px 0;\">Département: ${\n            selectedDepartment || \"Tous\"\n          }</p>\n          <p style=\"margin: 5px 0;\">Nombre d'employés: ${\n            activeEmployees.length\n          }</p>\n        </div>\n        \n        <table style=\"width: 100%; border-collapse: collapse; margin-top: 20px;\">\n          <thead>\n            <tr style=\"background-color: #e5e7eb;\">\n              <th style=\"padding: 10px; border: 1px solid #d1d5db; text-align: left;\">Employé</th>\n              ${getDaysOfWeek(currentWeekStart)\n                .map(\n                  (day) => `\n                <th style=\"padding: 10px; border: 1px solid #d1d5db; text-align: center; ${\n                  isWeekend(day) ? \"background-color: #f3f4f6;\" : \"\"\n                }\">\n                  ${getDayName(day, true)} ${formatDate(day, \"dd/MM\")}\n                </th>\n              `\n                )\n                .join(\"\")}\n              <th style=\"padding: 10px; border: 1px solid #d1d5db; text-align: center; background-color: #e5e7eb;\">Total</th>\n            </tr>\n          </thead>\n          <tbody>\n            ${activeEmployees\n              .map((employee) => {\n                const employeeSchedule = scheduleData.find(\n                  (s) => s.employeeId === employee.id\n                );\n                const totalHours = employeeSchedule\n                  ? employeeSchedule.days.reduce(\n                      (sum, day) =>\n                        sum +\n                        (day.type === \"absence\"\n                          ? 0\n                          : parseFloat(day.hours || 0)),\n                      0\n                    )\n                  : 0;\n\n                return `\n                <tr>\n                  <td style=\"padding: 10px; border: 1px solid #d1d5db; text-align: left;\">\n                    <strong>${\n                      employee.firstName || employee.first_name || \"Inconnu\"\n                    } ${\n                  employee.lastName || employee.last_name || \"Inconnu\"\n                }</strong><br>\n                    <small>${employee.role || \"Inconnu\"}</small>\n                  </td>\n                  ${getDaysOfWeek(currentWeekStart)\n                    .map((dayDate, index) => {\n                      const isWeekendDay = isWeekend(dayDate);\n\n                      // Récupérer les données du jour pour cet employé\n                      const dayData = employeeSchedule\n                        ? employeeSchedule.days[index]\n                        : null;\n\n                      // Déterminer le contenu de la cellule\n                      let cellContent = \"-\";\n                      if (dayData) {\n                        if (\n                          dayData.type === \"absence\" &&\n                          dayData.absence &&\n                          dayData.absence.trim() !== \"\"\n                        ) {\n                          cellContent = `<span style=\"color: #ef4444;\">${\n                            dayData.absence || \"Absent\"\n                          }</span>`;\n                        } else if (\n                          dayData.timeSlots &&\n                          dayData.timeSlots.length > 0\n                        ) {\n                          cellContent = dayData.timeSlots\n                            .map((slot) => `${slot.start}-${slot.end}`)\n                            .join(\"<br>\");\n\n                          // Ajouter les heures si disponibles\n                          if (dayData.hours) {\n                            cellContent += `<br><small>${dayData.hours}h</small>`;\n                          }\n                        } else if (dayData.hours) {\n                          cellContent = `${dayData.hours}h`;\n                        }\n                      }\n\n                      return `\n                      <td style=\"padding: 8px; border: 1px solid #d1d5db; text-align: center; ${\n                        isWeekendDay ? \"background-color: #f9fafb;\" : \"\"\n                      }\">\n                        ${cellContent}\n                      </td>\n                    `;\n                    })\n                    .join(\"\")}\n                  <td style=\"padding: 10px; border: 1px solid #d1d5db; text-align: center; font-weight: bold;\">\n                    ${totalHours.toFixed(1)}h\n                  </td>\n                </tr>\n              `;\n              })\n              .join(\"\")}\n          </tbody>\n        </table>\n      </div>\n    `;\n\n    // Ajouter le contenu à l'élément temporaire\n    tempElement.innerHTML = DOMPurify.sanitize(content);\n    document.body.appendChild(tempElement);\n\n    // Générer le PDF\n    html2canvas(tempElement, {\n      scale: 1,\n      useCORS: true,\n      logging: false,\n    }).then((canvas) => {\n      const imgData = canvas.toDataURL(\"image/png\");\n      const pdf = new jsPDF(\"l\", \"mm\", \"a4\"); // Format paysage\n      const pdfWidth = pdf.internal.pageSize.getWidth();\n      const ratio = canvas.width / canvas.height;\n      const imgWidth = pdfWidth;\n      const imgHeight = imgWidth / ratio;\n\n      pdf.addImage(imgData, \"PNG\", 0, 0, imgWidth, imgHeight);\n      pdf.save(\n        `Planning_Global_${formatDate(currentWeekStart, \"yyyy-MM-dd\")}.pdf`\n      );\n\n      // Nettoyer\n      document.body.removeChild(tempElement);\n    });\n  };\n\n  // Fonction pour générer un PDF par département\n  const generateDepartmentPDF = (department) => {\n    // Filtrer les employés du département\n    const departmentEmployees = filteredEmployees.filter(\n      (emp) => emp.department === department\n    );\n\n    if (departmentEmployees.length === 0) {\n      toast.info(`Aucun employé trouvé dans le département ${department}`);\n      return;\n    }\n\n    // Créer un élément temporaire pour le rendu\n    const tempElement = document.createElement(\"div\");\n    tempElement.style.position = \"absolute\";\n    tempElement.style.left = \"-9999px\";\n    tempElement.style.top = \"-9999px\";\n    tempElement.style.width = \"1200px\"; // Plus large pour le format paysage\n\n    // Formater les dates\n    const weekStartDate = new Date(currentWeekStart);\n    const weekEndDate = new Date(currentWeekStart);\n    weekEndDate.setDate(weekEndDate.getDate() + 6);\n\n    const formattedWeekStart = formatDate(weekStartDate);\n    const formattedWeekEnd = formatDate(weekEndDate);\n\n    // Créer le contenu HTML\n    const content = `\n      <div style=\"font-family: Arial, sans-serif; padding: 20px; color: #333;\">\n        <h2 style=\"text-align: center; color: #2563eb;\">Planning Hebdomadaire - ${department}</h2>\n        <h3 style=\"text-align: center; margin-bottom: 20px;\">Du ${formattedWeekStart} au ${formattedWeekEnd}</h3>\n        \n        <div style=\"margin-bottom: 20px;\">\n          <p style=\"margin: 5px 0;\">Département: ${department}</p>\n          <p style=\"margin: 5px 0;\">Nombre d'employés: ${\n            departmentEmployees.length\n          }</p>\n        </div>\n        \n        <table style=\"width: 100%; border-collapse: collapse; margin-top: 20px;\">\n          <thead>\n            <tr style=\"background-color: #e5e7eb;\">\n              <th style=\"padding: 10px; border: 1px solid #d1d5db; text-align: left;\">Employé</th>\n              ${getDaysOfWeek(currentWeekStart)\n                .map(\n                  (day) => `\n                <th style=\"padding: 10px; border: 1px solid #d1d5db; text-align: center; ${\n                  isWeekend(day) ? \"background-color: #f3f4f6;\" : \"\"\n                }\">\n                  ${getDayName(day, true)} ${formatDate(day, \"dd/MM\")}\n                </th>\n              `\n                )\n                .join(\"\")}\n              <th style=\"padding: 10px; border: 1px solid #d1d5db; text-align: center; background-color: #e5e7eb;\">Total</th>\n            </tr>\n          </thead>\n          <tbody>\n            ${departmentEmployees\n              .map((employee) => {\n                const employeeSchedule = scheduleData.find(\n                  (s) => s.employeeId === employee.id\n                );\n                const days = employeeSchedule\n                  ? employeeSchedule.days.map((day) => ({\n                      isAbsent:\n                        day.type === \"absence\" &&\n                        day.absence &&\n                        day.absence.trim() !== \"\",\n                      absenceReason: day.absence || \"\",\n                      hours: day.hours || \"0\",\n                      timeSlots: day.timeSlots || [],\n                      notes: day.note || \"\",\n                    }))\n                  : Array(7)\n                      .fill()\n                      .map(() => ({\n                        isAbsent: false,\n                        absenceReason: \"\",\n                        hours: \"0\",\n                        timeSlots: [],\n                        notes: \"\",\n                      }));\n\n                // Calculer le total des heures\n                const totalHours = days.reduce((sum, day) => {\n                  return sum + (day.isAbsent ? 0 : parseFloat(day.hours || 0));\n                }, 0);\n\n                // Déterminer la couleur du total (rouge si < heures contractuelles, vert si >=)\n                const totalColor =\n                  totalHours < employee.contractHours ? \"#ef4444\" : \"#10b981\";\n\n                return `\n                <tr>\n                  <td style=\"padding: 10px; border: 1px solid #d1d5db; font-weight: bold;\">\n                    ${employee.firstName || employee.first_name || \"Inconnu\"} ${\n                  employee.lastName || employee.last_name || \"Inconnu\"\n                }<br>\n                    <span style=\"font-weight: normal; font-size: 0.9em;\">${\n                      employee.role\n                    }</span>\n                  </td>\n                  ${days\n                    .map((day, index) => {\n                      const dayDate = new Date(currentWeekStart);\n                      dayDate.setDate(dayDate.getDate() + index);\n                      const isWeekendDay = isWeekend(dayDate);\n\n                      return `\n                      <td style=\"padding: 8px; border: 1px solid #d1d5db; text-align: center; ${\n                        isWeekendDay ? \"background-color: #f9fafb;\" : \"\"\n                      }\">\n                        ${\n                          day.isAbsent\n                            ? `<span style=\"color: #ef4444; font-weight: bold;\">${\n                                day.absenceReason || \"Absent\"\n                              }</span>`\n                            : `\n                            <div style=\"font-weight: bold; font-size: 1.2em;\">${(\n                              day.timeSlots || []\n                            )\n                              .map((slot) => `${slot.start}-${slot.end}`)\n                              .join(\"<br>\")}</div>\n                            <div style=\"font-size: 0.8em; margin-top: 3px;\">${\n                              day.hours\n                            }h</div>\n                            ${\n                              day.notes\n                                ? `<div style=\"font-style: italic; font-size: 0.8em; color: #6b7280;\">${DOMPurify.sanitize(\n                                    day.notes\n                                  )}</div>`\n                                : \"\"\n                            }\n                          `\n                        }\n                      </td>\n                    `;\n                    })\n                    .join(\"\")}\n                  <td style=\"padding: 10px; border: 1px solid #d1d5db; text-align: center; font-weight: bold; color: ${totalColor};\">\n                    ${totalHours.toFixed(1)}h<br>\n                    <span style=\"font-size: 0.8em; font-weight: normal;\">(${\n                      employee.contractHours\n                    }h)</span>\n                  </td>\n                </tr>\n              `;\n              })\n              .join(\"\")}\n          </tbody>\n        </table>\n      </div>\n    `;\n\n    // Ajouter le contenu à l'élément temporaire\n    tempElement.innerHTML = DOMPurify.sanitize(content);\n    document.body.appendChild(tempElement);\n\n    // Générer le PDF\n    html2canvas(tempElement, {\n      scale: 1,\n      useCORS: true,\n      logging: false,\n    }).then((canvas) => {\n      const imgData = canvas.toDataURL(\"image/png\");\n      const pdf = new jsPDF(\"l\", \"mm\", \"a4\"); // Format paysage\n      const pdfWidth = pdf.internal.pageSize.getWidth();\n      const ratio = canvas.width / canvas.height;\n      const imgWidth = pdfWidth;\n      const imgHeight = imgWidth / ratio;\n\n      pdf.addImage(imgData, \"PNG\", 0, 0, imgWidth, imgHeight);\n      pdf.save(\n        `Planning_${department}_${formatDate(\n          currentWeekStart,\n          \"yyyy-MM-dd\"\n        )}.pdf`\n      );\n\n      // Nettoyer\n      document.body.removeChild(tempElement);\n\n      toast.success(\n        `Planning du département ${department} exporté avec succès`\n      );\n    });\n  };\n\n  // Fonction pour générer un PDF pour un employé spécifique\n  const generateEmployeePDF = (employee) => {\n    if (!employee) {\n      toast.error(\"Employé non trouvé\");\n      return;\n    }\n\n    // Trouver le planning de l'employé\n    const employeeSchedule = scheduleData.find(\n      (s) => s.employeeId === employee.id\n    );\n\n    if (!employeeSchedule) {\n      toast.info(\n        `Aucun planning trouvé pour ${\n          employee.firstName || employee.first_name || \"Inconnu\"\n        } ${employee.lastName || employee.last_name || \"Inconnu\"}`\n      );\n      return;\n    }\n\n    // Convertir les jours au format attendu\n    const formattedDays = employeeSchedule.days.map((day) => {\n      return {\n        isAbsent:\n          day.type === \"absence\" && day.absence && day.absence.trim() !== \"\",\n        absenceReason: day.absence || \"\",\n        hours: day.hours || \"0\",\n        timeSlots: day.timeSlots || [],\n        notes: day.note || \"\",\n      };\n    });\n\n    // Créer un élément temporaire pour le rendu\n    const tempElement = document.createElement(\"div\");\n    tempElement.style.position = \"absolute\";\n    tempElement.style.left = \"-9999px\";\n    tempElement.style.top = \"-9999px\";\n    tempElement.style.width = \"1000px\"; // Plus large pour le format paysage\n\n    // Formater les dates\n    const weekStartDate = new Date(currentWeekStart);\n    const weekEndDate = new Date(currentWeekStart);\n    weekEndDate.setDate(weekEndDate.getDate() + 6);\n\n    const formattedWeekStart = formatDate(weekStartDate);\n    const formattedWeekEnd = formatDate(weekEndDate);\n\n    // Calculer le total des heures\n    const totalHours = formattedDays.reduce((sum, day) => {\n      return sum + (day.isAbsent ? 0 : parseFloat(day.hours || 0));\n    }, 0);\n\n    // Créer le contenu HTML\n    const content = `\n      <div style=\"font-family: Arial, sans-serif; padding: 20px; color: #333; text-align: center;\">\n        <h2 style=\"text-align: center; color: #2563eb;\">Planning Hebdomadaire</h2>\n        <h3 style=\"text-align: center; margin-bottom: 10px;\">Du ${formattedWeekStart} au ${formattedWeekEnd}</h3>\n        \n        <div style=\"margin-bottom: 20px; text-align: center;\">\n          <h2 style=\"margin-bottom: 5px; color: #2563eb; font-size: 24px; font-weight: bold;\">${\n            employee.firstName || employee.first_name || \"Inconnu\"\n          } ${employee.lastName || employee.last_name || \"Inconnu\"}</h2>\n          <p style=\"margin: 5px 0;\">Poste: ${employee.role}</p>\n          <p style=\"margin: 5px 0;\">Département: ${employee.department}</p>\n          <p style=\"margin: 5px 0;\">Heures contractuelles: ${\n            employee.contractHours\n          }h</p>\n          <p style=\"margin: 5px 0;\">Total heures planifiées: ${totalHours.toFixed(\n            1\n          )}h</p>\n        </div>\n        \n        <table style=\"width: 100%; border-collapse: collapse; margin: 0 auto; max-width: 900px;\">\n          <thead>\n            <tr style=\"background-color: #e5e7eb;\">\n              <th style=\"padding: 10px; border: 1px solid #d1d5db; text-align: left;\">Jour</th>\n              <th style=\"padding: 10px; border: 1px solid #d1d5db; text-align: left;\">Heures</th>\n              <th style=\"padding: 10px; border: 1px solid #d1d5db; text-align: left;\">Créneaux</th>\n              <th style=\"padding: 10px; border: 1px solid #d1d5db; text-align: left;\">Notes</th>\n            </tr>\n          </thead>\n          <tbody>\n            ${formattedDays\n              .map((day, index) => {\n                const dayDate = new Date(currentWeekStart);\n                dayDate.setDate(dayDate.getDate() + index);\n                const isWeekendDay = isWeekend(dayDate);\n\n                return `\n                <tr style=\"background-color: ${\n                  isWeekendDay ? \"#f9fafb\" : \"white\"\n                };\">\n                  <td style=\"padding: 10px; border: 1px solid #d1d5db; font-weight: ${\n                    isWeekendDay ? \"bold\" : \"normal\"\n                  };\">\n                    ${getDayName(dayDate)} ${formatDate(dayDate, \"dd/MM\")}\n                  </td>\n                  <td style=\"padding: 10px; border: 1px solid #d1d5db;\">\n                    ${\n                      day.isAbsent\n                        ? `<span style=\"color: #ef4444; font-weight: bold;\">${\n                            day.absenceReason || \"Absent\"\n                          }</span>`\n                        : `${day.hours}h`\n                    }\n                  </td>\n                  <td style=\"padding: 10px; border: 1px solid #d1d5db;\">\n                    ${\n                      day.isAbsent\n                        ? \"-\"\n                        : (day.timeSlots || [])\n                            .map((slot) => `${slot.start} - ${slot.end}`)\n                            .join(\"<br>\")\n                    }\n                  </td>\n                  <td style=\"padding: 10px; border: 1px solid #d1d5db; font-style: italic;\">\n                    ${day.notes || \"-\"}\n                  </td>\n                </tr>\n              `;\n              })\n              .join(\"\")}\n          </tbody>\n        </table>\n      </div>\n    `;\n\n    // Ajouter le contenu à l'élément temporaire\n    tempElement.innerHTML = DOMPurify.sanitize(content);\n    document.body.appendChild(tempElement);\n\n    // Générer le PDF\n    html2canvas(tempElement, {\n      scale: 1,\n      useCORS: true,\n      logging: false,\n    }).then((canvas) => {\n      const imgData = canvas.toDataURL(\"image/png\");\n      const pdf = new jsPDF(\"l\", \"mm\", \"a4\"); // Format paysage\n      const pdfWidth = pdf.internal.pageSize.getWidth();\n      const ratio = canvas.width / canvas.height;\n      const imgWidth = pdfWidth;\n      const imgHeight = imgWidth / ratio;\n\n      pdf.addImage(imgData, \"PNG\", 0, 0, imgWidth, imgHeight);\n      pdf.save(\n        `Planning_${employee.firstName || employee.first_name || \"Inconnu\"}_${\n          employee.lastName || employee.last_name || \"Inconnu\"\n        }_${formatDate(currentWeekStart, \"yyyy-MM-dd\")}.pdf`\n      );\n\n      // Nettoyer\n      document.body.removeChild(tempElement);\n\n      toast.success(\n        `Planning de ${\n          employee.firstName || employee.first_name || \"Inconnu\"\n        } ${\n          employee.lastName || employee.last_name || \"Inconnu\"\n        } exporté avec succès`\n      );\n    });\n  };\n\n  // Ajouter la fonction de gestion de création\n  const handleCreateSchedule = async (formData) => {\n    try {\n      const result = await createSchedule(formData);\n      if (result.success) {\n        setShowCreateForm(false);\n        await fetchSchedules(formData.weekStart);\n        toast.success(\"Planning créé avec succès\");\n      } else {\n        toast.error(result.error || \"Erreur lors de la création du planning\");\n      }\n    } catch (error) {\n      console.error(\"Erreur lors de la création du planning:\", error);\n      toast.error(\"Erreur lors de la création du planning\");\n    }\n  };\n\n  // Afficher un spinner pendant le chargement\n  if (employeesLoading || schedulesLoading) {\n    return (\n      <Spinner $center={true} $size=\"large\" text=\"Chargement du planning...\" />\n    );\n  }\n\n  return (\n    <div>\n      <PageHeader title=\"Planning Hebdomadaire\" />\n\n      <ScheduleContainer>\n        <ScheduleHeader>\n          <HeaderLeft>\n            <AnimationContainer>\n              <Lottie\n                options={{\n                  loop: true,\n                  autoplay: true,\n                  animationData: thinkingAnimation,\n                  rendererSettings: {\n                    preserveAspectRatio: \"xMidYMid slice\",\n                  },\n                }}\n                height={80}\n                width={80}\n              />\n            </AnimationContainer>\n            <TitleContainer>\n              <PageTitle>Planning Hebdomadaire</PageTitle>\n              <PageDescription>\n                Gérez les horaires de travail de vos employés\n              </PageDescription>\n            </TitleContainer>\n          </HeaderLeft>\n          <div>\n            <WeekNavigation>\n              <div>\n                <h3>\n                  Semaine du {formatDate(currentWeekStart)} au{\" \"}\n                  {formatDate(getWeekEnd(currentWeekStart))}\n                </h3>\n              </div>\n              <WeekActions>\n                <ActionButton variant=\"outline\" onClick={goToPreviousWeek}>\n                  <FaArrowLeft /> Semaine précédente\n                </ActionButton>\n                <ActionButton variant=\"outline\" onClick={goToCurrentWeek}>\n                  <FaCalendarDay /> Semaine actuelle\n                </ActionButton>\n                <ActionButton variant=\"outline\" onClick={goToNextWeek}>\n                  Semaine suivante <FaArrowRight />\n                </ActionButton>\n                <ExportAllButton\n                  variant=\"secondary\"\n                  onClick={() => setShowExportOptions(!showExportOptions)}\n                >\n                  <FaFilePdf /> Options d'export\n                </ExportAllButton>\n              </WeekActions>\n            </WeekNavigation>\n          </div>\n        </ScheduleHeader>\n\n        {!editingEmployeeId && (\n          <>\n            <SearchContainer>\n              <EmployeeSearchInput\n                type=\"text\"\n                placeholder=\"Rechercher un employé par nom, prénom ou email...\"\n                value={searchQuery}\n                onChange={handleSearchChange}\n              />\n            </SearchContainer>\n\n            <ScheduleFilters>\n              <FilterContainer>\n                <FilterSelect\n                  value={selectedDepartment}\n                  onChange={handleDepartmentChange}\n                  placeholder=\"Tous les départements\"\n                >\n                  <option value=\"\">Tous les départements</option>\n                  {uniqueDepartments.map((dept) => (\n                    <option key={dept} value={dept}>\n                      {dept}\n                    </option>\n                  ))}\n                </FilterSelect>\n              </FilterContainer>\n\n              <FilterContainer>\n                <FilterSelect\n                  value={selectedRole}\n                  onChange={handleRoleChange}\n                  placeholder=\"Tous les rôles\"\n                >\n                  <option value=\"\">Tous les rôles</option>\n                  {uniqueRoles.map((role) => (\n                    <option key={role} value={role}>\n                      {role}\n                    </option>\n                  ))}\n                </FilterSelect>\n              </FilterContainer>\n            </ScheduleFilters>\n\n            {showExportOptions && (\n              <ExportOptions>\n                <ExportOptionsTitle>\n                  <FaFilePdf /> Options d'exportation PDF\n                </ExportOptionsTitle>\n                <ExportOptionsGrid>\n                  <ExportOptionCard onClick={generateAllEmployeesPDF}>\n                    <ExportOptionTitle>\n                      <FaUsers /> Planning global\n                    </ExportOptionTitle>\n                    <ExportOptionDescription>\n                      Exporter le planning de tous les employés affichés dans un\n                      seul document PDF\n                    </ExportOptionDescription>\n                  </ExportOptionCard>\n\n                  {uniqueDepartments.map((dept) => (\n                    <ExportOptionCard\n                      key={dept}\n                      onClick={() => generateDepartmentPDF(dept)}\n                    >\n                      <ExportOptionTitle>\n                        <FaUsers /> Département: {dept}\n                      </ExportOptionTitle>\n                      <ExportOptionDescription>\n                        Exporter uniquement le planning des employés du\n                        département {dept}\n                      </ExportOptionDescription>\n                    </ExportOptionCard>\n                  ))}\n                </ExportOptionsGrid>\n              </ExportOptions>\n            )}\n\n            <Card>\n              <CardHeader>\n                <PlanningTitle>\n                  {filteredEmployees.length > 1\n                    ? `Plannings hebdomadaires (${filteredEmployees.length})`\n                    : \"Planning hebdomadaire\"}\n                </PlanningTitle>\n              </CardHeader>\n              <CardContent>\n                {filteredEmployees.length === 0 ? (\n                  <NoResultsMessage>\n                    {searchQuery\n                      ? \"Aucun employé trouvé avec cette recherche.\"\n                      : \"Aucun employé trouvé avec les filtres sélectionnés.\"}\n                  </NoResultsMessage>\n                ) : (\n                  <>\n                    <WeeklyScheduleGrid\n                      employees={filteredEmployees}\n                      weekStart={currentWeekStart}\n                      scheduleData={scheduleData}\n                      onChange={handleScheduleChange}\n                      readOnly={false}\n                      onEditEmployee={handleEditEmployee}\n                      onGeneratePDF={generateEmployeePDF}\n                    />\n                  </>\n                )}\n              </CardContent>\n            </Card>\n          </>\n        )}\n\n        {editingEmployeeId && (\n          <Card>\n            <CardHeader>\n              <div className=\"flex justify-between items-center\">\n                <h2>Modifier le planning</h2>\n                <Button variant=\"secondary\" onClick={handleCancelEdit}>\n                  Annuler\n                </Button>\n              </div>\n            </CardHeader>\n            <CardContent>\n              {editingEmployee && (\n                <EmployeeScheduleForm\n                  employee={editingEmployee}\n                  weekStart={currentWeekStart}\n                  scheduleData={\n                    scheduleData.find(\n                      (s) => s.employeeId === editingEmployeeId\n                    ) || {\n                      employeeId: editingEmployeeId,\n                      days: Array(7)\n                        .fill()\n                        .map(() => ({\n                          type: \"work\",\n                          hours: \"0\",\n                          absence: \"\",\n                          note: \"\",\n                          timeSlots: [],\n                        })),\n                    }\n                  }\n                  onSave={handleScheduleChange}\n                  onCancel={handleCancelEdit}\n                />\n              )}\n            </CardContent>\n          </Card>\n        )}\n      </ScheduleContainer>\n    </div>\n  );\n};\n\nexport default WeeklySchedulePage;\n"],"names":["AuthService","login","async","email","password","console","log","response","apiRequest","API_ENDPOINTS","LOGIN","error","success","message","token","localStorage","setItem","JSON","stringify","id","role","first_name","last_name","user","register","REGISTER","userData","logout","removeItem","getCurrentUser","userStr","getItem","parse","WeeklyScheduleService","getAll","WEEKLY_SCHEDULES","schedules","getByWeek","weekStart","getByEmployee","EMPLOYEES","SCHEDULES","employeeId","getByEmployeeAndWeek","schedule","create","scheduleData","update","delete","HourBalanceService","HOUR_BALANCE","BY_EMPLOYEE","balance","hour_balance","Object","keys","length","values","warn","updateBalance","balanceData","fadeIn","keyframes","FormContainer","styled","div","_ref","theme","colors","background","primary","_ref2","text","_ref3","mode","FormTitle","h3","_ref4","EmployeeInfo","_ref5","border","EmployeeName","EmployeeDetails","_ref6","secondary","DaysGrid","DayCard","_ref7","$isWeekend","tertiary","_ref8","_ref9","_ref10","DayHeader","_ref11","DayName","_ref12","DayDate","_ref13","InputGroup","InputLabel","label","_ref14","ButtonGroup","ActionButton","Button","TotalHours","_ref15","TimeSlotContainer","TimeSlot","TimeInput","FormInput","_ref16","input","_ref17","_ref18","_ref19","main","_ref20","AddSlotButton","RemoveSlotButton","RadioGroup","RadioLabel","_ref21","RadioInput","_ref22","StyledFormInput","_ref23","_ref24","_ref25","_ref26","_ref27","_ref28","placeholder","calculateDayHours","timeSlots","totalHours","forEach","slot","start","end","startParts","split","map","Number","endParts","startDate","Date","setHours","endDate","setDate","getDate","hours","calculateHours","toFixed","_ref29","employee","onSave","onCancel","emptyDays","Array","fill","type","absence","note","initialScheduleData","useMemo","isArray","days","formData","setFormData","useState","isSubmitting","setIsSubmitting","errors","setErrors","weekDays","getDaysOfWeek","isWeekend","useCallback","dayIndex","handleTypeChange","prevFormData","newFormData","handleAbsenceChange","value","handleNoteChange","addTimeSlot","newTimeSlots","removeTimeSlot","slotIndex","splice","updateTimeSlot","field","calculateTotalHours","reduce","total","day","parseFloat","handleSave","formattedSchedule","updatedScheduleData","_jsxs","children","formatDate","variant","onClick","_jsx","FaTimes","disabled","FaSave","department","contractHours","index","_formData$index","_formData$index2","_formData$index3","_formData$index4","_formData$index5","_formData$index5$time","_formData$index6","_formData$index7","name","checked","onChange","e","target","useHourBalance","loading","setLoading","setError","getEmployeeBalance","result","err","updateEmployeeBalance","Error","toast","standardizeScheduleData","undefined","employee_id","convertDayToStandardFormat","createEmptyDay","isAbsent","trim","prepareScheduleForApi","standardSchedule","schedule_data","total_hours","parseScheduleFromApi","apiData","ScheduleGrid","light","GridCell","HeaderCell","props","sortable","EmployeeCell","TotalCell","DayCell","BreakInfo","HoursValue","AbsenceValue","NoteText","ActionCell","ExportCell","EmployeeRow","QuickEditButton","button","WeeklyScheduleGrid","employees","readOnly","onEditEmployee","onGeneratePDF","useTheme","employeesArray","scheduleDataArray","validWeekStart","date","isNaN","getTime","sortConfig","setSortConfig","key","direction","daysOfWeek","sortedEmployees","sort","a","b","aValue","bValue","lastName","firstName","toLowerCase","calculateEmployeeTotal","requestSort","getSortIcon","FaSortAmountUp","size","FaSortAmountDown","findEmployeeSchedule","find","handleEditClick","isEmployeeAbsent","formatDayCell","hasTimeSlots","_Fragment","break","title","getEmployeeHoursCounter","emp","workedHours","diff","useEffect","loadHourBalances","generatePDF","tempElement","document","createElement","style","position","left","top","width","weekStartDate","weekEndDate","formattedWeekStart","formattedWeekEnd","sum","content","dayDate","isWeekendDay","getDayName","absenceReason","join","notes","DOMPurify","sanitize","innerHTML","body","appendChild","html2canvas","scale","useCORS","logging","then","canvas","imgData","toDataURL","pdf","jsPDF","pdfWidth","internal","pageSize","getWidth","imgWidth","getHeight","imgHeight","height","addImage","save","removeChild","formatEmployeeCell","s","_","stopPropagation","FaEdit","color","startsWith","employeeSchedule","formattedDays","handleGeneratePDF","FaFilePdf","defaultProps","HeaderContainer","Title","h1","_theme$colors$text","Description","p","_theme$colors$text2","ActionsContainer","description","actions","rotate","SpinnerContainer","$center","SpinnerElement","$size","SpinnerText","Spinner","useWeeklySchedules","setSchedules","socket","isConnected","notifyDataChange","useWebSocket","handleWebSocketMessage","event","data","prevSchedules","some","info","scheduleId","filter","addEventListener","removeEventListener","fetchSchedules","standardizedSchedules","createSchedule","newSchedule","prev","updateSchedule","updatedSchedule","deleteSchedule","Lottie","require","ScheduleContainer","ScheduleHeader","ScheduleFilters","WeekNavigation","WeekActions","ExportAllButton","FilterContainer","FilterSelect","FormSelect","SearchContainer","EmployeeSearchInput","NoResultsMessage","PlanningTitle","h2","HeaderLeft","AnimationContainer","TitleContainer","PageTitle","PageDescription","ExportOptions","ExportOptionsTitle","h4","ExportOptionsGrid","ExportOptionCard","ExportOptionTitle","h5","ExportOptionDescription","WeeklySchedulePage","navigate","useNavigate","weekStartParam","useParams","prevScheduleDataRef","useRef","prevFormattedScheduleDataRef","currentWeekStart","setCurrentWeekStart","getWeekStart","setScheduleData","editingEmployeeId","setEditingEmployeeId","showCreateForm","setShowCreateForm","selectedDepartment","setSelectedDepartment","selectedRole","setSelectedRole","searchQuery","setSearchQuery","showExportOptions","setShowExportOptions","formatDateForInput","employeesLoading","employeesError","fetchEmployees","useEmployees","schedulesLoading","schedulesError","formattedScheduleData","standardized","currentScheduleDataStr","currentFormattedScheduleDataStr","current","catch","editingEmployee","uniqueDepartments","Set","dept","uniqueRoles","formattedDate","replace","filteredEmployees","filtered","query","includes","goToPreviousWeek","addWeeks","goToNextWeek","goToCurrentWeek","handleEditEmployee","handleCancelEdit","handleSearchChange","handleDepartmentChange","handleRoleChange","handleScheduleChange","existingSchedule","prevData","existingIndex","findIndex","newData","push","PageHeader","options","loop","autoplay","animationData","thinkingAnimation","rendererSettings","preserveAspectRatio","getWeekEnd","FaArrowLeft","FaCalendarDay","FaArrowRight","generateAllEmployeesPDF","activeEmployees","every","dayData","cellContent","FaUsers","departmentEmployees","totalColor","generateDepartmentPDF","Card","CardHeader","CardContent","className","EmployeeScheduleForm"],"sourceRoot":""}