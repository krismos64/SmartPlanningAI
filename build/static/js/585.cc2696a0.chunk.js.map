{"version":3,"file":"static/js/585.cc2696a0.chunk.js","mappings":"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","sources":["components/schedule/EmployeeScheduleForm.js","utils/scheduleUtils.js","hooks/useWeeklySchedules.js","components/schedule/WeeklyScheduleGrid.js","components/schedule/WeeklyScheduleForm.js","components/ui/PageHeader.js","components/ui/Spinner.js","pages/WeeklySchedule.js"],"sourcesContent":["import PropTypes from \"prop-types\";\nimport { useCallback, useState } from \"react\";\nimport { FaSave, FaTimes } from \"react-icons/fa\";\nimport styled, { keyframes } from \"styled-components\";\nimport {\n  calculateHours,\n  formatDate,\n  getDaysOfWeek,\n} from \"../../utils/dateUtils\";\nimport Button from \"../ui/Button\";\nimport { FormInput } from \"../ui/Form\";\n\n// Animations\nconst fadeIn = keyframes`\n  from {\n    opacity: 0;\n    transform: translateY(-10px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n`;\n\nconst FormContainer = styled.div`\n  background-color: ${({ theme }) => theme.colors.background.primary};\n  color: ${({ theme }) => theme.colors.text.primary};\n  border-radius: 8px;\n  box-shadow: 0 4px 12px\n    ${({ theme }) =>\n      theme.mode === \"dark\" ? \"rgba(0, 0, 0, 0.3)\" : \"rgba(0, 0, 0, 0.1)\"};\n  padding: 1.5rem;\n  margin: 1rem 0;\n  animation: ${fadeIn} 0.3s ease-out;\n  max-width: 100%;\n  overflow-x: auto;\n  transition: background-color 0.2s ease, color 0.2s ease;\n\n  @media (max-width: 768px) {\n    padding: 1rem;\n  }\n`;\n\nconst FormTitle = styled.h3`\n  font-size: 1.25rem;\n  font-weight: 600;\n  margin-bottom: 1.5rem;\n  color: ${({ theme }) => theme.colors.text.primary};\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n\n  @media (max-width: 576px) {\n    flex-direction: column;\n    align-items: flex-start;\n    gap: 0.5rem;\n  }\n`;\n\nconst EmployeeInfo = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 1.5rem;\n  padding-bottom: 1rem;\n  border-bottom: 1px solid ${({ theme }) => theme.colors.border};\n\n  @media (min-width: 768px) {\n    flex-direction: row;\n    align-items: center;\n    justify-content: space-between;\n  }\n`;\n\nconst EmployeeName = styled.div`\n  font-size: 1.1rem;\n  font-weight: 600;\n  margin-bottom: 0.5rem;\n\n  @media (min-width: 768px) {\n    margin-bottom: 0;\n  }\n`;\n\nconst EmployeeDetails = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 0.25rem;\n  font-size: 0.9rem;\n  color: ${({ theme }) => theme.colors.text.secondary};\n\n  @media (min-width: 768px) {\n    align-items: flex-end;\n  }\n`;\n\nconst DaysGrid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n  gap: 1rem;\n  margin-bottom: 1.5rem;\n`;\n\nconst DayCard = styled.div`\n  background-color: ${({ $isWeekend, theme }) =>\n    $isWeekend\n      ? theme.colors.background.tertiary\n      : theme.colors.background.secondary};\n  color: ${({ theme }) => theme.colors.text.primary};\n  border: 1px solid ${({ theme }) => theme.colors.border};\n  border-radius: 6px;\n  padding: 1rem;\n  transition: all 0.2s ease;\n\n  &:hover {\n    box-shadow: 0 2px 8px\n      ${({ theme }) =>\n        theme.mode === \"dark\" ? \"rgba(0, 0, 0, 0.3)\" : \"rgba(0, 0, 0, 0.05)\"};\n  }\n`;\n\nconst DayHeader = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 0.75rem;\n  padding-bottom: 0.5rem;\n  border-bottom: 1px solid ${({ theme }) => theme.colors.border};\n`;\n\nconst DayName = styled.div`\n  font-weight: 600;\n  color: ${({ $isWeekend, theme }) =>\n    $isWeekend ? theme.colors.text.secondary : theme.colors.text.primary};\n`;\n\nconst DayDate = styled.div`\n  font-size: 0.85rem;\n  color: ${({ theme }) => theme.colors.text.secondary};\n`;\n\nconst InputGroup = styled.div`\n  margin-bottom: 0.75rem;\n`;\n\nconst InputLabel = styled.label`\n  display: block;\n  font-size: 0.85rem;\n  font-weight: 500;\n  margin-bottom: 0.25rem;\n  color: ${({ theme }) => theme.colors.text.secondary};\n`;\n\nconst ButtonGroup = styled.div`\n  display: flex;\n  gap: 0.5rem;\n\n  @media (max-width: 576px) {\n    width: 100%;\n    justify-content: flex-end;\n  }\n`;\n\nconst ActionButton = styled(Button)`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  gap: 0.5rem;\n  transition: all 0.2s ease;\n\n  &:hover {\n    transform: translateY(-2px);\n  }\n`;\n\nconst TotalHours = styled.div`\n  font-size: 1rem;\n  font-weight: 600;\n  margin-top: 1rem;\n  padding-top: 1rem;\n  border-top: 1px solid ${({ theme }) => theme.colors.border};\n  display: flex;\n  justify-content: space-between;\n`;\n\nconst TimeSlotContainer = styled.div`\n  margin-bottom: 0.5rem;\n`;\n\nconst TimeSlot = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n  margin-bottom: 0.5rem;\n`;\n\nconst TimeInput = styled(FormInput)`\n  width: 100%;\n  max-width: 120px;\n  background-color: ${({ theme }) => theme.colors.background.input};\n  color: ${({ theme }) => theme.colors.text.primary};\n  border-color: ${({ theme }) => theme.colors.border};\n\n  &:focus {\n    border-color: ${({ theme }) => theme.colors.primary.main};\n    box-shadow: 0 0 0 2px\n      ${({ theme }) =>\n        theme.mode === \"dark\"\n          ? \"rgba(59, 130, 246, 0.3)\"\n          : \"rgba(59, 130, 246, 0.2)\"};\n  }\n`;\n\nconst AddSlotButton = styled(Button)`\n  padding: 0.25rem 0.5rem;\n  font-size: 0.8rem;\n  margin-top: 0.25rem;\n`;\n\nconst RemoveSlotButton = styled(Button)`\n  padding: 0.25rem;\n  font-size: 0.8rem;\n  min-width: auto;\n`;\n\nconst RadioGroup = styled.div`\n  display: flex;\n  gap: 1rem;\n  margin-bottom: 0.75rem;\n`;\n\nconst RadioLabel = styled.label`\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n  font-size: 0.9rem;\n  cursor: pointer;\n  color: ${({ theme }) => theme.colors.text.primary};\n`;\n\nconst RadioInput = styled.input`\n  cursor: pointer;\n  accent-color: ${({ theme }) => theme.colors.primary.main};\n`;\n\nconst StyledFormInput = styled(FormInput)`\n  background-color: ${({ theme }) => theme.colors.background.input};\n  color: ${({ theme }) => theme.colors.text.primary};\n  border-color: ${({ theme }) => theme.colors.border};\n\n  &:focus {\n    border-color: ${({ theme }) => theme.colors.primary.main};\n    box-shadow: 0 0 0 2px\n      ${({ theme }) =>\n        theme.mode === \"dark\"\n          ? \"rgba(59, 130, 246, 0.3)\"\n          : \"rgba(59, 130, 246, 0.2)\"};\n  }\n\n  &::placeholder {\n    color: ${({ theme }) => theme.colors.text.placeholder};\n  }\n`;\n\n// Fonction utilitaire pour convertir les données existantes au nouveau format\nconst convertToNewFormat = (day) => {\n  // Si le jour a déjà le format attendu, le retourner tel quel\n  if (day.type) {\n    return { ...day };\n  }\n\n  // Sinon, convertir au nouveau format\n  return {\n    type: day.absence ? \"absence\" : \"work\",\n    hours: day.hours || \"0\",\n    absence: day.absence || \"\",\n    note: day.note || \"\",\n    timeSlots:\n      day.timeSlots ||\n      (day.hours && parseFloat(day.hours) > 0\n        ? [{ start: \"09:00\", end: \"17:00\" }]\n        : []),\n  };\n};\n\n// Fonction utilitaire pour calculer les heures d'un créneau\nconst calculateDayHours = (timeSlots) => {\n  if (!timeSlots || timeSlots.length === 0) return \"0\";\n\n  let totalHours = 0;\n\n  timeSlots.forEach((slot) => {\n    if (slot.start && slot.end) {\n      const startParts = slot.start.split(\":\").map(Number);\n      const endParts = slot.end.split(\":\").map(Number);\n\n      if (startParts.length === 2 && endParts.length === 2) {\n        const startDate = new Date();\n        startDate.setHours(startParts[0], startParts[1], 0);\n\n        const endDate = new Date();\n        endDate.setHours(endParts[0], endParts[1], 0);\n\n        // Si l'heure de fin est avant l'heure de début, on considère que c'est le jour suivant\n        if (endDate < startDate) {\n          endDate.setDate(endDate.getDate() + 1);\n        }\n\n        const hours = calculateHours(startDate, endDate);\n        totalHours += hours;\n      }\n    }\n  });\n\n  return totalHours.toFixed(1);\n};\n\nconst EmployeeScheduleForm = ({\n  employee,\n  weekStart,\n  scheduleData,\n  onSave,\n  onCancel,\n  isSubmitting = false,\n}) => {\n  // Initialiser le planning avec une fonction d'initialisation\n  const [schedule, setSchedule] = useState(() => {\n    // Obtenir les jours de la semaine\n    const weekDays = getDaysOfWeek(weekStart);\n\n    // Si nous avons des données de planning pour cet employé, les utiliser\n    if (employee && Array.isArray(scheduleData)) {\n      const employeeSchedule = scheduleData.find(\n        (item) => item.employeeId === employee.id\n      );\n\n      if (employeeSchedule && employeeSchedule.days) {\n        // Convertir le format existant au nouveau format\n        return employeeSchedule.days.map((day) => convertToNewFormat(day));\n      }\n    }\n\n    // Sinon, créer un planning vide avec le nouveau format\n    return Array(7)\n      .fill()\n      .map(() => ({\n        type: \"work\",\n        absence: \"\",\n        note: \"\",\n        hours: \"0\",\n        timeSlots: [],\n      }));\n  });\n\n  const weekDays = getDaysOfWeek(weekStart);\n\n  // Vérifier si un jour est un weekend\n  const isWeekend = useCallback((dayIndex) => {\n    return dayIndex === 5 || dayIndex === 6; // Samedi ou Dimanche\n  }, []);\n\n  // Gérer le changement de type (travail ou absence)\n  const handleTypeChange = useCallback((dayIndex, type) => {\n    setSchedule((prevSchedule) => {\n      const newSchedule = [...prevSchedule];\n      newSchedule[dayIndex] = {\n        ...newSchedule[dayIndex],\n        type: type,\n        // Si on passe en mode absence, on vide les créneaux horaires\n        timeSlots: type === \"absence\" ? [] : newSchedule[dayIndex].timeSlots,\n        // Si on passe en mode travail, on vide le motif d'absence\n        absence: type === \"work\" ? \"\" : newSchedule[dayIndex].absence,\n        // Mettre à jour les heures\n        hours:\n          type === \"absence\"\n            ? \"0\"\n            : calculateDayHours(newSchedule[dayIndex].timeSlots),\n      };\n      return newSchedule;\n    });\n  }, []);\n\n  // Gérer le changement du motif d'absence\n  const handleAbsenceChange = useCallback((dayIndex, value) => {\n    setSchedule((prevSchedule) => {\n      const newSchedule = [...prevSchedule];\n      newSchedule[dayIndex] = {\n        ...newSchedule[dayIndex],\n        absence: value,\n      };\n      return newSchedule;\n    });\n  }, []);\n\n  // Gérer le changement de note\n  const handleNoteChange = useCallback((dayIndex, value) => {\n    setSchedule((prevSchedule) => {\n      const newSchedule = [...prevSchedule];\n      newSchedule[dayIndex] = {\n        ...newSchedule[dayIndex],\n        note: value,\n      };\n      return newSchedule;\n    });\n  }, []);\n\n  // Ajouter un créneau horaire\n  const addTimeSlot = useCallback((dayIndex) => {\n    setSchedule((prevSchedule) => {\n      const newSchedule = [...prevSchedule];\n      const newTimeSlots = [\n        ...(newSchedule[dayIndex].timeSlots || []),\n        { start: \"09:00\", end: \"17:00\" },\n      ];\n\n      newSchedule[dayIndex] = {\n        ...newSchedule[dayIndex],\n        timeSlots: newTimeSlots,\n        hours: calculateDayHours(newTimeSlots),\n      };\n\n      return newSchedule;\n    });\n  }, []);\n\n  // Supprimer un créneau horaire\n  const removeTimeSlot = useCallback((dayIndex, slotIndex) => {\n    setSchedule((prevSchedule) => {\n      const newSchedule = [...prevSchedule];\n      const newTimeSlots = [...newSchedule[dayIndex].timeSlots];\n      newTimeSlots.splice(slotIndex, 1);\n\n      newSchedule[dayIndex] = {\n        ...newSchedule[dayIndex],\n        timeSlots: newTimeSlots,\n        hours: calculateDayHours(newTimeSlots),\n      };\n\n      return newSchedule;\n    });\n  }, []);\n\n  // Mettre à jour un créneau horaire\n  const updateTimeSlot = useCallback((dayIndex, slotIndex, field, value) => {\n    setSchedule((prevSchedule) => {\n      const newSchedule = [...prevSchedule];\n      const newTimeSlots = [...newSchedule[dayIndex].timeSlots];\n\n      newTimeSlots[slotIndex] = {\n        ...newTimeSlots[slotIndex],\n        [field]: value,\n      };\n\n      newSchedule[dayIndex] = {\n        ...newSchedule[dayIndex],\n        timeSlots: newTimeSlots,\n        hours: calculateDayHours(newTimeSlots),\n      };\n\n      return newSchedule;\n    });\n  }, []);\n\n  // Calculer le total des heures\n  const calculateTotalHours = useCallback(() => {\n    return schedule\n      .reduce((total, day) => total + (parseFloat(day.hours) || 0), 0)\n      .toFixed(1);\n  }, [schedule]);\n\n  // Gérer la sauvegarde du planning\n  const handleSave = useCallback(() => {\n    // Convertir le format pour la sauvegarde\n    const formattedSchedule = schedule.map((day) => ({\n      hours: day.hours,\n      absence: day.absence,\n      note: day.note,\n      timeSlots: day.timeSlots,\n      type: day.type,\n    }));\n\n    const updatedScheduleData = {\n      employeeId: employee.id,\n      days: formattedSchedule,\n    };\n\n    onSave(updatedScheduleData);\n  }, [employee, onSave, schedule]);\n\n  if (!employee || !weekDays || schedule.length === 0) {\n    return null;\n  }\n\n  return (\n    <FormContainer>\n      <FormTitle>\n        <div>\n          Planning du {formatDate(weekStart)} au {formatDate(weekDays[6])}\n        </div>\n        <ButtonGroup>\n          <ActionButton variant=\"outline\" onClick={onCancel}>\n            <FaTimes /> Annuler\n          </ActionButton>\n          <ActionButton\n            variant=\"primary\"\n            onClick={handleSave}\n            disabled={isSubmitting}\n          >\n            <FaSave /> {isSubmitting ? \"Enregistrement...\" : \"Enregistrer\"}\n          </ActionButton>\n        </ButtonGroup>\n      </FormTitle>\n\n      <EmployeeInfo>\n        <EmployeeName>\n          {employee.first_name} {employee.last_name}\n        </EmployeeName>\n        <EmployeeDetails>\n          <div>Département: {employee.department || \"Non défini\"}</div>\n          <div>Heures contractuelles: {employee.contractHours}h</div>\n        </EmployeeDetails>\n      </EmployeeInfo>\n\n      <DaysGrid>\n        {weekDays.map((day, index) => (\n          <DayCard key={index} $isWeekend={isWeekend(index)}>\n            <DayHeader>\n              <DayName $isWeekend={isWeekend(index)}>\n                {formatDate(day, \"EEEE\")}\n              </DayName>\n              <DayDate>{formatDate(day, \"dd/MM\")}</DayDate>\n            </DayHeader>\n\n            <RadioGroup>\n              <RadioLabel>\n                <RadioInput\n                  type=\"radio\"\n                  name={`day-type-${index}`}\n                  checked={schedule[index]?.type === \"work\"}\n                  onChange={() => handleTypeChange(index, \"work\")}\n                />\n                Travail\n              </RadioLabel>\n              <RadioLabel>\n                <RadioInput\n                  type=\"radio\"\n                  name={`day-type-${index}`}\n                  checked={schedule[index]?.type === \"absence\"}\n                  onChange={() => handleTypeChange(index, \"absence\")}\n                />\n                Absence\n              </RadioLabel>\n            </RadioGroup>\n\n            {schedule[index]?.type === \"work\" ? (\n              <TimeSlotContainer>\n                <InputLabel>\n                  Créneaux horaires ({schedule[index]?.hours || \"0\"}h)\n                </InputLabel>\n\n                {schedule[index]?.timeSlots?.map((slot, slotIndex) => (\n                  <TimeSlot key={slotIndex}>\n                    <TimeInput\n                      type=\"time\"\n                      value={slot.start}\n                      onChange={(e) =>\n                        updateTimeSlot(\n                          index,\n                          slotIndex,\n                          \"start\",\n                          e.target.value\n                        )\n                      }\n                    />\n                    <span>-</span>\n                    <TimeInput\n                      type=\"time\"\n                      value={slot.end}\n                      onChange={(e) =>\n                        updateTimeSlot(index, slotIndex, \"end\", e.target.value)\n                      }\n                    />\n                    <RemoveSlotButton\n                      variant=\"danger\"\n                      onClick={() => removeTimeSlot(index, slotIndex)}\n                    >\n                      ×\n                    </RemoveSlotButton>\n                  </TimeSlot>\n                ))}\n\n                <AddSlotButton\n                  variant=\"outline\"\n                  onClick={() => addTimeSlot(index)}\n                >\n                  + Ajouter un créneau\n                </AddSlotButton>\n              </TimeSlotContainer>\n            ) : (\n              <InputGroup>\n                <InputLabel>Motif d'absence</InputLabel>\n                <StyledFormInput\n                  type=\"text\"\n                  value={schedule[index]?.absence || \"\"}\n                  onChange={(e) => handleAbsenceChange(index, e.target.value)}\n                  placeholder=\"Saisir le motif d'absence...\"\n                />\n              </InputGroup>\n            )}\n\n            <InputGroup>\n              <InputLabel>Note (optionnelle)</InputLabel>\n              <StyledFormInput\n                type=\"text\"\n                value={schedule[index]?.note || \"\"}\n                onChange={(e) => handleNoteChange(index, e.target.value)}\n                placeholder=\"Ajouter une note...\"\n              />\n            </InputGroup>\n          </DayCard>\n        ))}\n      </DaysGrid>\n\n      <TotalHours>\n        <span>Total des heures:</span>\n        <span>{calculateTotalHours()}h</span>\n      </TotalHours>\n    </FormContainer>\n  );\n};\n\nEmployeeScheduleForm.propTypes = {\n  employee: PropTypes.object.isRequired,\n  weekStart: PropTypes.instanceOf(Date).isRequired,\n  scheduleData: PropTypes.array,\n  onSave: PropTypes.func.isRequired,\n  onCancel: PropTypes.func.isRequired,\n  isSubmitting: PropTypes.bool,\n};\n\nexport default EmployeeScheduleForm;\n","/**\n * Utilitaires pour la gestion des plannings\n */\n\n/**\n * Format standard des données de planning\n *\n * Structure:\n * {\n *   employeeId: number,           // ID de l'employé\n *   days: [                       // Tableau de 7 jours (lundi à dimanche)\n *     {\n *       type: string,             // \"work\" ou \"absence\"\n *       hours: string,            // Nombre d'heures travaillées (format \"0.0\")\n *       absence: string,          // Type d'absence (congé, maladie, etc.)\n *       note: string,             // Note ou commentaire\n *       timeSlots: [              // Créneaux horaires\n *         {\n *           start: string,        // Heure de début (format \"HH:MM\")\n *           end: string,          // Heure de fin (format \"HH:MM\")\n *           break: string         // Durée de la pause en heures (optionnel)\n *         }\n *       ]\n *     }\n *   ]\n * }\n */\n\n/**\n * Convertit les anciennes données de planning au format standard\n * @param {Object} schedule - Données de planning à convertir\n * @returns {Object} - Données de planning au format standard\n */\nexport const standardizeScheduleData = (schedule) => {\n  if (!schedule) return null;\n\n  // Si le planning est déjà au format standard, le retourner tel quel\n  if (\n    schedule.days &&\n    Array.isArray(schedule.days) &&\n    schedule.days.length > 0 &&\n    schedule.days[0].type !== undefined\n  ) {\n    return schedule;\n  }\n\n  // Convertir au format standard\n  return {\n    employeeId: schedule.employeeId || schedule.employee_id,\n    days: Array.isArray(schedule.days)\n      ? schedule.days.map(convertDayToStandardFormat)\n      : Array(7)\n          .fill()\n          .map(() => createEmptyDay()),\n  };\n};\n\n/**\n * Convertit un jour de planning au format standard\n * @param {Object} day - Jour de planning à convertir\n * @returns {Object} - Jour de planning au format standard\n */\nexport const convertDayToStandardFormat = (day) => {\n  if (!day) return createEmptyDay();\n\n  // Si le jour est déjà au format standard, le retourner tel quel\n  if (day.type) {\n    return { ...day };\n  }\n\n  // Convertir au format standard\n  return {\n    type: day.absence ? \"absence\" : \"work\",\n    hours: day.hours || \"0\",\n    absence: day.absence || \"\",\n    note: day.note || \"\",\n    timeSlots:\n      day.timeSlots ||\n      (day.hours && parseFloat(day.hours) > 0\n        ? [{ start: \"09:00\", end: \"17:00\" }]\n        : []),\n  };\n};\n\n/**\n * Crée un jour de planning vide au format standard\n * @returns {Object} - Jour de planning vide\n */\nexport const createEmptyDay = () => ({\n  type: \"work\",\n  hours: \"0\",\n  absence: \"\",\n  note: \"\",\n  timeSlots: [],\n});\n\n/**\n * Calcule le total des heures pour un planning\n * @param {Object} schedule - Données de planning\n * @returns {number} - Total des heures\n */\nexport const calculateTotalHours = (schedule) => {\n  if (!schedule || !schedule.days) return 0;\n\n  return schedule.days.reduce((total, day) => {\n    return total + (parseFloat(day.hours) || 0);\n  }, 0);\n};\n\n/**\n * Vérifie si un employé est absent pour un jour donné\n * @param {Object} day - Jour de planning\n * @returns {boolean} - True si l'employé est absent\n */\nexport const isAbsent = (day) => {\n  return (\n    day && day.type === \"absence\" && day.absence && day.absence.trim() !== \"\"\n  );\n};\n\n/**\n * Prépare les données de planning pour l'envoi à l'API\n * @param {Object} schedule - Données de planning au format standard\n * @returns {Object} - Données formatées pour l'API\n */\nexport const prepareScheduleForApi = (schedule) => {\n  if (!schedule) return null;\n\n  const standardSchedule = standardizeScheduleData(schedule);\n\n  return {\n    employee_id: standardSchedule.employeeId,\n    schedule_data: JSON.stringify(standardSchedule.days),\n    total_hours: calculateTotalHours(standardSchedule).toFixed(1),\n  };\n};\n\n/**\n * Analyse les données de planning reçues de l'API\n * @param {Object} apiData - Données reçues de l'API\n * @returns {Object} - Données de planning au format standard\n */\nexport const parseScheduleFromApi = (apiData) => {\n  if (!apiData) return null;\n\n  let days;\n  try {\n    days =\n      typeof apiData.schedule_data === \"string\"\n        ? JSON.parse(apiData.schedule_data)\n        : apiData.schedule_data;\n  } catch (error) {\n    console.error(\"Erreur lors de l'analyse des données de planning:\", error);\n    days = Array(7)\n      .fill()\n      .map(() => createEmptyDay());\n  }\n\n  return {\n    employeeId: apiData.employee_id,\n    days: Array.isArray(days)\n      ? days.map(convertDayToStandardFormat)\n      : Array(7)\n          .fill()\n          .map(() => createEmptyDay()),\n  };\n};\n\nexport default {\n  standardizeScheduleData,\n  convertDayToStandardFormat,\n  createEmptyDay,\n  calculateTotalHours,\n  isAbsent,\n  prepareScheduleForApi,\n  parseScheduleFromApi,\n};\n","import { useCallback, useEffect, useState } from \"react\";\nimport { toast } from \"react-hot-toast\";\nimport { API_ENDPOINTS } from \"../config/api\";\nimport {\n  parseScheduleFromApi,\n  prepareScheduleForApi,\n  standardizeScheduleData,\n} from \"../utils/scheduleUtils\";\nimport useApi from \"./useApi\";\nimport useWebSocket from \"./useWebSocket\";\n\n/**\n * Hook personnalisé pour gérer les plannings hebdomadaires\n */\nconst useWeeklySchedules = () => {\n  const [schedules, setSchedules] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const api = useApi();\n\n  // Intégration WebSocket pour les mises à jour en temps réel\n  const { socket, isConnected, sendMessage, notifyDataChange, fallbackMode } =\n    useWebSocket();\n\n  // Écouter les mises à jour WebSocket\n  useEffect(() => {\n    if (socket && isConnected) {\n      // Fonction pour traiter les messages WebSocket\n      const handleWebSocketMessage = (event) => {\n        try {\n          const data = JSON.parse(event.data);\n\n          // Si le message concerne une mise à jour de planning\n          if (data.type === \"SCHEDULE_UPDATED\" && data.schedule) {\n            setSchedules((prevSchedules) => {\n              // Vérifier si le planning existe déjà\n              const exists = prevSchedules.some(\n                (schedule) => schedule.id === data.schedule.id\n              );\n\n              if (exists) {\n                // Mettre à jour le planning existant\n                return prevSchedules.map((schedule) =>\n                  schedule.id === data.schedule.id\n                    ? parseScheduleFromApi(data.schedule)\n                    : schedule\n                );\n              } else {\n                // Ajouter le nouveau planning\n                return [...prevSchedules, parseScheduleFromApi(data.schedule)];\n              }\n            });\n\n            toast.info(\"Planning mis à jour en temps réel\");\n          }\n\n          // Si le message concerne une suppression de planning\n          if (data.type === \"SCHEDULE_DELETED\" && data.scheduleId) {\n            setSchedules((prevSchedules) =>\n              prevSchedules.filter(\n                (schedule) => schedule.id !== data.scheduleId\n              )\n            );\n\n            toast.info(\"Planning supprimé en temps réel\");\n          }\n        } catch (error) {\n          console.error(\n            \"Erreur lors du traitement du message WebSocket:\",\n            error\n          );\n        }\n      };\n\n      // Ajouter l'écouteur d'événements\n      socket.addEventListener(\"message\", handleWebSocketMessage);\n\n      // Nettoyer l'écouteur lors du démontage\n      return () => {\n        socket.removeEventListener(\"message\", handleWebSocketMessage);\n      };\n    }\n  }, [socket, isConnected]);\n\n  /**\n   * Fonction utilitaire pour réessayer une requête API\n   * @param {Function} apiCall - Fonction d'appel API à réessayer\n   * @param {number} maxRetries - Nombre maximum de tentatives\n   * @param {number} delay - Délai entre les tentatives (en ms)\n   * @returns {Promise} - Résultat de l'appel API\n   */\n  const retryApiCall = useCallback(\n    async (apiCall, maxRetries = 3, delay = 1000) => {\n      let lastError = null;\n      let retryCount = 0;\n\n      while (retryCount < maxRetries) {\n        try {\n          return await apiCall();\n        } catch (err) {\n          lastError = err;\n          retryCount++;\n\n          // Si c'est la dernière tentative, ne pas attendre\n          if (retryCount < maxRetries) {\n            // Utiliser un délai exponentiel\n            const retryDelay = delay * Math.pow(2, retryCount - 1);\n            console.log(\n              `Tentative ${retryCount}/${maxRetries} échouée, nouvelle tentative dans ${retryDelay}ms`\n            );\n            await new Promise((resolve) => setTimeout(resolve, retryDelay));\n          }\n        }\n      }\n\n      // Si toutes les tentatives ont échoué, lancer l'erreur\n      throw lastError;\n    },\n    []\n  );\n\n  /**\n   * Récupère les plannings pour une semaine spécifique\n   * @param {string} weekStart - Date de début de semaine (format YYYY-MM-DD)\n   * @returns {Promise<Array>} - Liste des plannings\n   */\n  const fetchSchedules = useCallback(\n    async (weekStart) => {\n      try {\n        setLoading(true);\n        setError(null);\n\n        const apiCall = async () => {\n          const response = await api.get(\n            `${API_ENDPOINTS.WEEKLY_SCHEDULES}?weekStart=${weekStart}`\n          );\n\n          if (!response.ok) {\n            throw new Error(\n              response.data?.message || \"Erreur lors du chargement des horaires\"\n            );\n          }\n\n          return response.data;\n        };\n\n        // Utiliser la fonction de retry\n        const data = await retryApiCall(apiCall);\n\n        // Standardiser les données\n        const standardizedSchedules = data.map((schedule) =>\n          parseScheduleFromApi(schedule)\n        );\n\n        setSchedules(standardizedSchedules);\n        return standardizedSchedules;\n      } catch (err) {\n        console.error(\"Erreur lors du chargement des horaires:\", err);\n        setError(\n          \"Erreur lors du chargement des horaires: \" +\n            (err.message || \"Erreur inconnue\")\n        );\n        toast.error(\"Erreur lors du chargement des horaires\");\n        return [];\n      } finally {\n        setLoading(false);\n      }\n    },\n    [api, retryApiCall]\n  );\n\n  /**\n   * Crée un nouveau planning\n   * @param {Object} scheduleData - Données du planning\n   * @returns {Promise<Object>} - Résultat de la création\n   */\n  const createSchedule = useCallback(\n    async (scheduleData) => {\n      try {\n        // Standardiser et préparer les données pour l'API\n        const apiData = prepareScheduleForApi(\n          standardizeScheduleData(scheduleData)\n        );\n\n        console.log(\"Données envoyées à l'API:\", apiData);\n\n        const apiCall = async () => {\n          const response = await api.post(\n            API_ENDPOINTS.WEEKLY_SCHEDULES,\n            apiData\n          );\n\n          if (!response.ok) {\n            throw new Error(\n              response.data?.message ||\n                \"Erreur lors de la création de l'horaire\"\n            );\n          }\n\n          return response.data;\n        };\n\n        // Utiliser la fonction de retry\n        const data = await retryApiCall(apiCall);\n\n        // Standardiser les données reçues\n        const standardizedSchedule = parseScheduleFromApi(data);\n\n        setSchedules((prev) => [...prev, standardizedSchedule]);\n\n        // Notifier les autres clients via WebSocket\n        if (!fallbackMode && isConnected) {\n          notifyDataChange(\"schedule\", \"create\", standardizedSchedule.id);\n        }\n\n        toast.success(\"Horaire créé avec succès\");\n        return { success: true, schedule: standardizedSchedule };\n      } catch (err) {\n        console.error(\"Erreur lors de la création de l'horaire:\", err);\n        const errorMessage = err.message || \"Erreur inconnue\";\n        toast.error(`Erreur lors de la création de l'horaire: ${errorMessage}`);\n        return { success: false, error: errorMessage };\n      }\n    },\n    [api, retryApiCall, fallbackMode, isConnected, notifyDataChange]\n  );\n\n  /**\n   * Met à jour un planning existant\n   * @param {number} id - ID du planning\n   * @param {Object} scheduleData - Données du planning\n   * @returns {Promise<Object>} - Résultat de la mise à jour\n   */\n  const updateSchedule = useCallback(\n    async (id, scheduleData) => {\n      try {\n        // Standardiser et préparer les données pour l'API\n        const apiData = prepareScheduleForApi(\n          standardizeScheduleData(scheduleData)\n        );\n\n        const apiCall = async () => {\n          const response = await api.put(\n            `${API_ENDPOINTS.WEEKLY_SCHEDULES}/${id}`,\n            apiData\n          );\n\n          if (!response.ok) {\n            throw new Error(\n              response.data?.message ||\n                \"Erreur lors de la mise à jour de l'horaire\"\n            );\n          }\n\n          return response.data;\n        };\n\n        // Utiliser la fonction de retry\n        const data = await retryApiCall(apiCall);\n\n        // Standardiser les données reçues\n        const standardizedSchedule = parseScheduleFromApi(data);\n\n        setSchedules((prev) =>\n          prev.map((schedule) =>\n            schedule.id === id ? standardizedSchedule : schedule\n          )\n        );\n\n        // Notifier les autres clients via WebSocket\n        if (!fallbackMode && isConnected) {\n          notifyDataChange(\"schedule\", \"update\", id);\n        }\n\n        toast.success(\"Horaire mis à jour avec succès\");\n        return { success: true, schedule: standardizedSchedule };\n      } catch (err) {\n        console.error(\"Erreur lors de la mise à jour de l'horaire:\", err);\n        const errorMessage = err.message || \"Erreur inconnue\";\n        toast.error(\n          `Erreur lors de la mise à jour de l'horaire: ${errorMessage}`\n        );\n        return { success: false, error: errorMessage };\n      }\n    },\n    [api, retryApiCall, fallbackMode, isConnected, notifyDataChange]\n  );\n\n  /**\n   * Supprime un planning\n   * @param {number} id - ID du planning\n   * @returns {Promise<Object>} - Résultat de la suppression\n   */\n  const deleteSchedule = useCallback(\n    async (id) => {\n      try {\n        const apiCall = async () => {\n          const response = await api.delete(\n            `${API_ENDPOINTS.WEEKLY_SCHEDULES}/${id}`\n          );\n\n          if (!response.ok) {\n            throw new Error(\n              response.data?.message ||\n                \"Erreur lors de la suppression de l'horaire\"\n            );\n          }\n\n          return response.data;\n        };\n\n        // Utiliser la fonction de retry\n        await retryApiCall(apiCall);\n\n        setSchedules((prev) => prev.filter((schedule) => schedule.id !== id));\n\n        // Notifier les autres clients via WebSocket\n        if (!fallbackMode && isConnected) {\n          notifyDataChange(\"schedule\", \"delete\", id);\n        }\n\n        toast.success(\"Horaire supprimé avec succès\");\n        return { success: true };\n      } catch (err) {\n        console.error(\"Erreur lors de la suppression de l'horaire:\", err);\n        const errorMessage = err.message || \"Erreur inconnue\";\n        toast.error(\n          `Erreur lors de la suppression de l'horaire: ${errorMessage}`\n        );\n        return { success: false, error: errorMessage };\n      }\n    },\n    [api, retryApiCall, fallbackMode, isConnected, notifyDataChange]\n  );\n\n  return {\n    schedules,\n    loading,\n    error,\n    fetchSchedules,\n    createSchedule,\n    updateSchedule,\n    deleteSchedule,\n  };\n};\n\nexport default useWeeklySchedules;\n","import DOMPurify from \"dompurify\";\nimport html2canvas from \"html2canvas\";\nimport { jsPDF } from \"jspdf\";\nimport PropTypes from \"prop-types\";\nimport { useCallback, useMemo, useState } from \"react\";\nimport { toast } from \"react-hot-toast\";\nimport {\n  FaEdit,\n  FaFilePdf,\n  FaSortAmountDown,\n  FaSortAmountUp,\n} from \"react-icons/fa\";\nimport styled, { useTheme } from \"styled-components\";\nimport { formatDate, getDayName, getDaysOfWeek } from \"../../utils/dateUtils\";\nimport {\n  calculateTotalHours,\n  isAbsent as isEmployeeAbsent,\n  standardizeScheduleData,\n} from \"../../utils/scheduleUtils\";\nimport Button from \"../ui/Button\";\n\n// Styles\nconst ScheduleGrid = styled.div`\n  display: grid;\n  grid-template-columns: 200px repeat(7, 1fr) 100px 80px 80px;\n  gap: 1px;\n  background-color: ${({ theme }) => theme.colors.border.light};\n  border-radius: 0.5rem;\n  overflow-x: auto;\n  width: 100%;\n  box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1),\n    0 2px 4px -1px rgba(0, 0, 0, 0.06);\n  position: relative;\n\n  &::after {\n    content: \"\";\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    pointer-events: none;\n    background-image: linear-gradient(\n        to right,\n        transparent,\n        transparent 99%,\n        ${({ theme }) => theme.colors.border.light} 99%,\n        ${({ theme }) => theme.colors.border.light} 100%\n      ),\n      linear-gradient(\n        to bottom,\n        transparent,\n        transparent 99%,\n        ${({ theme }) => theme.colors.border.light} 99%,\n        ${({ theme }) => theme.colors.border.light} 100%\n      );\n    background-size: 100% 100%;\n    background-position: 0 0;\n    background-repeat: repeat;\n    z-index: 1;\n  }\n\n  @media (max-width: 1200px) {\n    grid-template-columns: 180px repeat(7, 1fr) 100px 80px 80px;\n  }\n\n  @media (max-width: 992px) {\n    grid-template-columns: 150px repeat(7, minmax(80px, 1fr)) 100px 80px 80px;\n  }\n\n  @media (max-width: 768px) {\n    grid-template-columns: 120px repeat(7, minmax(70px, 1fr)) 100px 80px 80px;\n    font-size: 0.85rem;\n  }\n\n  @media (max-width: 576px) {\n    display: block;\n    overflow-x: visible;\n    background-color: transparent;\n    gap: 0;\n  }\n`;\n\nconst GridCell = styled.div`\n  padding: 0.75rem;\n  background-color: ${({ theme }) => theme.colors.background.primary};\n  color: ${({ theme }) => theme.colors.text.primary};\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  min-height: 50px;\n  transition: all 0.3s ease;\n  position: relative;\n  z-index: 2;\n\n  &:hover {\n    transform: translateZ(0);\n    box-shadow: 0 0 0 1px ${({ theme }) => theme.colors.primary.main}40;\n  }\n\n  @media (max-width: 576px) {\n    padding: 0.5rem;\n    min-height: auto;\n  }\n`;\n\nconst HeaderCell = styled(GridCell)`\n  font-weight: 600;\n  background-color: ${({ theme }) => theme.colors.background.secondary};\n  text-align: center;\n  position: sticky;\n  top: 0;\n  z-index: 10;\n  cursor: ${(props) => (props.sortable ? \"pointer\" : \"default\")};\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  gap: 5px;\n\n  &:hover {\n    background-color: ${(props) =>\n      props.sortable\n        ? ({ theme }) => theme.colors.background.tertiary\n        : \"inherit\"};\n  }\n\n  @media (max-width: 576px) {\n    display: none;\n  }\n`;\n\nconst EmployeeCell = styled(GridCell)`\n  justify-content: flex-start;\n  font-weight: 500;\n  background-color: ${({ theme }) => theme.colors.background.secondary};\n  position: sticky;\n  left: 0;\n  z-index: 5;\n\n  @media (max-width: 576px) {\n    position: static;\n    border-top-left-radius: 0.5rem;\n    border-top-right-radius: 0.5rem;\n    margin-top: 1rem;\n    font-size: 1.1rem;\n    justify-content: center;\n  }\n`;\n\nconst TotalCell = styled(GridCell)`\n  font-weight: 600;\n  background-color: ${({ theme }) => theme.colors.background.secondary};\n  position: sticky;\n  right: 160px;\n  z-index: 5;\n\n  @media (max-width: 576px) {\n    position: static;\n    border-bottom-left-radius: 0.5rem;\n    border-bottom-right-radius: 0.5rem;\n    margin-bottom: 1rem;\n  }\n`;\n\nconst DayCell = styled(GridCell)`\n  ${({ isWeekend, theme }) =>\n    isWeekend &&\n    `\n    background-color: ${theme.colors.background.tertiary};\n  `}\n\n  ${({ isAbsent }) =>\n    isAbsent &&\n    `\n    color: #ef4444;\n  `}\n  \n  flex-direction: column;\n  gap: 0.25rem;\n  font-size: 0.85rem;\n  text-align: center;\n\n  @media (max-width: 576px) {\n    display: grid;\n    grid-template-columns: 100px 1fr;\n    text-align: left;\n    border-radius: 0;\n    margin: 0;\n\n    &::before {\n      content: attr(data-day);\n      font-weight: 600;\n      color: ${({ theme }) => theme.colors.text.secondary};\n    }\n  }\n`;\n\nconst TimeSlot = styled.div`\n  font-size: 1rem;\n  font-weight: 600;\n  color: ${({ theme }) => theme.colors.text.primary};\n  white-space: nowrap;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nconst TimeSlotDetails = styled.div`\n  font-size: 0.75rem;\n  color: ${({ theme }) => theme.colors.text.secondary};\n  margin-top: 0.25rem;\n`;\n\nconst BreakInfo = styled.div`\n  font-size: 0.7rem;\n  color: ${({ theme }) => theme.colors.text.tertiary};\n  font-style: italic;\n`;\n\nconst HoursValue = styled.div`\n  font-size: 0.75rem;\n  color: ${({ theme }) => theme.colors.text.secondary};\n`;\n\nconst AbsenceValue = styled.div`\n  font-size: 1.1rem;\n  font-weight: 700;\n  color: #ef4444;\n`;\n\nconst NoteText = styled.div`\n  font-style: italic;\n  font-size: 0.75rem;\n  color: ${({ theme }) => theme.colors.text.secondary};\n  margin-top: 0.25rem;\n  max-width: 100%;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n`;\n\nconst ActionCell = styled(GridCell)`\n  position: sticky;\n  right: 0;\n  z-index: 5;\n  background-color: ${({ theme }) => theme.colors.background.secondary};\n  padding: 0.5rem;\n\n  @media (max-width: 576px) {\n    position: static;\n    padding: 0.5rem;\n  }\n`;\n\nconst ExportCell = styled(GridCell)`\n  position: sticky;\n  right: 80px;\n  z-index: 5;\n  background-color: ${({ theme }) => theme.colors.background.secondary};\n  padding: 0.5rem;\n\n  @media (max-width: 576px) {\n    position: static;\n    padding: 0.5rem;\n  }\n`;\n\nconst ActionButton = styled(Button)`\n  padding: 0.4rem 0.6rem;\n  font-size: 0.8rem;\n  width: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  gap: 0.5rem;\n`;\n\nconst EmployeeRow = styled.div`\n  display: contents;\n\n  @media (max-width: 576px) {\n    display: flex;\n    flex-direction: column;\n    border-radius: 0.5rem;\n    overflow: hidden;\n    box-shadow: 0 2px 8px\n      ${({ theme }) =>\n        theme.mode === \"dark\" ? \"rgba(0, 0, 0, 0.3)\" : \"rgba(0, 0, 0, 0.1)\"};\n    margin-bottom: 1.5rem;\n  }\n`;\n\nconst ActionRow = styled.div`\n  @media (max-width: 576px) {\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    gap: 0.5rem;\n    padding: 0.75rem;\n    background-color: ${({ theme }) => theme.colors.background.secondary};\n  }\n`;\n\nconst WeeklyScheduleGrid = ({\n  employees,\n  weekStart,\n  scheduleData,\n  onChange,\n  readOnly,\n  onEditEmployee,\n}) => {\n  const theme = useTheme();\n\n  // S'assurer que employees est un tableau\n  const employeesArray = Array.isArray(employees) ? employees : [];\n\n  // S'assurer que scheduleData est un tableau\n  const scheduleDataArray = Array.isArray(scheduleData) ? scheduleData : [];\n\n  // S'assurer que weekStart est une date valide\n  const validWeekStart = useMemo(() => {\n    try {\n      const date = weekStart instanceof Date ? weekStart : new Date(weekStart);\n      return !isNaN(date.getTime()) ? date : new Date();\n    } catch (error) {\n      console.error(\"Date de début de semaine invalide:\", weekStart);\n      return new Date();\n    }\n  }, [weekStart]);\n\n  // État pour le tri\n  const [sortConfig, setSortConfig] = useState({\n    key: null,\n    direction: \"ascending\",\n  });\n\n  // Obtenir les jours de la semaine\n  const daysOfWeek = getDaysOfWeek(validWeekStart);\n\n  // Fonction pour trier les employés\n  const sortedEmployees = [...employeesArray].sort((a, b) => {\n    if (sortConfig.key === null) {\n      return 0;\n    }\n\n    let aValue, bValue;\n\n    if (sortConfig.key === \"name\") {\n      aValue = `${a.lastName} ${a.firstName}`.toLowerCase();\n      bValue = `${b.lastName} ${b.firstName}`.toLowerCase();\n    } else if (sortConfig.key === \"total\") {\n      aValue = parseFloat(calculateEmployeeTotal(a.id));\n      bValue = parseFloat(calculateEmployeeTotal(b.id));\n    } else {\n      aValue = a[sortConfig.key];\n      bValue = b[sortConfig.key];\n    }\n\n    if (aValue < bValue) {\n      return sortConfig.direction === \"ascending\" ? -1 : 1;\n    }\n    if (aValue > bValue) {\n      return sortConfig.direction === \"ascending\" ? 1 : -1;\n    }\n    return 0;\n  });\n\n  // Fonction pour changer le tri\n  const requestSort = useCallback(\n    (key) => {\n      let direction = \"ascending\";\n      if (sortConfig.key === key && sortConfig.direction === \"ascending\") {\n        direction = \"descending\";\n      }\n      setSortConfig({ key, direction });\n    },\n    [sortConfig]\n  );\n\n  // Obtenir l'icône de tri\n  const getSortIcon = useCallback(\n    (key) => {\n      if (sortConfig.key !== key) {\n        return null;\n      }\n      return sortConfig.direction === \"ascending\" ? (\n        <FaSortAmountUp size={12} />\n      ) : (\n        <FaSortAmountDown size={12} />\n      );\n    },\n    [sortConfig]\n  );\n\n  // Trouver le planning d'un employé\n  const findEmployeeSchedule = useCallback(\n    (employeeId) => {\n      const schedule = scheduleDataArray.find(\n        (schedule) => schedule.employeeId === employeeId\n      );\n\n      if (!schedule) {\n        return {\n          employeeId,\n          days: Array(7)\n            .fill()\n            .map(() => ({\n              type: \"work\",\n              hours: \"0\",\n              absence: \"\",\n              note: \"\",\n              timeSlots: [],\n            })),\n        };\n      }\n\n      // Standardiser les données\n      return standardizeScheduleData(schedule);\n    },\n    [scheduleDataArray]\n  );\n\n  // Gérer le clic sur le bouton d'édition\n  const handleEditClick = useCallback(\n    (employeeId) => {\n      if (onEditEmployee) {\n        onEditEmployee(employeeId);\n      }\n    },\n    [onEditEmployee]\n  );\n\n  // Vérifier si un jour est un weekend\n  const isWeekend = useCallback((dayIndex) => {\n    return dayIndex === 5 || dayIndex === 6; // Samedi ou Dimanche\n  }, []);\n\n  // Vérifier si un employé est absent pour un jour donné\n  const isAbsent = useCallback(\n    (employeeId, dayIndex) => {\n      const schedule = findEmployeeSchedule(employeeId);\n      const day = schedule.days[dayIndex];\n      return isEmployeeAbsent(day);\n    },\n    [findEmployeeSchedule]\n  );\n\n  // Formater l'affichage d'une cellule de jour\n  const formatDayCell = useCallback(\n    (employeeId, dayIndex) => {\n      const schedule = findEmployeeSchedule(employeeId);\n      const day = schedule.days[dayIndex];\n\n      if (!day) return null;\n\n      const hasTimeSlots = day.timeSlots && day.timeSlots.length > 0;\n\n      return (\n        <>\n          {day.type === \"absence\" &&\n          day.absence &&\n          day.absence.trim() !== \"\" ? (\n            <AbsenceValue>{day.absence}</AbsenceValue>\n          ) : hasTimeSlots ? (\n            day.timeSlots.map((slot, index) => (\n              <TimeSlot key={index}>\n                {slot.start} - {slot.end}\n                {slot.break && <BreakInfo>Pause: {slot.break}h</BreakInfo>}\n              </TimeSlot>\n            ))\n          ) : (\n            <TimeSlot>-</TimeSlot>\n          )}\n          <HoursValue>{day.hours || \"0\"}h</HoursValue>\n          {day.note && day.note.trim() !== \"\" && (\n            <NoteText title={day.note}>{day.note}</NoteText>\n          )}\n        </>\n      );\n    },\n    [findEmployeeSchedule]\n  );\n\n  // Calculer le total des heures pour un employé\n  const calculateEmployeeTotal = useCallback(\n    (employeeId) => {\n      const schedule = findEmployeeSchedule(employeeId);\n      return calculateTotalHours(schedule).toFixed(1);\n    },\n    [findEmployeeSchedule]\n  );\n\n  // Obtenir le compteur horaire d'un employé (heures contractuelles vs heures travaillées)\n  const getEmployeeHoursCounter = useCallback(\n    (employeeId) => {\n      const employee = employees.find((emp) => emp.id === employeeId);\n      if (!employee || !employee.contractHours) return \"N/A\";\n\n      const contractHours = parseFloat(employee.contractHours);\n      const workedHours = parseFloat(calculateEmployeeTotal(employeeId));\n      const diff = workedHours - contractHours;\n\n      return diff === 0\n        ? \"0\"\n        : diff > 0\n        ? `+${diff.toFixed(1)}`\n        : diff.toFixed(1);\n    },\n    [employees, calculateEmployeeTotal]\n  );\n\n  // Fonction pour générer un PDF du planning d'un employé\n  const generatePDF = (employee, days, weekStart) => {\n    // Vérifier si weekStart est valide\n    if (!weekStart || isNaN(new Date(weekStart).getTime())) {\n      console.error(\n        \"Date de début de semaine invalide pour le PDF:\",\n        weekStart\n      );\n      toast.error(\"Impossible de générer le PDF: date invalide\");\n      return;\n    }\n\n    // Créer un élément temporaire pour le rendu\n    const tempElement = document.createElement(\"div\");\n    tempElement.style.position = \"absolute\";\n    tempElement.style.left = \"-9999px\";\n    tempElement.style.top = \"-9999px\";\n    tempElement.style.width = \"1000px\"; // Plus large pour le format paysage\n\n    // Formater les dates\n    const weekStartDate = new Date(weekStart);\n    const weekEndDate = new Date(weekStart);\n    weekEndDate.setDate(weekEndDate.getDate() + 6);\n\n    const formattedWeekStart = formatDate(weekStartDate);\n    const formattedWeekEnd = formatDate(weekEndDate);\n\n    // Calculer le total des heures\n    const totalHours = days.reduce((sum, day) => {\n      return sum + (day.isAbsent ? 0 : parseFloat(day.hours || 0));\n    }, 0);\n\n    // Créer le contenu HTML\n    const content = `\n      <div style=\"font-family: Arial, sans-serif; padding: 20px; color: #333; text-align: center;\">\n        <h2 style=\"text-align: center; color: #2563eb;\">Planning Hebdomadaire</h2>\n        <h3 style=\"text-align: center; margin-bottom: 10px;\">Du ${formattedWeekStart} au ${formattedWeekEnd}</h3>\n        \n        <div style=\"margin-bottom: 20px; text-align: center;\">\n          <h2 style=\"margin-bottom: 5px; color: #2563eb; font-size: 24px; font-weight: bold;\">${\n            employee.firstName\n          } ${employee.lastName}</h2>\n          <p style=\"margin: 5px 0;\">Poste: ${employee.role}</p>\n          <p style=\"margin: 5px 0;\">Département: ${employee.department}</p>\n          <p style=\"margin: 5px 0;\">Heures contractuelles: ${\n            employee.contractHours\n          }h</p>\n          <p style=\"margin: 5px 0;\">Total heures planifiées: ${totalHours.toFixed(\n            1\n          )}h</p>\n        </div>\n        \n        <table style=\"width: 100%; border-collapse: collapse; margin: 0 auto; max-width: 900px;\">\n          <thead>\n            <tr style=\"background-color: #e5e7eb;\">\n              <th style=\"padding: 10px; border: 1px solid #d1d5db; text-align: left;\">Jour</th>\n              <th style=\"padding: 10px; border: 1px solid #d1d5db; text-align: left;\">Heures</th>\n              <th style=\"padding: 10px; border: 1px solid #d1d5db; text-align: left;\">Créneaux</th>\n              <th style=\"padding: 10px; border: 1px solid #d1d5db; text-align: left;\">Notes</th>\n            </tr>\n          </thead>\n          <tbody>\n            ${days\n              .map((day, index) => {\n                const dayDate = new Date(weekStart);\n                if (isNaN(dayDate.getTime())) {\n                  console.error(\"Date invalide:\", weekStart);\n                  return \"\"; // Ignorer cette ligne en cas de date invalide\n                }\n\n                dayDate.setDate(dayDate.getDate() + index);\n                const isWeekendDay = isWeekend(dayDate);\n\n                return `\n                <tr style=\"background-color: ${\n                  isWeekendDay ? \"#f9fafb\" : \"white\"\n                };\">\n                  <td style=\"padding: 10px; border: 1px solid #d1d5db; font-weight: ${\n                    isWeekendDay ? \"bold\" : \"normal\"\n                  };\">\n                    ${getDayName(dayDate)} ${formatDate(dayDate, \"dd/MM\")}\n                  </td>\n                  <td style=\"padding: 10px; border: 1px solid #d1d5db;\">\n                    ${\n                      day.isAbsent\n                        ? `<span style=\"color: #ef4444; font-weight: bold;\">${\n                            day.absenceReason || \"Absent\"\n                          }</span>`\n                        : `${day.hours}h`\n                    }\n                  </td>\n                  <td style=\"padding: 10px; border: 1px solid #d1d5db;\">\n                    ${\n                      day.isAbsent\n                        ? \"-\"\n                        : (day.timeSlots || [])\n                            .map((slot) => `${slot.start} - ${slot.end}`)\n                            .join(\"<br>\")\n                    }\n                  </td>\n                  <td style=\"padding: 10px; border: 1px solid #d1d5db; font-style: italic;\">\n                    ${day.notes ? DOMPurify.sanitize(day.notes) : \"\"}\n                  </td>\n                </tr>\n              `;\n              })\n              .join(\"\")}\n          </tbody>\n        </table>\n      </div>\n    `;\n\n    // Ajouter le contenu à l'élément temporaire\n    tempElement.innerHTML = DOMPurify.sanitize(content);\n    document.body.appendChild(tempElement);\n\n    // Générer le PDF\n    html2canvas(tempElement, {\n      scale: 1,\n      useCORS: true,\n      logging: false,\n    }).then((canvas) => {\n      const imgData = canvas.toDataURL(\"image/png\");\n      const pdf = new jsPDF(\"l\", \"mm\", \"a4\"); // Format paysage\n      const pdfWidth = pdf.internal.pageSize.getWidth();\n      const pdfHeight = pdf.internal.pageSize.getHeight();\n      const ratio = canvas.width / canvas.height;\n      const imgWidth = pdfWidth;\n      const imgHeight = imgWidth / ratio;\n\n      pdf.addImage(imgData, \"PNG\", 0, 0, imgWidth, imgHeight);\n      pdf.save(\n        `Planning_${employee.firstName}_${employee.lastName}_${formattedWeekStart}.pdf`\n      );\n\n      // Nettoyer\n      document.body.removeChild(tempElement);\n    });\n  };\n\n  const handleGeneratePDF = (employee) => {\n    // Vérifier si weekStart est une date valide\n    if (!validWeekStart) {\n      console.error(\"Date de début de semaine invalide\");\n      toast.error(\"Impossible de générer le PDF : date invalide\");\n      return;\n    }\n\n    const employeeSchedule = scheduleDataArray.find(\n      (schedule) => schedule.employeeId === employee.id\n    );\n\n    if (employeeSchedule) {\n      // Convertir les jours au format attendu par generatePDF\n      const formattedDays = employeeSchedule.days.map((day) => {\n        return {\n          isAbsent:\n            day.type === \"absence\" && day.absence && day.absence.trim() !== \"\",\n          absenceReason: day.absence || \"\",\n          hours: day.hours || \"0\",\n          timeSlots: day.timeSlots || [],\n          notes: day.note || \"\",\n        };\n      });\n\n      generatePDF(employee, formattedDays, validWeekStart);\n    } else {\n      // Créer un planning vide si aucun n'existe\n      const emptyDays = Array(7)\n        .fill()\n        .map(() => ({\n          isAbsent: false,\n          absenceReason: \"\",\n          hours: \"0\",\n          timeSlots: [],\n          notes: \"\",\n        }));\n      generatePDF(employee, emptyDays, validWeekStart);\n    }\n  };\n\n  return (\n    <ScheduleGrid>\n      {/* En-tête avec les jours de la semaine */}\n      <HeaderCell sortable onClick={() => requestSort(\"name\")}>\n        Employé {getSortIcon(\"name\")}\n      </HeaderCell>\n      {daysOfWeek.map((day, index) => (\n        <HeaderCell key={index}>{formatDate(day, \"EEE dd/MM\")}</HeaderCell>\n      ))}\n      <HeaderCell sortable onClick={() => requestSort(\"total\")}>\n        Total {getSortIcon(\"total\")}\n      </HeaderCell>\n      <HeaderCell>Export</HeaderCell>\n      <HeaderCell>Actions</HeaderCell>\n\n      {/* Lignes pour chaque employé */}\n      {sortedEmployees.map((employee) => {\n        const schedule = scheduleDataArray.find(\n          (s) => s.employeeId === employee.id\n        );\n        return (\n          <EmployeeRow key={employee.id}>\n            <EmployeeCell>\n              {employee.firstName} {employee.lastName}\n            </EmployeeCell>\n\n            {/* Cellules pour chaque jour */}\n            {Array(7)\n              .fill()\n              .map((_, dayIndex) => (\n                <DayCell\n                  key={dayIndex}\n                  isWeekend={isWeekend(dayIndex)}\n                  isAbsent={isAbsent(employee.id, dayIndex)}\n                  data-day={formatDate(daysOfWeek[dayIndex], \"EEEE\")}\n                  onClick={() => !readOnly && onEditEmployee(employee.id)}\n                >\n                  {formatDayCell(employee.id, dayIndex)}\n                </DayCell>\n              ))}\n\n            {/* Cellule de total */}\n            <TotalCell>\n              {calculateEmployeeTotal(employee.id)}h\n              <br />\n              <small\n                style={{\n                  color: getEmployeeHoursCounter(employee.id).startsWith(\"+\")\n                    ? theme.colors.success.main\n                    : getEmployeeHoursCounter(employee.id).startsWith(\"-\")\n                    ? theme.colors.error.main\n                    : \"inherit\",\n                }}\n              >\n                {getEmployeeHoursCounter(employee.id)}\n              </small>\n            </TotalCell>\n\n            {/* Cellule d'export */}\n            <ExportCell>\n              <ActionButton\n                variant=\"secondary\"\n                onClick={() => handleGeneratePDF(employee)}\n              >\n                <FaFilePdf /> PDF\n              </ActionButton>\n            </ExportCell>\n\n            {/* Cellule d'action */}\n            <ActionCell>\n              <ActionButton\n                variant=\"primary\"\n                onClick={() => handleEditClick(employee.id)}\n              >\n                <FaEdit /> Modifier\n              </ActionButton>\n            </ActionCell>\n          </EmployeeRow>\n        );\n      })}\n    </ScheduleGrid>\n  );\n};\n\nWeeklyScheduleGrid.propTypes = {\n  employees: PropTypes.array,\n  weekStart: PropTypes.instanceOf(Date).isRequired,\n  scheduleData: PropTypes.array,\n  onChange: PropTypes.func,\n  readOnly: PropTypes.bool,\n  onEditEmployee: PropTypes.func,\n};\n\nWeeklyScheduleGrid.defaultProps = {\n  employees: [],\n  scheduleData: [],\n  onChange: () => {},\n  readOnly: false,\n  onEditEmployee: null,\n};\n\nexport default WeeklyScheduleGrid;\n","import { format } from \"date-fns\";\nimport PropTypes from \"prop-types\";\nimport { useState } from \"react\";\nimport { toast } from \"react-hot-toast\";\nimport useEmployees from \"../../hooks/useEmployees\";\nimport useWeeklySchedules from \"../../hooks/useWeeklySchedules\";\nimport WeeklyScheduleGrid from \"./WeeklyScheduleGrid\";\n\nconst WeeklyScheduleForm = ({ onSubmit, onCancel }) => {\n  const [formData, setFormData] = useState({\n    employeeId: \"\",\n    weekStart: format(new Date(), \"yyyy-MM-dd\"),\n    scheduleData: {},\n  });\n\n  const { employees, loading: employeesLoading } = useEmployees();\n  const { createSchedule } = useWeeklySchedules();\n\n  const handleEmployeeChange = (event) => {\n    const selectedEmployeeId = event.target.value;\n    setFormData((prev) => ({\n      ...prev,\n      employeeId: selectedEmployeeId,\n    }));\n  };\n\n  const handleWeekStartChange = (event) => {\n    setFormData((prev) => ({\n      ...prev,\n      weekStart: event.target.value,\n    }));\n  };\n\n  const handleScheduleChange = (newScheduleData) => {\n    console.log(\"Nouvelles données de planning reçues:\", newScheduleData);\n    setFormData((prev) => ({\n      ...prev,\n      scheduleData: newScheduleData,\n    }));\n  };\n\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n\n    try {\n      if (!formData.employeeId) {\n        toast.error(\"Veuillez sélectionner un employé\");\n        return;\n      }\n\n      const scheduleData = {\n        employeeId: parseInt(formData.employeeId),\n        weekStart: formData.weekStart,\n        days: Object.entries(formData.scheduleData).map(([day, data]) => ({\n          day,\n          type: data.type || \"work\",\n          hours: parseFloat(data.hours) || 0,\n          absence: data.absence || false,\n          note: data.note || \"\",\n          timeSlots: data.hours > 0 ? [{ start: \"09:00\", end: \"17:00\" }] : [],\n        })),\n      };\n\n      console.log(\"Données envoyées à l'API:\", scheduleData);\n      const result = await createSchedule(scheduleData);\n\n      if (result.success) {\n        toast.success(\"Planning créé avec succès\");\n        onSubmit && onSubmit(result.schedule);\n      } else {\n        throw new Error(\n          result.error || \"Erreur lors de la création du planning\"\n        );\n      }\n    } catch (error) {\n      console.error(\"Erreur lors de la soumission:\", error);\n      toast.error(error.message || \"Erreur lors de la création du planning\");\n    }\n  };\n\n  if (employeesLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-full\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-indigo-500\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <form onSubmit={handleSubmit} className=\"space-y-6\">\n      <div className=\"grid grid-cols-1 gap-6 sm:grid-cols-2\">\n        <div>\n          <label\n            htmlFor=\"employee\"\n            className=\"block text-sm font-medium text-gray-700\"\n          >\n            Employé\n          </label>\n          <select\n            id=\"employee\"\n            name=\"employee\"\n            value={formData.employeeId}\n            onChange={handleEmployeeChange}\n            className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm\"\n            required\n          >\n            <option value=\"\">Sélectionner un employé</option>\n            {employees.map((employee) => (\n              <option key={employee.id} value={employee.id}>\n                {employee.firstName} {employee.lastName}\n              </option>\n            ))}\n          </select>\n        </div>\n\n        <div>\n          <label\n            htmlFor=\"weekStart\"\n            className=\"block text-sm font-medium text-gray-700\"\n          >\n            Début de semaine\n          </label>\n          <input\n            type=\"date\"\n            id=\"weekStart\"\n            name=\"weekStart\"\n            value={formData.weekStart}\n            onChange={handleWeekStartChange}\n            className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm\"\n            required\n          />\n        </div>\n      </div>\n\n      <div className=\"mt-6\">\n        <WeeklyScheduleGrid\n          scheduleData={[\n            {\n              employeeId: formData.employeeId,\n              days: Object.entries(formData.scheduleData).map(\n                ([day, data]) => ({\n                  day,\n                  ...data,\n                })\n              ),\n            },\n          ]}\n          onScheduleChange={handleScheduleChange}\n        />\n      </div>\n\n      <div className=\"mt-6 flex justify-end space-x-3\">\n        <button\n          type=\"button\"\n          onClick={onCancel}\n          className=\"rounded-md border border-gray-300 bg-white px-4 py-2 text-sm font-medium text-gray-700 shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2\"\n        >\n          Annuler\n        </button>\n        <button\n          type=\"submit\"\n          className=\"inline-flex justify-center rounded-md border border-transparent bg-indigo-600 px-4 py-2 text-sm font-medium text-white shadow-sm hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2\"\n        >\n          Créer le planning\n        </button>\n      </div>\n    </form>\n  );\n};\n\nWeeklyScheduleForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n  onCancel: PropTypes.func.isRequired,\n};\n\nexport default WeeklyScheduleForm;\n","import PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\n\nconst HeaderContainer = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 2rem;\n  padding-bottom: 1rem;\n  border-bottom: 1px solid ${({ theme }) => theme.colors.border || \"#e0e0e0\"};\n`;\n\nconst Title = styled.h1`\n  font-size: 1.75rem;\n  font-weight: 600;\n  margin: 0;\n  color: ${({ theme }) => theme.colors.text?.primary || \"#333\"};\n`;\n\nconst Description = styled.p`\n  margin: 0.5rem 0 0 0;\n  color: ${({ theme }) => theme.colors.text?.secondary || \"#666\"};\n  font-size: 0.875rem;\n`;\n\nconst ActionsContainer = styled.div`\n  display: flex;\n  gap: 0.75rem;\n`;\n\n/**\n * Composant d'en-tête de page avec titre, description et actions\n */\nconst PageHeader = ({ title, description, actions, children }) => {\n  return (\n    <HeaderContainer>\n      <div>\n        <Title>{title}</Title>\n        {description && <Description>{description}</Description>}\n        {children}\n      </div>\n      {actions && <ActionsContainer>{actions}</ActionsContainer>}\n    </HeaderContainer>\n  );\n};\n\nPageHeader.propTypes = {\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string,\n  actions: PropTypes.node,\n  children: PropTypes.node,\n};\n\nexport default PageHeader;\n","import PropTypes from \"prop-types\";\nimport styled, { keyframes } from \"styled-components\";\n\n// Animation de rotation\nconst rotate = keyframes`\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n`;\n\n// Conteneur du spinner\nconst SpinnerContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: ${({ $center }) => ($center ? \"center\" : \"flex-start\")};\n  height: ${({ $center }) => ($center ? \"100%\" : \"auto\")};\n  width: 100%;\n  padding: 1rem;\n`;\n\n// Élément du spinner\nconst SpinnerElement = styled.div`\n  width: ${({ $size }) => {\n    switch ($size) {\n      case \"small\":\n        return \"1.5rem\";\n      case \"large\":\n        return \"3rem\";\n      default:\n        return \"2rem\";\n    }\n  }};\n  height: ${({ $size }) => {\n    switch ($size) {\n      case \"small\":\n        return \"1.5rem\";\n      case \"large\":\n        return \"3rem\";\n      default:\n        return \"2rem\";\n    }\n  }};\n  border: ${({ $size }) => {\n      switch ($size) {\n        case \"small\":\n          return \"2px\";\n        case \"large\":\n          return \"4px\";\n        default:\n          return \"3px\";\n      }\n    }}\n    solid rgba(0, 0, 0, 0.1);\n  border-top: ${({ $size, theme }) => {\n    const borderWidth =\n      $size === \"small\" ? \"2px\" : $size === \"large\" ? \"4px\" : \"3px\";\n    return `${borderWidth} solid ${theme.colors.primary.main}`;\n  }};\n  border-radius: 50%;\n  animation: ${rotate} 1s linear infinite;\n`;\n\n// Texte du spinner\nconst SpinnerText = styled.p`\n  margin-top: 0.5rem;\n  color: ${({ theme }) => theme.colors.text.secondary};\n  font-size: 0.875rem;\n`;\n\n/**\n * Composant Spinner pour indiquer un chargement\n */\nconst Spinner = ({ $center, $size, text }) => {\n  return (\n    <SpinnerContainer $center={$center}>\n      <SpinnerElement $size={$size} />\n      {text && <SpinnerText>{text}</SpinnerText>}\n    </SpinnerContainer>\n  );\n};\n\nSpinner.propTypes = {\n  $center: PropTypes.bool,\n  $size: PropTypes.oneOf([\"small\", \"medium\", \"large\"]),\n  text: PropTypes.string,\n};\n\nSpinner.defaultProps = {\n  $center: false,\n  $size: \"medium\",\n  text: \"\",\n};\n\nexport default Spinner;\n","import DOMPurify from \"dompurify\";\nimport html2canvas from \"html2canvas\";\nimport { jsPDF } from \"jspdf\";\nimport \"jspdf-autotable\";\nimport { useCallback, useEffect, useMemo, useRef, useState } from \"react\";\nimport { toast } from \"react-hot-toast\";\nimport {\n  FaArrowLeft,\n  FaArrowRight,\n  FaCalendarDay,\n  FaFilePdf,\n  FaPlus,\n} from \"react-icons/fa\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport thinkingAnimation from \"../assets/animations/thinking.json\";\nimport EmployeeScheduleForm from \"../components/schedule/EmployeeScheduleForm\";\nimport WeeklyScheduleForm from \"../components/schedule/WeeklyScheduleForm\";\nimport WeeklyScheduleGrid from \"../components/schedule/WeeklyScheduleGrid\";\nimport Button from \"../components/ui/Button\";\nimport Card, { CardContent, CardHeader } from \"../components/ui/Card\";\nimport { FormInput, FormSelect } from \"../components/ui/Form\";\nimport PageHeader from \"../components/ui/PageHeader\";\nimport Spinner from \"../components/ui/Spinner\";\nimport useEmployees from \"../hooks/useEmployees\";\nimport useWeeklySchedules from \"../hooks/useWeeklySchedules\";\nimport {\n  addWeeks,\n  formatDate,\n  formatDateForInput,\n  getDayName,\n  getDaysOfWeek,\n  getWeekEnd,\n  getWeekStart,\n  isWeekend,\n} from \"../utils/dateUtils\";\nimport { standardizeScheduleData } from \"../utils/scheduleUtils\";\n\n// Importer react-lottie avec require pour éviter les problèmes de compatibilité\nconst Lottie = require(\"react-lottie\").default;\n\n// Styles\nconst ScheduleContainer = styled.div`\n  padding: 1rem;\n  display: flex;\n  flex-direction: column;\n  gap: 1.5rem;\n\n  @media (min-width: 768px) {\n    padding: 2rem;\n    gap: 2rem;\n  }\n`;\n\nconst ScheduleHeader = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 1rem;\n  margin-bottom: 0.5rem;\n\n  @media (min-width: 768px) {\n    flex-direction: row;\n    justify-content: space-between;\n    align-items: center;\n    margin-bottom: 1rem;\n  }\n`;\n\nconst ScheduleFilters = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 0.75rem;\n  margin-bottom: 0.75rem;\n\n  @media (min-width: 768px) {\n    flex-direction: row;\n    gap: 1rem;\n    margin-bottom: 1rem;\n  }\n`;\n\nconst WeekNavigation = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 0.75rem;\n  margin-bottom: 0.75rem;\n\n  @media (min-width: 768px) {\n    flex-direction: row;\n    align-items: center;\n    gap: 1rem;\n    margin-bottom: 1rem;\n  }\n`;\n\nconst WeekActions = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 0.5rem;\n`;\n\nconst ActionButton = styled(Button)`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  gap: 0.5rem;\n  transition: all 0.2s ease;\n\n  &:hover {\n    transform: translateY(-2px);\n  }\n`;\n\nconst ExportAllButton = styled(ActionButton)`\n  margin-left: auto;\n\n  @media (max-width: 768px) {\n    margin-left: 0;\n    width: 100%;\n    margin-top: 0.5rem;\n  }\n`;\n\nconst FilterContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 0.5rem;\n  width: 100%;\n\n  @media (min-width: 768px) {\n    min-width: 200px;\n    width: auto;\n  }\n`;\n\n/* Composants styled non utilisés - commentés pour éviter les erreurs ESLint\nconst SummaryContainer = styled.div`\n  margin-top: 1rem;\n  padding: 1rem;\n  background-color: #f9fafb;\n  border-radius: 0.5rem;\n`;\n\nconst SummaryTitle = styled.h3`\n  font-size: 1rem;\n  margin-bottom: 0.5rem;\n`;\n\nconst SummaryItem = styled.div`\n  display: flex;\n  justify-content: space-between;\n  padding: 0.5rem 0;\n  border-bottom: 1px solid #e5e7eb;\n\n  &:last-child {\n    border-bottom: none;\n  }\n`;\n\nconst SummaryLabel = styled.span`\n  font-weight: 500;\n`;\n\nconst SummaryValue = styled.span`\n  font-weight: 600;\n  color: ${(props) => (props.isNegative ? \"#ef4444\" : \"#10b981\")};\n`;\n*/\n\nconst FilterSelect = styled(FormSelect)`\n  width: 100%;\n\n  @media (min-width: 768px) {\n    min-width: 200px;\n    width: auto;\n  }\n`;\n\n/* Composant styled non utilisé - commenté pour éviter les erreurs ESLint\nconst CurrentWeek = styled.div`\n  font-size: 1.1rem;\n  font-weight: 600;\n  text-align: center;\n  width: 100%;\n`;\n*/\n\nconst SearchContainer = styled.div`\n  margin-bottom: 1rem;\n  width: 100%;\n`;\n\nconst EmployeeSearchInput = styled(FormInput)`\n  width: 100%;\n`;\n\nconst NoResultsMessage = styled.div`\n  text-align: center;\n  padding: 2rem;\n  color: ${({ theme }) => theme.colors.text.secondary};\n  font-style: italic;\n`;\n\n/* Composant styled non utilisé - commenté pour éviter les erreurs ESLint\nconst ResponsiveButton = styled(Button)`\n  font-size: 0.85rem;\n  padding: 0.5rem 0.75rem;\n\n  @media (min-width: 768px) {\n    font-size: 1rem;\n    padding: 0.5rem 1rem;\n  }\n`;\n*/\n\nconst PlanningTitle = styled.h2`\n  font-size: 1.5rem;\n  font-weight: 700;\n  color: ${({ theme }) => theme.colors.text.primary};\n  margin: 0;\n`;\n\nconst HeaderLeft = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 1.5rem;\n`;\n\nconst AnimationContainer = styled.div`\n  width: 80px;\n  height: 80px;\n  flex-shrink: 0;\n`;\n\nconst TitleContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\nconst PageTitle = styled.h1`\n  font-size: 2rem;\n  color: ${({ theme }) => theme.colors.text.primary};\n  margin-bottom: 0.5rem;\n`;\n\nconst PageDescription = styled.p`\n  color: ${({ theme }) => theme.colors.text.secondary};\n  font-size: 1.1rem;\n`;\n\n// Fonction utilitaire pour convertir les données existantes au nouveau format\nconst convertToNewFormat = (day) => {\n  // Si le jour a déjà le format attendu, le retourner tel quel\n  if (day.type) {\n    return { ...day };\n  }\n\n  // Sinon, convertir au nouveau format\n  return {\n    type: day.absence ? \"absence\" : \"work\",\n    hours: day.hours || \"0\",\n    absence: day.absence || \"\",\n    note: day.note || \"\",\n    timeSlots:\n      day.timeSlots ||\n      (day.hours && parseFloat(day.hours) > 0\n        ? [{ start: \"09:00\", end: \"17:00\" }]\n        : []),\n  };\n};\n\n/**\n * Page de gestion des plannings hebdomadaires\n */\nconst WeeklySchedulePage = () => {\n  const navigate = useNavigate();\n  const { weekStart: weekStartParam } = useParams();\n\n  // Références pour éviter les boucles infinies\n  const prevScheduleDataRef = useRef(null);\n  const prevFormattedScheduleDataRef = useRef(null);\n\n  // États pour la gestion des plannings\n  const [currentWeekStart, setCurrentWeekStart] = useState(() => {\n    try {\n      // Essayer de créer une date à partir de weekStartParam\n      if (weekStartParam) {\n        const date = new Date(weekStartParam);\n        // Vérifier si la date est valide\n        if (!isNaN(date.getTime())) {\n          return date;\n        }\n      }\n      // Si weekStartParam est invalide ou non fourni, utiliser la date actuelle\n      return getWeekStart(new Date());\n    } catch (error) {\n      console.error(\n        \"Erreur lors de l'initialisation de currentWeekStart:\",\n        error\n      );\n      return getWeekStart(new Date());\n    }\n  });\n  const [scheduleData, setScheduleData] = useState([]);\n  const [editingEmployeeId, setEditingEmployeeId] = useState(null);\n  const [showCreateForm, setShowCreateForm] = useState(false);\n  const [selectedDepartment, setSelectedDepartment] = useState(\"\");\n  const [selectedRole, setSelectedRole] = useState(\"\");\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  // Formater la date de début de semaine pour l'API\n  const formattedWeekStart = useMemo(\n    () => formatDateForInput(currentWeekStart),\n    [currentWeekStart]\n  );\n\n  // Récupérer les employés\n  const {\n    employees,\n    loading: employeesLoading,\n    error: employeesError,\n  } = useEmployees();\n\n  // Récupérer les plannings\n  const {\n    schedules,\n    loading: schedulesLoading,\n    error: schedulesError,\n    fetchSchedules,\n    createSchedule,\n  } = useWeeklySchedules();\n\n  // Formater les données de planning pour le composant WeeklyScheduleGrid\n  const formattedScheduleData = useMemo(() => {\n    if (!schedules || !Array.isArray(schedules)) return [];\n\n    return schedules.map((schedule) => standardizeScheduleData(schedule));\n  }, [schedules]);\n\n  // Mettre à jour les données de planning lorsque les plannings changent\n  useEffect(() => {\n    // Vérifier si les données ont changé pour éviter les boucles infinies\n    const currentScheduleDataStr = JSON.stringify(scheduleData);\n    const currentFormattedScheduleDataStr = JSON.stringify(\n      formattedScheduleData\n    );\n\n    if (\n      prevFormattedScheduleDataRef.current !==\n        currentFormattedScheduleDataStr &&\n      prevScheduleDataRef.current !== currentScheduleDataStr\n    ) {\n      prevFormattedScheduleDataRef.current = currentFormattedScheduleDataStr;\n      prevScheduleDataRef.current = currentScheduleDataStr;\n      setScheduleData(formattedScheduleData);\n    }\n  }, [formattedScheduleData, scheduleData]);\n\n  // Charger les plannings lorsque la semaine change\n  useEffect(() => {\n    fetchSchedules(formattedWeekStart);\n  }, [fetchSchedules, formattedWeekStart]);\n\n  // Gérer les erreurs de chargement des plannings\n  useEffect(() => {\n    if (schedulesError) {\n      toast.error(\"Erreur lors du chargement des plannings\");\n    }\n  }, [schedulesError]);\n\n  // Obtenir l'employé en cours d'édition\n  const editingEmployee = useMemo(() => {\n    if (!editingEmployeeId || !employees) return null;\n    return employees.find((emp) => emp.id === editingEmployeeId) || null;\n  }, [editingEmployeeId, employees]);\n\n  // Extraire les départements uniques\n  const uniqueDepartments = useMemo(() => {\n    if (!employees || !Array.isArray(employees)) return [];\n    const departments = [...new Set(employees.map((emp) => emp.department))];\n    return departments.filter((dept) => dept && dept.trim() !== \"\");\n  }, [employees]);\n\n  // Extraire les rôles uniques\n  const uniqueRoles = useMemo(() => {\n    if (!employees || !Array.isArray(employees)) return [];\n    const roles = [...new Set(employees.map((emp) => emp.role))];\n    return roles.filter((role) => role && role.trim() !== \"\");\n  }, [employees]);\n\n  // Mettre à jour l'URL lorsque la semaine change\n  useEffect(() => {\n    const formattedDate = formatDateForInput(currentWeekStart);\n    navigate(`/weekly-schedule/${formattedDate}`, { replace: true });\n  }, [currentWeekStart, navigate]);\n\n  // Filtrer les employés en fonction des critères\n  const filteredEmployees = useMemo(() => {\n    if (!employees) return [];\n\n    let filtered = Array.isArray(employees) ? [...employees] : [];\n\n    // Filtrer par département si sélectionné\n    if (selectedDepartment) {\n      filtered = filtered.filter(\n        (emp) => emp.department === selectedDepartment\n      );\n    }\n\n    // Filtrer par rôle si sélectionné\n    if (selectedRole) {\n      filtered = filtered.filter((emp) => emp.role === selectedRole);\n    }\n\n    // Filtrer par recherche si saisie\n    if (searchQuery) {\n      const query = searchQuery.toLowerCase();\n      filtered = filtered.filter(\n        (emp) =>\n          emp.firstName.toLowerCase().includes(query) ||\n          emp.lastName.toLowerCase().includes(query) ||\n          (emp.email && emp.email.toLowerCase().includes(query))\n      );\n    }\n\n    return filtered;\n  }, [employees, selectedDepartment, selectedRole, searchQuery]);\n\n  // Fonctions de navigation entre les semaines\n  const goToPreviousWeek = useCallback(() => {\n    setCurrentWeekStart((prev) => addWeeks(prev, -1));\n  }, []);\n\n  const goToNextWeek = useCallback(() => {\n    setCurrentWeekStart((prev) => addWeeks(prev, 1));\n  }, []);\n\n  const goToCurrentWeek = useCallback(() => {\n    setCurrentWeekStart(getWeekStart(new Date()));\n  }, []);\n\n  // Fonction pour gérer l'édition d'un employé\n  const handleEditEmployee = useCallback((employeeId) => {\n    setEditingEmployeeId(employeeId);\n  }, []);\n\n  // Fonction pour annuler l'édition\n  const handleCancelEdit = useCallback(() => {\n    setEditingEmployeeId(null);\n  }, []);\n\n  // Fonction pour gérer la recherche\n  const handleSearchChange = useCallback((e) => {\n    setSearchQuery(e.target.value);\n  }, []);\n\n  // Fonction pour gérer le changement de département\n  const handleDepartmentChange = useCallback((e) => {\n    setSelectedDepartment(e.target.value);\n  }, []);\n\n  // Fonction pour gérer le changement de rôle\n  const handleRoleChange = useCallback((e) => {\n    setSelectedRole(e.target.value);\n  }, []);\n\n  // Fonction pour gérer le changement de planning\n  const handleScheduleChange = useCallback((newScheduleData) => {\n    setScheduleData(newScheduleData);\n  }, []);\n\n  // Fonction pour générer un PDF global de tous les employés\n  const generateAllEmployeesPDF = () => {\n    // Filtrer les employés actifs (non absents toute la semaine)\n    const activeEmployees = filteredEmployees.filter((employee) => {\n      const employeeSchedule = scheduleData.find(\n        (s) => s.employeeId === employee.id\n      );\n      if (!employeeSchedule) return true; // Inclure les employés sans planning\n\n      // Vérifier si l'employé est absent toute la semaine\n      const isAbsentAllWeek = employeeSchedule.days.every(\n        (day) =>\n          day.type === \"absence\" && day.absence && day.absence.trim() !== \"\"\n      );\n      return !isAbsentAllWeek;\n    });\n\n    if (activeEmployees.length === 0) {\n      toast.info(\"Aucun employé actif trouvé pour cette semaine\");\n      return;\n    }\n\n    // Créer un élément temporaire pour le rendu\n    const tempElement = document.createElement(\"div\");\n    tempElement.style.position = \"absolute\";\n    tempElement.style.left = \"-9999px\";\n    tempElement.style.top = \"-9999px\";\n    tempElement.style.width = \"1200px\"; // Plus large pour le format paysage\n\n    // Formater les dates\n    const weekStartDate = new Date(currentWeekStart);\n    const weekEndDate = new Date(currentWeekStart);\n    weekEndDate.setDate(weekEndDate.getDate() + 6);\n\n    const formattedWeekStart = formatDate(weekStartDate);\n    const formattedWeekEnd = formatDate(weekEndDate);\n\n    // Créer le contenu HTML\n    const content = `\n      <div style=\"font-family: Arial, sans-serif; padding: 20px; color: #333;\">\n        <h2 style=\"text-align: center; color: #2563eb;\">Planning Hebdomadaire Global</h2>\n        <h3 style=\"text-align: center; margin-bottom: 20px;\">Du ${formattedWeekStart} au ${formattedWeekEnd}</h3>\n        \n        <div style=\"margin-bottom: 20px;\">\n          <p style=\"margin: 5px 0;\">Département: ${\n            selectedDepartment || \"Tous\"\n          }</p>\n          <p style=\"margin: 5px 0;\">Nombre d'employés: ${\n            activeEmployees.length\n          }</p>\n        </div>\n        \n        <table style=\"width: 100%; border-collapse: collapse; margin-top: 20px;\">\n          <thead>\n            <tr style=\"background-color: #e5e7eb;\">\n              <th style=\"padding: 10px; border: 1px solid #d1d5db; text-align: left;\">Employé</th>\n              ${getDaysOfWeek(currentWeekStart)\n                .map(\n                  (day) => `\n                <th style=\"padding: 10px; border: 1px solid #d1d5db; text-align: center; ${\n                  isWeekend(day) ? \"background-color: #f3f4f6;\" : \"\"\n                }\">\n                  ${getDayName(day, true)} ${formatDate(day, \"dd/MM\")}\n                </th>\n              `\n                )\n                .join(\"\")}\n              <th style=\"padding: 10px; border: 1px solid #d1d5db; text-align: center; background-color: #e5e7eb;\">Total</th>\n            </tr>\n          </thead>\n          <tbody>\n            ${activeEmployees\n              .map((employee) => {\n                const employeeSchedule = scheduleData.find(\n                  (s) => s.employeeId === employee.id\n                );\n                const days = employeeSchedule\n                  ? employeeSchedule.days.map((day) => ({\n                      isAbsent:\n                        day.type === \"absence\" &&\n                        day.absence &&\n                        day.absence.trim() !== \"\",\n                      absenceReason: day.absence || \"\",\n                      hours: day.hours || \"0\",\n                      timeSlots: day.timeSlots || [],\n                      notes: day.note || \"\",\n                    }))\n                  : Array(7)\n                      .fill()\n                      .map(() => ({\n                        isAbsent: false,\n                        absenceReason: \"\",\n                        hours: \"0\",\n                        timeSlots: [],\n                        notes: \"\",\n                      }));\n\n                // Calculer le total des heures\n                const totalHours = days.reduce((sum, day) => {\n                  return sum + (day.isAbsent ? 0 : parseFloat(day.hours || 0));\n                }, 0);\n\n                // Déterminer la couleur du total (rouge si < heures contractuelles, vert si >=)\n                const totalColor =\n                  totalHours < employee.contractHours ? \"#ef4444\" : \"#10b981\";\n\n                return `\n                <tr>\n                  <td style=\"padding: 10px; border: 1px solid #d1d5db; font-weight: bold;\">\n                    ${employee.firstName} ${employee.lastName}<br>\n                    <span style=\"font-weight: normal; font-size: 0.9em;\">${\n                      employee.role\n                    }</span>\n                  </td>\n                  ${days\n                    .map((day, index) => {\n                      const dayDate = new Date(currentWeekStart);\n                      dayDate.setDate(dayDate.getDate() + index);\n                      const isWeekendDay = isWeekend(dayDate);\n\n                      return `\n                      <td style=\"padding: 8px; border: 1px solid #d1d5db; text-align: center; ${\n                        isWeekendDay ? \"background-color: #f9fafb;\" : \"\"\n                      }\">\n                        ${\n                          day.isAbsent\n                            ? `<span style=\"color: #ef4444; font-weight: bold;\">${\n                                day.absenceReason || \"Absent\"\n                              }</span>`\n                            : `\n                            <div style=\"font-weight: bold; font-size: 1.2em;\">${(\n                              day.timeSlots || []\n                            )\n                              .map((slot) => `${slot.start}-${slot.end}`)\n                              .join(\"<br>\")}</div>\n                            <div style=\"font-size: 0.8em; margin-top: 3px;\">${\n                              day.hours\n                            }h</div>\n                            ${\n                              day.notes\n                                ? `<div style=\"font-style: italic; font-size: 0.8em; color: #6b7280;\">${DOMPurify.sanitize(\n                                    day.notes\n                                  )}</div>`\n                                : \"\"\n                            }\n                          `\n                        }\n                      </td>\n                    `;\n                    })\n                    .join(\"\")}\n                  <td style=\"padding: 10px; border: 1px solid #d1d5db; text-align: center; font-weight: bold; color: ${totalColor};\">\n                    ${totalHours.toFixed(1)}h<br>\n                    <span style=\"font-size: 0.8em; font-weight: normal;\">(${\n                      employee.contractHours\n                    }h)</span>\n                  </td>\n                </tr>\n              `;\n              })\n              .join(\"\")}\n          </tbody>\n        </table>\n      </div>\n    `;\n\n    // Ajouter le contenu à l'élément temporaire\n    tempElement.innerHTML = DOMPurify.sanitize(content);\n    document.body.appendChild(tempElement);\n\n    // Générer le PDF\n    html2canvas(tempElement, {\n      scale: 1,\n      useCORS: true,\n      logging: false,\n    }).then((canvas) => {\n      const imgData = canvas.toDataURL(\"image/png\");\n      const pdf = new jsPDF(\"l\", \"mm\", \"a4\"); // Format paysage\n      const pdfWidth = pdf.internal.pageSize.getWidth();\n      const ratio = canvas.width / canvas.height;\n      const imgWidth = pdfWidth;\n      const imgHeight = imgWidth / ratio;\n\n      pdf.addImage(imgData, \"PNG\", 0, 0, imgWidth, imgHeight);\n      pdf.save(\n        `Planning_Global_${formatDate(currentWeekStart, \"yyyy-MM-dd\")}.pdf`\n      );\n\n      // Nettoyer\n      document.body.removeChild(tempElement);\n    });\n  };\n\n  // Ajouter la fonction de gestion de création\n  const handleCreateSchedule = async (formData) => {\n    try {\n      const result = await createSchedule(formData);\n      if (result.success) {\n        setShowCreateForm(false);\n        await fetchSchedules(formData.weekStart);\n        toast.success(\"Planning créé avec succès\");\n      } else {\n        toast.error(result.error || \"Erreur lors de la création du planning\");\n      }\n    } catch (error) {\n      console.error(\"Erreur lors de la création du planning:\", error);\n      toast.error(\"Erreur lors de la création du planning\");\n    }\n  };\n\n  // Afficher un spinner pendant le chargement\n  if (employeesLoading || schedulesLoading) {\n    return (\n      <Spinner $center={true} $size=\"large\" text=\"Chargement du planning...\" />\n    );\n  }\n\n  return (\n    <div>\n      <PageHeader title=\"Planning Hebdomadaire\" />\n\n      <ScheduleContainer>\n        <ScheduleHeader>\n          <HeaderLeft>\n            <AnimationContainer>\n              <Lottie\n                options={{\n                  loop: true,\n                  autoplay: true,\n                  animationData: thinkingAnimation,\n                  rendererSettings: {\n                    preserveAspectRatio: \"xMidYMid slice\",\n                  },\n                }}\n                height={80}\n                width={80}\n              />\n            </AnimationContainer>\n            <TitleContainer>\n              <PageTitle>Planning Hebdomadaire</PageTitle>\n              <PageDescription>\n                Gérez les horaires de travail de vos employés\n              </PageDescription>\n            </TitleContainer>\n          </HeaderLeft>\n          <div>\n            <WeekNavigation>\n              <div>\n                <h3>\n                  Semaine du {formatDate(currentWeekStart)} au{\" \"}\n                  {formatDate(getWeekEnd(currentWeekStart))}\n                </h3>\n              </div>\n              <WeekActions>\n                <ActionButton variant=\"outline\" onClick={goToPreviousWeek}>\n                  <FaArrowLeft /> Semaine précédente\n                </ActionButton>\n                <ActionButton variant=\"outline\" onClick={goToCurrentWeek}>\n                  <FaCalendarDay /> Semaine actuelle\n                </ActionButton>\n                <ActionButton variant=\"outline\" onClick={goToNextWeek}>\n                  Semaine suivante <FaArrowRight />\n                </ActionButton>\n                <ActionButton\n                  variant=\"primary\"\n                  onClick={() => setShowCreateForm(true)}\n                >\n                  <FaPlus /> Nouveau planning\n                </ActionButton>\n                <ExportAllButton\n                  variant=\"secondary\"\n                  onClick={generateAllEmployeesPDF}\n                >\n                  <FaFilePdf /> Exporter planning global\n                </ExportAllButton>\n              </WeekActions>\n            </WeekNavigation>\n          </div>\n        </ScheduleHeader>\n\n        {!editingEmployee && (\n          <>\n            <SearchContainer>\n              <EmployeeSearchInput\n                type=\"text\"\n                placeholder=\"Rechercher un employé par nom, prénom ou email...\"\n                value={searchQuery}\n                onChange={handleSearchChange}\n              />\n            </SearchContainer>\n\n            <ScheduleFilters>\n              <FilterContainer>\n                <FilterSelect\n                  value={selectedDepartment}\n                  onChange={handleDepartmentChange}\n                  placeholder=\"Tous les départements\"\n                >\n                  <option value=\"\">Tous les départements</option>\n                  {uniqueDepartments.map((dept) => (\n                    <option key={dept} value={dept}>\n                      {dept}\n                    </option>\n                  ))}\n                </FilterSelect>\n              </FilterContainer>\n\n              <FilterContainer>\n                <FilterSelect\n                  value={selectedRole}\n                  onChange={handleRoleChange}\n                  placeholder=\"Tous les rôles\"\n                >\n                  <option value=\"\">Tous les rôles</option>\n                  {uniqueRoles.map((role) => (\n                    <option key={role} value={role}>\n                      {role}\n                    </option>\n                  ))}\n                </FilterSelect>\n              </FilterContainer>\n            </ScheduleFilters>\n\n            <Card>\n              <CardHeader>\n                <PlanningTitle>\n                  {filteredEmployees.length > 1\n                    ? `Plannings hebdomadaires (${filteredEmployees.length})`\n                    : \"Planning hebdomadaire\"}\n                </PlanningTitle>\n              </CardHeader>\n              <CardContent>\n                {filteredEmployees.length === 0 ? (\n                  <NoResultsMessage>\n                    {searchQuery\n                      ? \"Aucun employé trouvé avec cette recherche.\"\n                      : \"Aucun employé trouvé avec les filtres sélectionnés.\"}\n                  </NoResultsMessage>\n                ) : (\n                  <WeeklyScheduleGrid\n                    employees={filteredEmployees}\n                    weekStart={currentWeekStart}\n                    scheduleData={scheduleData}\n                    onChange={handleScheduleChange}\n                    readOnly={true}\n                    onEditEmployee={handleEditEmployee}\n                  />\n                )}\n              </CardContent>\n            </Card>\n          </>\n        )}\n\n        {editingEmployeeId && (\n          <Card>\n            <CardHeader>\n              <div className=\"flex justify-between items-center\">\n                <h2>Modifier le planning</h2>\n                <Button variant=\"secondary\" onClick={handleCancelEdit}>\n                  Annuler\n                </Button>\n              </div>\n            </CardHeader>\n            <CardContent>\n              {editingEmployee && (\n                <EmployeeScheduleForm\n                  employee={editingEmployee}\n                  weekStart={currentWeekStart}\n                  scheduleData={scheduleData}\n                  onSave={handleScheduleChange}\n                  onCancel={handleCancelEdit}\n                />\n              )}\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Ajouter le modal de création */}\n        <WeeklyScheduleForm\n          isOpen={showCreateForm}\n          onClose={() => setShowCreateForm(false)}\n          onSubmit={handleCreateSchedule}\n          employees={employees}\n        />\n      </ScheduleContainer>\n    </div>\n  );\n};\n\nexport default WeeklySchedulePage;\n"],"names":["fadeIn","keyframes","FormContainer","styled","div","_ref","theme","colors","background","primary","_ref2","text","_ref3","mode","FormTitle","h3","_ref4","EmployeeInfo","_ref5","border","EmployeeName","EmployeeDetails","_ref6","secondary","DaysGrid","DayCard","_ref7","$isWeekend","tertiary","_ref8","_ref9","_ref10","DayHeader","_ref11","DayName","_ref12","DayDate","_ref13","InputGroup","InputLabel","label","_ref14","ButtonGroup","ActionButton","Button","TotalHours","_ref15","TimeSlotContainer","TimeSlot","TimeInput","FormInput","_ref16","input","_ref17","_ref18","_ref19","main","_ref20","AddSlotButton","RemoveSlotButton","RadioGroup","RadioLabel","_ref21","RadioInput","_ref22","StyledFormInput","_ref23","_ref24","_ref25","_ref26","_ref27","_ref28","placeholder","calculateDayHours","timeSlots","length","totalHours","forEach","slot","start","end","startParts","split","map","Number","endParts","startDate","Date","setHours","endDate","setDate","getDate","hours","calculateHours","toFixed","_ref29","employee","weekStart","scheduleData","onSave","onCancel","isSubmitting","schedule","setSchedule","useState","getDaysOfWeek","Array","isArray","employeeSchedule","find","item","employeeId","id","days","day","type","absence","note","parseFloat","convertToNewFormat","fill","weekDays","isWeekend","useCallback","dayIndex","handleTypeChange","prevSchedule","newSchedule","handleAbsenceChange","value","handleNoteChange","addTimeSlot","newTimeSlots","removeTimeSlot","slotIndex","splice","updateTimeSlot","field","calculateTotalHours","reduce","total","handleSave","formattedSchedule","updatedScheduleData","_jsxs","children","formatDate","variant","onClick","_jsx","FaTimes","disabled","FaSave","first_name","last_name","department","contractHours","index","_schedule$index","_schedule$index2","_schedule$index3","_schedule$index4","_schedule$index5","_schedule$index5$time","_schedule$index6","_schedule$index7","name","checked","onChange","e","target","standardizeScheduleData","undefined","employee_id","convertDayToStandardFormat","createEmptyDay","isAbsent","trim","prepareScheduleForApi","standardSchedule","schedule_data","JSON","stringify","total_hours","parseScheduleFromApi","apiData","parse","error","console","useWeeklySchedules","schedules","setSchedules","loading","setLoading","setError","api","useApi","socket","isConnected","sendMessage","notifyDataChange","fallbackMode","useWebSocket","useEffect","handleWebSocketMessage","event","data","prevSchedules","some","toast","info","scheduleId","filter","addEventListener","removeEventListener","retryApiCall","async","apiCall","maxRetries","arguments","delay","lastError","retryCount","err","retryDelay","Math","pow","log","Promise","resolve","setTimeout","fetchSchedules","response","get","API_ENDPOINTS","WEEKLY_SCHEDULES","_response$data","ok","Error","message","standardizedSchedules","createSchedule","post","_response$data2","standardizedSchedule","prev","success","errorMessage","updateSchedule","put","_response$data3","deleteSchedule","delete","_response$data4","ScheduleGrid","light","GridCell","HeaderCell","props","sortable","EmployeeCell","TotalCell","DayCell","BreakInfo","HoursValue","AbsenceValue","NoteText","ActionCell","ExportCell","EmployeeRow","WeeklyScheduleGrid","employees","readOnly","onEditEmployee","useTheme","employeesArray","scheduleDataArray","validWeekStart","useMemo","date","isNaN","getTime","sortConfig","setSortConfig","key","direction","daysOfWeek","sortedEmployees","sort","a","b","aValue","bValue","lastName","firstName","toLowerCase","calculateEmployeeTotal","requestSort","getSortIcon","FaSortAmountUp","size","FaSortAmountDown","findEmployeeSchedule","handleEditClick","isEmployeeAbsent","formatDayCell","hasTimeSlots","_Fragment","break","title","getEmployeeHoursCounter","emp","diff","generatePDF","tempElement","document","createElement","style","position","left","top","width","weekStartDate","weekEndDate","formattedWeekStart","formattedWeekEnd","sum","content","role","dayDate","isWeekendDay","getDayName","absenceReason","join","notes","DOMPurify","sanitize","innerHTML","body","appendChild","html2canvas","scale","useCORS","logging","then","canvas","imgData","toDataURL","pdf","jsPDF","pdfWidth","internal","pageSize","getWidth","imgWidth","getHeight","imgHeight","height","addImage","save","removeChild","s","_","color","startsWith","formattedDays","emptyDays","handleGeneratePDF","FaFilePdf","FaEdit","defaultProps","onSubmit","formData","setFormData","format","employeesLoading","useEmployees","className","preventDefault","parseInt","Object","entries","result","htmlFor","selectedEmployeeId","required","onScheduleChange","newScheduleData","HeaderContainer","Title","h1","_theme$colors$text","Description","p","_theme$colors$text2","ActionsContainer","description","actions","rotate","SpinnerContainer","$center","SpinnerElement","$size","SpinnerText","Spinner","Lottie","require","ScheduleContainer","ScheduleHeader","ScheduleFilters","WeekNavigation","WeekActions","ExportAllButton","FilterContainer","FilterSelect","FormSelect","SearchContainer","EmployeeSearchInput","NoResultsMessage","PlanningTitle","h2","HeaderLeft","AnimationContainer","TitleContainer","PageTitle","PageDescription","WeeklySchedulePage","navigate","useNavigate","weekStartParam","useParams","prevScheduleDataRef","useRef","prevFormattedScheduleDataRef","currentWeekStart","setCurrentWeekStart","getWeekStart","setScheduleData","editingEmployeeId","setEditingEmployeeId","showCreateForm","setShowCreateForm","selectedDepartment","setSelectedDepartment","selectedRole","setSelectedRole","searchQuery","setSearchQuery","formatDateForInput","employeesError","schedulesLoading","schedulesError","formattedScheduleData","currentScheduleDataStr","currentFormattedScheduleDataStr","current","editingEmployee","uniqueDepartments","Set","dept","uniqueRoles","formattedDate","replace","filteredEmployees","filtered","query","includes","email","goToPreviousWeek","addWeeks","goToNextWeek","goToCurrentWeek","handleEditEmployee","handleCancelEdit","handleSearchChange","handleDepartmentChange","handleRoleChange","handleScheduleChange","PageHeader","options","loop","autoplay","animationData","thinkingAnimation","rendererSettings","preserveAspectRatio","getWeekEnd","FaArrowLeft","FaCalendarDay","FaArrowRight","FaPlus","generateAllEmployeesPDF","activeEmployees","every","totalColor","Card","CardHeader","CardContent","EmployeeScheduleForm","WeeklyScheduleForm","isOpen","onClose"],"sourceRoot":""}