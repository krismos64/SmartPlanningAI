{"version":3,"file":"static/js/24.b699a290.chunk.js","mappings":"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","sources":["pages/auth/ResetPassword.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport { Link, useNavigate, useParams } from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport { useNotification } from \"../../components/ui/Notification\";\n\n// Composants stylisés\nconst Container = styled.div`\n  max-width: 400px;\n  margin: 2rem auto;\n  padding: 2rem;\n  background-color: ${({ theme }) => theme.colors.surface};\n  border-radius: ${({ theme }) => theme.borderRadius.medium};\n  box-shadow: ${({ theme }) => theme.shadows.medium};\n`;\n\nconst Title = styled.h1`\n  font-size: 1.75rem;\n  margin-bottom: 1.5rem;\n  color: ${({ theme }) => theme.colors.text.primary};\n  text-align: center;\n`;\n\nconst Text = styled.p`\n  color: ${({ theme }) => theme.colors.text.secondary};\n  margin-bottom: 1.5rem;\n  text-align: center;\n  line-height: 1.6;\n`;\n\nconst Form = styled.form`\n  display: flex;\n  flex-direction: column;\n  gap: 1.5rem;\n`;\n\nconst FormGroup = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 0.5rem;\n`;\n\nconst Label = styled.label`\n  font-size: 0.9rem;\n  color: ${({ theme }) => theme.colors.text.secondary};\n`;\n\nconst Input = styled.input`\n  padding: 0.75rem;\n  border: 1px solid\n    ${({ theme, error }) => (error ? theme.colors.error : theme.colors.border)};\n  border-radius: ${({ theme }) => theme.borderRadius.small};\n  background-color: ${({ theme }) => theme.colors.background};\n  color: ${({ theme }) => theme.colors.text.primary};\n\n  &:focus {\n    outline: none;\n    border-color: ${({ theme, error }) =>\n      error ? theme.colors.error : theme.colors.primary};\n    box-shadow: 0 0 0 2px\n      ${({ theme, error }) =>\n        error ? `${theme.colors.error}33` : `${theme.colors.primary}33`};\n  }\n`;\n\nconst ErrorText = styled.span`\n  color: ${({ theme }) => theme.colors.error};\n  font-size: 0.8rem;\n  margin-top: 0.25rem;\n`;\n\nconst Button = styled.button`\n  padding: 0.75rem;\n  background-color: ${({ theme }) => theme.colors.primary};\n  color: white;\n  border: none;\n  border-radius: ${({ theme }) => theme.borderRadius.small};\n  font-weight: 500;\n  cursor: pointer;\n  transition: background-color 0.2s;\n\n  &:hover {\n    background-color: ${({ theme }) => `${theme.colors.primary}dd`};\n  }\n\n  &:disabled {\n    background-color: ${({ theme }) => theme.colors.border};\n    cursor: not-allowed;\n  }\n`;\n\nconst LinkText = styled.div`\n  text-align: center;\n  margin-top: 1.5rem;\n  font-size: 0.9rem;\n  color: ${({ theme }) => theme.colors.text.secondary};\n\n  a {\n    color: ${({ theme }) => theme.colors.primary};\n    text-decoration: none;\n\n    &:hover {\n      text-decoration: underline;\n    }\n  }\n`;\n\nconst SuccessContainer = styled.div`\n  background-color: ${({ theme }) => `${theme.colors.success}22`};\n  border: 1px solid ${({ theme }) => theme.colors.success};\n  border-radius: ${({ theme }) => theme.borderRadius.small};\n  padding: 1rem;\n  margin-bottom: 1.5rem;\n\n  p {\n    color: ${({ theme }) => theme.colors.success};\n    text-align: center;\n    margin: 0;\n  }\n`;\n\nconst ErrorContainer = styled.div`\n  background-color: ${({ theme }) => `${theme.colors.error}22`};\n  border: 1px solid ${({ theme }) => theme.colors.error};\n  border-radius: ${({ theme }) => theme.borderRadius.small};\n  padding: 1rem;\n  margin-bottom: 1.5rem;\n\n  p {\n    color: ${({ theme }) => theme.colors.error};\n    text-align: center;\n    margin: 0;\n  }\n`;\n\n// Composant principal\nconst ResetPassword = () => {\n  const [password, setPassword] = useState(\"\");\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [isSuccess, setIsSuccess] = useState(false);\n  const [isTokenValid, setIsTokenValid] = useState(true);\n  const [isTokenChecked, setIsTokenChecked] = useState(false);\n  const [errors, setErrors] = useState({});\n\n  const { token } = useParams();\n  const navigate = useNavigate();\n  const { showNotification } = useNotification();\n\n  // Vérifier la validité du token\n  useEffect(() => {\n    const verifyToken = async () => {\n      if (!token) {\n        setIsTokenValid(false);\n        setIsTokenChecked(true);\n        return;\n      }\n\n      try {\n        // Simuler une vérification de token (à remplacer par un appel API réel)\n        setTimeout(() => {\n          // Pour la démonstration, on considère le token comme valide\n          setIsTokenValid(true);\n          setIsTokenChecked(true);\n        }, 1000);\n\n        // Code réel à implémenter:\n        // const response = await fetch(`${API_URL}/api/auth/verify-reset-token/${token}`);\n        // if (response.ok) {\n        //   setIsTokenValid(true);\n        // } else {\n        //   setIsTokenValid(false);\n        // }\n        // setIsTokenChecked(true);\n      } catch (error) {\n        setIsTokenValid(false);\n        setIsTokenChecked(true);\n      }\n    };\n\n    verifyToken();\n  }, [token]);\n\n  // Valider le formulaire\n  const validateForm = () => {\n    const newErrors = {};\n\n    if (!password) {\n      newErrors.password = \"Le mot de passe est requis\";\n    } else if (password.length < 8) {\n      newErrors.password =\n        \"Le mot de passe doit contenir au moins 8 caractères\";\n    }\n\n    if (!confirmPassword) {\n      newErrors.confirmPassword = \"La confirmation du mot de passe est requise\";\n    } else if (password !== confirmPassword) {\n      newErrors.confirmPassword = \"Les mots de passe ne correspondent pas\";\n    }\n\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  // Gérer la soumission du formulaire\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    if (!validateForm()) {\n      return;\n    }\n\n    setIsSubmitting(true);\n\n    try {\n      // Simuler une réponse réussie (à remplacer par un appel API réel)\n      setTimeout(() => {\n        setIsSuccess(true);\n        setIsSubmitting(false);\n        showNotification({\n          type: \"success\",\n          title: \"Mot de passe réinitialisé\",\n          message:\n            \"Votre mot de passe a été réinitialisé avec succès. Vous pouvez maintenant vous connecter avec votre nouveau mot de passe.\",\n        });\n\n        // Rediriger vers la page de connexion après 3 secondes\n        setTimeout(() => {\n          navigate(\"/login\");\n        }, 3000);\n      }, 1500);\n\n      // Code réel à implémenter:\n      // const response = await fetch(`${API_URL}/api/auth/reset-password`, {\n      //   method: 'POST',\n      //   headers: {\n      //     'Content-Type': 'application/json',\n      //   },\n      //   body: JSON.stringify({ token, password }),\n      // });\n\n      // if (response.ok) {\n      //   setIsSuccess(true);\n      //   showNotification({\n      //     type: 'success',\n      //     title: 'Mot de passe réinitialisé',\n      //     message: 'Votre mot de passe a été réinitialisé avec succès. Vous pouvez maintenant vous connecter avec votre nouveau mot de passe.'\n      //   });\n      //\n      //   // Rediriger vers la page de connexion après 3 secondes\n      //   setTimeout(() => {\n      //     navigate('/login');\n      //   }, 3000);\n      // } else {\n      //   const errorData = await response.json();\n      //   showNotification({\n      //     type: 'error',\n      //     title: 'Erreur',\n      //     message: errorData.message || 'Une erreur est survenue. Veuillez réessayer.'\n      //   });\n      // }\n    } catch (error) {\n      showNotification({\n        type: \"error\",\n        title: \"Erreur\",\n        message: \"Une erreur est survenue. Veuillez réessayer.\",\n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  // Afficher un écran de chargement pendant la vérification du token\n  if (!isTokenChecked) {\n    return (\n      <Container>\n        <Title>Réinitialisation du mot de passe</Title>\n        <Text>Vérification du lien de réinitialisation...</Text>\n      </Container>\n    );\n  }\n\n  // Afficher une erreur si le token est invalide\n  if (!isTokenValid) {\n    return (\n      <Container>\n        <Title>Lien invalide</Title>\n        <ErrorContainer>\n          <p>Le lien de réinitialisation est invalide ou a expiré.</p>\n        </ErrorContainer>\n        <Text>\n          Veuillez demander un nouveau lien de réinitialisation de mot de passe.\n        </Text>\n        <LinkText>\n          <Link to=\"/forgot-password\">Demander un nouveau lien</Link>\n        </LinkText>\n      </Container>\n    );\n  }\n\n  return (\n    <Container>\n      <Title>Réinitialisation du mot de passe</Title>\n\n      {!isSuccess ? (\n        <>\n          <Text>Veuillez créer un nouveau mot de passe pour votre compte.</Text>\n\n          <Form onSubmit={handleSubmit}>\n            <FormGroup>\n              <Label htmlFor=\"password\">Nouveau mot de passe</Label>\n              <Input\n                id=\"password\"\n                type=\"password\"\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n                error={!!errors.password}\n                required\n              />\n              {errors.password && <ErrorText>{errors.password}</ErrorText>}\n            </FormGroup>\n\n            <FormGroup>\n              <Label htmlFor=\"confirmPassword\">Confirmer le mot de passe</Label>\n              <Input\n                id=\"confirmPassword\"\n                type=\"password\"\n                value={confirmPassword}\n                onChange={(e) => setConfirmPassword(e.target.value)}\n                error={!!errors.confirmPassword}\n                required\n              />\n              {errors.confirmPassword && (\n                <ErrorText>{errors.confirmPassword}</ErrorText>\n              )}\n            </FormGroup>\n\n            <Button type=\"submit\" disabled={isSubmitting}>\n              {isSubmitting\n                ? \"Réinitialisation en cours...\"\n                : \"Réinitialiser le mot de passe\"}\n            </Button>\n          </Form>\n        </>\n      ) : (\n        <>\n          <SuccessContainer>\n            <p>Mot de passe réinitialisé avec succès!</p>\n          </SuccessContainer>\n\n          <Text>\n            Votre mot de passe a été réinitialisé. Vous allez être redirigé vers\n            la page de connexion.\n          </Text>\n\n          <LinkText>\n            <Link to=\"/login\">Aller à la page de connexion</Link>\n          </LinkText>\n        </>\n      )}\n    </Container>\n  );\n};\n\nexport default ResetPassword;\n"],"names":["Container","styled","div","_ref","theme","colors","surface","_ref2","borderRadius","medium","_ref3","shadows","Title","h1","_ref4","text","primary","Text","p","_ref5","secondary","Form","form","FormGroup","Label","label","_ref6","Input","input","_ref7","error","border","_ref8","small","_ref9","background","_ref10","_ref11","_ref12","ErrorText","span","_ref13","Button","button","_ref14","_ref15","_ref16","_ref17","LinkText","_ref18","_ref19","SuccessContainer","_ref20","success","_ref21","_ref22","_ref23","ErrorContainer","_ref24","_ref25","_ref26","_ref27","ResetPassword","password","setPassword","useState","confirmPassword","setConfirmPassword","isSubmitting","setIsSubmitting","isSuccess","setIsSuccess","isTokenValid","setIsTokenValid","isTokenChecked","setIsTokenChecked","errors","setErrors","token","useParams","navigate","useNavigate","showNotification","useNotification","useEffect","async","setTimeout","verifyToken","_jsxs","children","_jsx","_Fragment","Link","to","onSubmit","e","preventDefault","validateForm","newErrors","length","Object","keys","type","title","message","htmlFor","id","value","onChange","target","required","disabled"],"sourceRoot":""}