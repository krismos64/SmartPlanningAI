version: "3.8"

services:
  # Service frontend (React)
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: smartplanning-frontend
    restart: unless-stopped
    ports:
      - "8080:80"
    depends_on:
      - backend
    networks:
      - app-network
    volumes:
      - frontend-build:/usr/share/nginx/html
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
    environment:
      - REACT_APP_API_URL=http://backend:5001
      - REACT_APP_FRONTEND_URL=http://localhost:8080

  # Service backend (Node.js)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: smartplanning-backend
    restart: unless-stopped
    ports:
      - "5001:5001"
    depends_on:
      - db
    networks:
      - app-network
    volumes:
      - backend-data:/app/logs
    environment:
      - NODE_ENV=production
      - DB_HOST=db
      - DB_USER=smartplanning
      - DB_PASSWORD=smartplanning_password
      - DB_NAME=smartplanningai
      - PORT=5001
      - JWT_SECRET=smartplanningai_secret_key
      - FRONTEND_URL=http://frontend

  # Service base de données (MySQL)
  db:
    image: mysql:8.0
    container_name: smartplanning-db
    restart: unless-stopped
    ports:
      - "3306:3306"
    networks:
      - app-network
    volumes:
      - db-data:/var/lib/mysql
      - ./create_procedure.sql:/docker-entrypoint-initdb.d/01-create_procedure.sql
      - ./drop_triggers.sql:/docker-entrypoint-initdb.d/02-drop_triggers.sql
    environment:
      - MYSQL_DATABASE=smartplanningai
      - MYSQL_USER=smartplanning
      - MYSQL_PASSWORD=smartplanning_password
      - MYSQL_ROOT_PASSWORD=root_password

  # Service de déploiement continu
  watchtower:
    image: containrrr/watchtower
    container_name: smartplanning-watchtower
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command: --interval 30 --cleanup smartplanning-frontend smartplanning-backend
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  frontend-build:
  backend-data:
  db-data:
