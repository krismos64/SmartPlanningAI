const API_BASE_URL = process.env.REACT_APP_API_URL || "http://localhost:5001";

// Nom de cl√© utilis√©e pour stocker le token CSRF dans localStorage
const CSRF_TOKEN_KEY = "csrf_token";

/**
 * G√©n√®re l'URL compl√®te pour un endpoint API
 * @param {string} path - Chemin relatif de l'API
 * @returns {string} URL compl√®te
 */
export function getApiUrl(path = "") {
  // Si le chemin est d√©j√† une URL compl√®te, la retourner telle quelle
  if (path.startsWith("http")) {
    return path;
  }

  // Liste des endpoints qui ne n√©cessitent pas le pr√©fixe /api
  const noApiPrefixEndpoints = ["/csrf-token", "/ping"];

  // Si le chemin est vide, retourner l'URL de base
  if (!path) {
    return API_BASE_URL || "http://localhost:5001";
  }

  // Normaliser le chemin pour s'assurer qu'il commence par /
  const normalizedPath = path.startsWith("/") ? path : `/${path}`;

  // V√©rifier si le chemin pointe vers une URL d'API standard
  // 1. Les chemins qui commencent d√©j√† par /api
  // 2. Les chemins qui sont dans la liste des exceptions
  if (
    normalizedPath.startsWith("/api") ||
    noApiPrefixEndpoints.includes(normalizedPath)
  ) {
    return `${API_BASE_URL}${normalizedPath}`;
  }

  // V√©rifier si le chemin est un endpoint racine comme "vacations" ou "employees"
  // Tous ces endpoints devraient √™tre pr√©fix√©s par /api
  return `${API_BASE_URL}/api${normalizedPath}`;
}

/**
 * Cache en m√©moire pour le token CSRF (variable globale au module)
 */
let csrfTokenCache = null;
let csrfTokenTimestamp = 0;

// Dur√©e de vie du token en m√©moire (20 minutes)
const TOKEN_EXPIRY = 20 * 60 * 1000;

/**
 * V√©rifie si le token CSRF en cache est encore valide
 * @returns {boolean} true si le token est valide, false sinon
 */
function isTokenCacheValid() {
  return csrfTokenCache && Date.now() - csrfTokenTimestamp < TOKEN_EXPIRY;
}

/**
 * R√©cup√®re le token CSRF stock√© soit en m√©moire soit dans localStorage
 * @returns {string|null} Le token CSRF ou null s'il n'existe pas
 */
export function getStoredCsrfToken() {
  // V√©rifier d'abord le cache m√©moire qui est plus rapide
  if (isTokenCacheValid()) {
    return csrfTokenCache;
  }

  // Ensuite v√©rifier localStorage
  const storedToken = localStorage.getItem(CSRF_TOKEN_KEY);

  // Si trouv√© dans localStorage, rafra√Æchir le cache m√©moire
  if (storedToken) {
    csrfTokenCache = storedToken;
    csrfTokenTimestamp = Date.now();
    return storedToken;
  }

  return null;
}

/**
 * Sauvegarde le token CSRF dans localStorage et dans le cache m√©moire
 * @param {string} token - Le token CSRF √† sauvegarder
 */
export function saveTokenToStorage(token) {
  if (!token) return;

  // Mettre √† jour le cache en m√©moire
  csrfTokenCache = token;
  csrfTokenTimestamp = Date.now();

  // Sauvegarder dans localStorage pour persistance
  try {
    localStorage.setItem(CSRF_TOKEN_KEY, token);
  } catch (error) {
    console.warn(
      "‚ùå [CSRF] Erreur lors de la sauvegarde du token dans localStorage:",
      error
    );
  }
}

/**
 * Configuration par d√©faut pour toutes les requ√™tes fetch
 * @returns {Object} Configuration fetch par d√©faut avec credentials
 */
function getDefaultFetchConfig() {
  return {
    credentials: "include", // Important pour envoyer/recevoir les cookies
    headers: {
      Accept: "application/json",
      "Content-Type": "application/json",
      "X-Requested-With": "XMLHttpRequest",
    },
  };
}

/**
 * Effectue une requ√™te pour r√©cup√©rer un token CSRF avec retry
 * @param {number} maxRetries - Nombre maximum de tentatives (d√©faut: 3)
 * @param {number} retryDelay - D√©lai entre les tentatives en ms (d√©faut: 1000)
 * @returns {Promise<string|null>} Le token CSRF ou null en cas d'erreur
 */
export async function fetchCsrfTokenRobust(maxRetries = 3, retryDelay = 1000) {
  // V√©rifier d'abord le cache pour √©viter des requ√™tes inutiles
  if (isTokenCacheValid()) {
    console.log("‚ôªÔ∏è [CSRF] Token valide pr√©sent en cache m√©moire");
    return csrfTokenCache;
  }

  // V√©rifier ensuite dans localStorage
  const stored = localStorage.getItem(CSRF_TOKEN_KEY);
  if (stored) {
    console.log("üì¶ [CSRF] Token r√©cup√©r√© depuis localStorage");
    csrfTokenCache = stored;
    csrfTokenTimestamp = Date.now();
    return stored;
  }

  console.log("üîÑ [CSRF] R√©cup√©ration d'un nouveau token...");

  // Tentatives de r√©cup√©ration avec retry
  let attempt = 0;
  let lastError = null;

  while (attempt < maxRetries) {
    try {
      const response = await fetch(
        getApiUrl("/csrf-token"),
        getDefaultFetchConfig()
      );

      if (!response.ok) {
        throw new Error(`Erreur HTTP: ${response.status}`);
      }

      const data = await response.json();

      if (data && data.csrfToken) {
        // Sauvegarder le token
        saveTokenToStorage(data.csrfToken);
        console.log("‚úÖ [CSRF] Token r√©cup√©r√© et mis en cache");

        // V√©rifier si le cookie a √©t√© √©galement d√©fini
        const hasCookie = document.cookie.includes("XSRF-TOKEN");
        console.log(
          `üç™ [CSRF] Cookie XSRF-TOKEN: ${hasCookie ? "Pr√©sent" : "Absent"}`
        );

        return data.csrfToken;
      } else {
        console.warn("‚ö†Ô∏è [CSRF] La r√©ponse ne contient pas de token:", data);
        lastError = new Error("R√©ponse sans token CSRF");
      }
    } catch (error) {
      console.warn(
        `‚ö†Ô∏è [CSRF] Tentative ${attempt + 1}/${maxRetries} √©chou√©e:`,
        error.message
      );
      lastError = error;
    }

    // Attendre avant de r√©essayer (d√©lai exponentiel)
    const backoffDelay = retryDelay * Math.pow(1.5, attempt);
    console.log(
      `‚è±Ô∏è [CSRF] Attente de ${backoffDelay}ms avant nouvelle tentative`
    );
    await new Promise((r) => setTimeout(r, backoffDelay));
    attempt++;
  }

  console.error("‚ùå [CSRF] √âchec apr√®s plusieurs tentatives:", lastError);
  return null;
}

/**
 * Effectue une requ√™te HTTP avec les bonnes pratiques
 * @param {string} url - URL de la requ√™te
 * @param {Object} options - Options fetch
 * @returns {Promise<Response>} R√©ponse de fetch
 */
export async function fetchWithCsrf(url, options = {}) {
  // Fusionner avec la configuration par d√©faut
  const config = {
    ...getDefaultFetchConfig(),
    ...options,
    headers: {
      ...getDefaultFetchConfig().headers,
      ...options.headers,
    },
  };

  // Ajouter le token CSRF s'il existe
  const csrfToken = await getStoredCsrfToken();
  if (csrfToken && !config.headers["X-CSRF-Token"]) {
    config.headers["X-CSRF-Token"] = csrfToken;
  }

  // Effectuer la requ√™te
  try {
    const response = await fetch(getApiUrl(url), config);

    // V√©rifier si un nouveau token CSRF est pr√©sent dans la r√©ponse
    try {
      const data = await response.clone().json();
      if (data && data.csrfToken) {
        saveTokenToStorage(data.csrfToken);
      }
    } catch (e) {
      // Ignorer les erreurs de parsing JSON
    }

    return response;
  } catch (error) {
    console.error(`‚ùå [API] Erreur lors de la requ√™te vers ${url}:`, error);
    throw error;
  }
}

// Exporter les fonctions d'API courantes
export const api = {
  async get(url, options = {}) {
    return fetchWithCsrf(url, { method: "GET", ...options });
  },

  async post(url, data = {}, options = {}) {
    return fetchWithCsrf(url, {
      method: "POST",
      body: JSON.stringify(data),
      ...options,
    });
  },

  async put(url, data = {}, options = {}) {
    return fetchWithCsrf(url, {
      method: "PUT",
      body: JSON.stringify(data),
      ...options,
    });
  },

  async delete(url, options = {}) {
    return fetchWithCsrf(url, { method: "DELETE", ...options });
  },
};
