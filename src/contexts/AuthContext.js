import {
  createContext,
  useCallback,
  useContext,
  useEffect,
  useState,
} from "react";
import styled from "styled-components";
import axiosInstance, { apiRequest } from "../config/api";
import useWebSocket from "../hooks/useWebSocket";
import {
  fetchCsrfTokenRobust as fetchCsrfToken,
  getApiUrl,
  getStoredCsrfToken,
  saveTokenToStorage,
} from "../utils/api";
import { getCookie } from "../utils/cookies";

// URL de l'API d√©finie ici mais utilis√©e via getApiUrl() plus loin
// const API_URL = getApiUrl();

console.log("üß™ axiosInstance =", axiosInstance);

// Style de la modale d'inactivit√©
const StyledInactivityModal = styled.div`
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0, 0, 0, 0.6);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 9999;
`;

const StyledModalContent = styled.div`
  background-color: white;
  border-radius: 8px;
  padding: 2rem;
  max-width: 500px;
  width: 90%;
  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
  text-align: center;

  h2 {
    color: #e74c3c;
    margin-bottom: 1rem;
  }

  p {
    margin-bottom: 1rem;
    color: #333;
  }

  button {
    background-color: #3498db;
    border: none;
    color: white;
    padding: 0.75rem 1.5rem;
    font-size: 1rem;
    border-radius: 4px;
    cursor: pointer;

    &:hover {
      background-color: #2980b9;
    }
  }
`;

const AuthContext = createContext({
  isAuthenticated: false,
  isLoading: true,
  user: null,
  token: null,
  getToken: async () => {},
  login: async () => {},
  loginWithGoogle: async () => {},
  logout: async () => {},
  register: async () => {},
  loginError: null,
  updateUser: async () => {},
  requestAccountDeletion: async () => {},
  confirmAccountDeletion: async () => {},
  preparePasswordChange: async () => {},
  refreshToken: async () => {},
  changePassword: async () => {},
});

export const useAuth = () => useContext(AuthContext);

export const AuthProvider = ({ children }) => {
  // Ces valeurs ne sont plus utilis√©es depuis la d√©sactivation de l'authentification automatique
  // const localStorageToken = localStorage.getItem("token");
  // const localStorageUser = JSON.parse(localStorage.getItem("user") || "null");

  // D√©sactiver l'authentification automatique par localStorage
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [isLoading, setIsLoading] = useState(true);
  const [user, setUser] = useState(null);
  const [token, setToken] = useState(null);
  const [loginError, setLoginError] = useState(null);
  const { notifyDataChange, disconnect } = useWebSocket();
  // const { showNotification } = useNotifications();

  // √âtat pour g√©rer l'inactivit√© de l'utilisateur
  const [lastActivity, setLastActivity] = useState(Date.now());
  const [showInactivityModal, setShowInactivityModal] = useState(false);
  const [inactivityLogoutTimer, setInactivityLogoutTimer] = useState(null);
  const [inactivityCheckTimer, setInactivityCheckTimer] = useState(null);

  // Constantes pour les timeouts d'inactivit√©
  const INACTIVITY_THRESHOLD = 15 * 60 * 1000; // 15 minutes en millisecondes
  const LOGOUT_WARNING_DURATION = 60 * 1000; // 1 minute en millisecondes

  // Fonction pour mettre √† jour les informations utilisateur
  const updateUser = useCallback(
    (userData) => {
      if (!userData) {
        console.error(
          "Tentative de mise √† jour avec des donn√©es utilisateur nulles"
        );
        return null;
      }

      // Mettre √† jour l'√©tat et le stockage local sans affecter de r√¥le par d√©faut
      console.log("Mise √† jour des donn√©es utilisateur:", userData);
      setUser(userData);
      localStorage.setItem("user", JSON.stringify(userData));
      notifyDataChange("user"); // Notifier les autres onglets

      return userData;
    },
    [notifyDataChange]
  );

  // Fonction pour rafra√Æchir le token CSRF - d√©clar√©e t√¥t pour √™tre utilis√©e dans refreshToken
  const refreshCsrfToken = useCallback(async () => {
    console.log("üîÑ Tentative de rafra√Æchissement du token CSRF");

    const MAX_RETRIES = 3;
    let retryCount = 0;
    let success = false;

    // Essayer d'abord avec /auth/reset-csrf qui est plus fiable
    try {
      console.log("üîÑ Tentative avec /auth/reset-csrf...");
      const resetResponse = await fetch(getApiUrl("/auth/reset-csrf"), {
        method: "GET",
        credentials: "include",
      });

      if (resetResponse.ok) {
        const data = await resetResponse.json();
        if (data.csrfToken) {
          saveTokenToStorage(data.csrfToken);
          console.log(
            "‚úÖ Token CSRF r√©cup√©r√© via reset-csrf:",
            data.csrfToken.substring(0, 10) + "..."
          );
          return true;
        }
      } else {
        console.warn(
          `‚ö†Ô∏è /auth/reset-csrf a r√©pondu avec ${resetResponse.status}: ${resetResponse.statusText}`
        );
      }
    } catch (resetError) {
      console.error("‚ùå Erreur avec /auth/reset-csrf:", resetError);
    }

    // Si reset-csrf a √©chou√©, utiliser la m√©thode originale avec plusieurs tentatives
    while (retryCount < MAX_RETRIES && !success) {
      try {
        if (retryCount > 0) {
          console.log(
            `üîÅ Nouvelle tentative (${retryCount}/${MAX_RETRIES}) de r√©cup√©ration du token CSRF`
          );
          // Utiliser un d√©lai ind√©pendant de retryCount dans la fonction setTimeout
          const delay = retryCount * 1000;
          await new Promise((resolve) => setTimeout(resolve, delay));
        }

        // Obtenir un nouveau token CSRF
        const csrfUrl = getApiUrl("/csrf-token");
        const response = await fetch(csrfUrl, {
          method: "GET",
          credentials: "include",
        });

        if (!response.ok) {
          throw new Error(
            `Erreur HTTP lors de la r√©cup√©ration du CSRF: ${response.status}`
          );
        }

        const data = await response.json();
        if (data && data.csrfToken) {
          getStoredCsrfToken(data.csrfToken);
          saveTokenToStorage(data.csrfToken);
          success = true;
          return true;
        }

        const csrfCookie = getCookie("XSRF-TOKEN");
        if (csrfCookie) {
          success = true;
          return true;
        } else {
          retryCount++;
        }
      } catch (error) {
        retryCount++;
        if (retryCount >= MAX_RETRIES) {
          return false;
        }
      }
    }

    return success;
  }, []);

  // D√©claration anticip√©e de logout pour permettre son utilisation dans useCallback
  const logout = useCallback(async () => {
    try {
      localStorage.removeItem("token");
      localStorage.removeItem("user");
      if (disconnect) disconnect();
      setIsAuthenticated(false);
      setUser(null);
      setToken(null);
      return { success: true };
    } catch (error) {
      console.error("‚ùå Erreur lors de la d√©connexion:", error);
      return { success: false };
    }
  }, [disconnect]);

  // D√©claration anticip√©e de refreshToken
  const refreshToken = useCallback(async () => {
    try {
      console.log("Rafra√Æchissement du token d'authentification...");

      // Rafra√Æchir d'abord le token CSRF
      await refreshCsrfToken();

      const response = await apiRequest("/auth/refresh", "POST");
      console.log("R√©ponse de rafra√Æchissement re√ßue:", response);

      if (response && response.success) {
        // R√©cup√©rer le nouveau token
        const newToken = response.token || response.accessToken;
        if (newToken) {
          console.log("Nouveau token re√ßu");
          localStorage.setItem("token", newToken);
          localStorage.setItem("accessToken", newToken);
          setToken(newToken);
        }

        // Mettre √† jour les informations utilisateur si disponibles
        if (response.user) {
          updateUser(response.user);
        }

        return { success: true };
      } else {
        console.warn("√âchec du rafra√Æchissement du token");
        return { success: false };
      }
    } catch (error) {
      console.error("Erreur lors du rafra√Æchissement du token:", error);
      return { success: false };
    }
  }, [refreshCsrfToken, updateUser]);

  // V√©rification du token et restauration de la session au chargement
  useEffect(() => {
    // Nouvelle fonction pour restaurer la session depuis l'API /me
    const restoreSession = async () => {
      try {
        const res = await axiosInstance.get("/auth/verify"); // Appelle le backend pour v√©rifier la session
        const { user } = res.data;
        console.log("üîê Session restaur√©e :", user);
        setUser(user);
        setIsAuthenticated(true);
      } catch (error) {
        console.warn("üö™ Aucune session active, mode invit√©");
        setUser(null);
        setIsAuthenticated(false);
      } finally {
        setIsLoading(false);
      }
    };

    // D√©sactiver la restauration automatique de session
    // restoreSession();

    // Nettoyer les donn√©es d'authentification stock√©es localement
    localStorage.removeItem("token");
    localStorage.removeItem("user");

    // Simplement d√©finir isLoading √† false sans tenter de restaurer la session
    setIsLoading(false);

    // Effacer les donn√©es d'authentification locales pour s'assurer qu'aucune connexion automatique ne se produit
    if (process.env.NODE_ENV !== "production") {
      console.log(
        "üîí Mode d'authentification manuelle activ√© - pas de restauration automatique de session"
      );
    }
  }, []); // ‚úÖ Une seule fois au montage

  // Fonction pour r√©initialiser le timer d'inactivit√©
  const resetInactivityTimer = useCallback(() => {
    setLastActivity(Date.now());
    setShowInactivityModal(false);

    // Effacer le timer de d√©connexion s'il existe
    if (inactivityLogoutTimer) {
      clearTimeout(inactivityLogoutTimer);
      setInactivityLogoutTimer(null);
    }
  }, [inactivityLogoutTimer]);

  // Fonction pour v√©rifier p√©riodiquement l'inactivit√©
  const checkInactivity = useCallback(() => {
    const now = Date.now();
    const inactiveTime = now - lastActivity;

    if (inactiveTime >= INACTIVITY_THRESHOLD && !showInactivityModal) {
      // L'utilisateur est inactif depuis plus de 15 minutes, afficher la modale
      setShowInactivityModal(true);

      // D√©finir un timer pour d√©connecter apr√®s 1 minute suppl√©mentaire
      const timer = setTimeout(() => {
        // D√©connecter l'utilisateur si toujours inactif
        if (
          Date.now() - lastActivity >=
          INACTIVITY_THRESHOLD + LOGOUT_WARNING_DURATION
        ) {
          console.log("D√©connexion automatique pour inactivit√©");
          logout();
          window.location.href = "/login?reason=inactivity";
        }
      }, LOGOUT_WARNING_DURATION);

      setInactivityLogoutTimer(timer);
    }
  }, [lastActivity, showInactivityModal, logout]);

  // Configurer les √©couteurs d'√©v√©nements pour suivre l'activit√©
  useEffect(() => {
    // Uniquement initialiser les √©couteurs si l'utilisateur est authentifi√©
    if (!isAuthenticated) return;

    // Liste des √©v√©nements √† suivre pour l'activit√© de l'utilisateur
    const activityEvents = [
      "mousedown",
      "mousemove",
      "keypress",
      "scroll",
      "touchstart",
      "click",
      "keydown",
    ];

    // Fonction de gestionnaire pour r√©initialiser le timer
    const handleUserActivity = () => {
      resetInactivityTimer();
    };

    // Ajouter les √©couteurs d'√©v√©nements
    activityEvents.forEach((event) => {
      window.addEventListener(event, handleUserActivity);
    });

    // Configurer une v√©rification p√©riodique de l'inactivit√© (toutes les minutes)
    const checkTimer = setInterval(checkInactivity, 60 * 1000);
    setInactivityCheckTimer(checkTimer);

    // Nettoyer les √©couteurs et timers au d√©montage
    return () => {
      activityEvents.forEach((event) => {
        window.removeEventListener(event, handleUserActivity);
      });

      if (inactivityLogoutTimer) {
        clearTimeout(inactivityLogoutTimer);
      }

      if (checkTimer) {
        clearInterval(checkTimer);
      }
    };
  }, [isAuthenticated, resetInactivityTimer, checkInactivity]); // D√©pend uniquement de isAuthenticated

  // Configurer le rafra√Æchissement p√©riodique du token
  useEffect(() => {
    // Uniquement initialiser si l'utilisateur est authentifi√©
    if (isAuthenticated) {
      // Fonction pour v√©rifier et rafra√Æchir le token si n√©cessaire
      const checkTokenExpiration = async () => {
        const token = localStorage.getItem("token");
        if (!token) return;

        try {
          // D√©coder le payload du token pour obtenir l'expiration
          const payload = JSON.parse(atob(token.split(".")[1]));
          const expirationTime = payload.exp * 1000; // Convertir en millisecondes
          const currentTime = Date.now();

          // Si le token expire dans moins de 5 minutes, le rafra√Æchir
          if (expirationTime - currentTime < 5 * 60 * 1000) {
            console.log("Token proche de l'expiration, rafra√Æchissement...");
            await refreshToken();
          }
        } catch (error) {
          console.error(
            "Erreur lors de la v√©rification de l'expiration du token:",
            error
          );
        }
      };

      // V√©rifier imm√©diatement au chargement
      checkTokenExpiration();

      // Puis v√©rifier toutes les 5 minutes
      const tokenCheckInterval = setInterval(
        checkTokenExpiration,
        5 * 60 * 1000
      );

      // Nettoyer l'intervalle au d√©montage
      return () => {
        clearInterval(tokenCheckInterval);
      };
    }
  }, [isAuthenticated, refreshToken]);

  // Au chargement initial, obtenir un token CSRF et v√©rifier l'authentification
  useEffect(() => {
    // Initialiser le token CSRF
    const initApp = async () => {
      try {
        // Variable pour suivre la progression de l'initialisation
        console.log("üöÄ Initialisation de l'application...");

        // 1. R√©cup√©rer un token CSRF au d√©marrage (une seule fois)
        await fetchCsrfToken();
        console.log(
          "‚úÖ CSRF Token initial r√©cup√©r√© :",
          getCookie("XSRF-TOKEN")
        );

        // 2. Ne pas v√©rifier l'authentification automatiquement
        // await checkInitialAuth(); // D√©sactiv√© pour mode d'authentification manuelle

        console.log(
          "‚úÖ Initialisation compl√®te - mode authentification manuelle"
        );
        setIsLoading(false);
      } catch (error) {
        console.error(
          "‚ùå Erreur lors de l'initialisation de l'application:",
          error
        );
        setIsLoading(false);
      }
    };

    initApp();
  }, []); // ‚úÖ Une seule fois au montage

  // V√©rifier l'authentification initiale - cette fonction n'est plus utilis√©e
  const checkInitialAuth = async () => {
    console.log(
      "Mode d'authentification manuelle activ√© - pas de v√©rification automatique"
    );
    setIsLoading(false);
    return false;
  };

  // Fonction pour v√©rifier et renouveler le token si n√©cessaire
  const ensureValidToken = async () => {
    // R√©cup√©rer le token du localStorage
    let currentToken = localStorage.getItem("token");

    if (!currentToken) {
      console.warn("Aucun token d'authentification trouv√©");
      setIsAuthenticated(false);
      setUser(null);
      setToken(null);
      return null;
    }

    return currentToken;
  };

  // Fonction pour r√©cup√©rer le token authentifi√©
  const getToken = async () => {
    return await ensureValidToken();
  };

  // Fonction pour mettre √† jour le profil utilisateur
  const updateUserProfile = async (userData) => {
    try {
      console.log("üìù Tentative de mise √† jour du profil avec:", userData);

      const response = await apiRequest("/user/profile", "PUT", userData);
      console.log("üìù R√©ponse de mise √† jour du profil:", response);

      if (response && response.success) {
        // Mettre √† jour les informations utilisateur localement
        const updatedUser = {
          ...user,
          ...response.user,
        };

        console.log("‚úÖ Donn√©es utilisateur mises √† jour:", updatedUser);

        // Mettre √† jour √† la fois dans le state et dans le localStorage
        setUser(updatedUser);
        localStorage.setItem("user", JSON.stringify(updatedUser));

        // Notifier autres onglets/fen√™tres
        notifyDataChange("user");

        return {
          success: true,
          message: "Profil mis √† jour avec succ√®s",
          user: updatedUser,
        };
      } else {
        console.error("‚ùå √âchec de mise √† jour du profil:", response?.message);
        return {
          success: false,
          message:
            response?.message || "Erreur lors de la mise √† jour du profil",
        };
      }
    } catch (error) {
      console.error("‚ùå Erreur lors de la mise √† jour du profil:", error);
      return {
        success: false,
        message: error.message || "Erreur lors de la mise √† jour du profil",
      };
    }
  };

  // Fonction pour se connecter
  const login = async (email, password) => {
    let csrfToken = getStoredCsrfToken();
    if (!csrfToken) {
      csrfToken = getCookie("XSRF-TOKEN");
    }

    try {
      if (!csrfToken) {
        // Essai avec reset-csrf d'abord
        try {
          const resetResponse = await fetch(getApiUrl("/auth/reset-csrf"), {
            method: "GET",
            credentials: "include",
          });

          if (resetResponse.ok) {
            const data = await resetResponse.json();
            if (data.csrfToken) {
              saveTokenToStorage(data.csrfToken);
              csrfToken = data.csrfToken;
              console.log(
                "‚úÖ Nouveau token CSRF r√©cup√©r√© via reset-csrf:",
                csrfToken.substring(0, 10) + "..."
              );
            }
          } else {
            console.warn(
              "‚ö†Ô∏è √âchec de r√©cup√©ration d'un nouveau token via reset-csrf"
            );
          }
        } catch (resetError) {
          console.error(
            "‚ùå Erreur lors de la r√©cup√©ration du token via reset-csrf:",
            resetError
          );
        }

        // Si reset-csrf a √©chou√©, essayer avec csrf-token
        if (!csrfToken) {
          try {
            const csrfResponse = await fetch(getApiUrl("/csrf-token"), {
              method: "GET",
              credentials: "include",
            });

            if (csrfResponse.ok) {
              const data = await csrfResponse.json();
              if (data.csrfToken) {
                saveTokenToStorage(data.csrfToken);
                csrfToken = data.csrfToken;
                console.log(
                  "‚úÖ Nouveau token CSRF r√©cup√©r√© via csrf-token:",
                  csrfToken.substring(0, 10) + "..."
                );
              }
            } else {
              console.warn(
                "‚ö†Ô∏è √âchec de r√©cup√©ration d'un nouveau token via csrf-token"
              );
            }
          } catch (csrfError) {
            console.error(
              "‚ùå Erreur lors de la r√©cup√©ration du token via csrf-token:",
              csrfError
            );
          }
        }

        // Attendre un peu que le cookie soit d√©fini
        await new Promise((resolve) => setTimeout(resolve, 500));

        // V√©rifier le cookie
        const cookieToken = getCookie("XSRF-TOKEN");
        if (cookieToken) {
          console.log(
            "‚úÖ Token CSRF trouv√© dans les cookies:",
            cookieToken.substring(0, 10) + "..."
          );
          csrfToken = cookieToken;
        }
      }

      // V√©rifier qu'on a bien un token CSRF
      if (!csrfToken) {
        throw new Error("‚ùå Impossible de r√©cup√©rer un token CSRF valide");
      }

      console.log(
        "üîê Tentative de connexion avec token CSRF:",
        csrfToken.substring(0, 10) + "..."
      );

      const res = await axiosInstance.post(
        "/auth/login",
        { email, password },
        {
          withCredentials: true,
          headers: {
            "X-CSRF-Token": csrfToken,
          },
        }
      );

      const user = res.data?.user;

      // V√©rifier si les donn√©es utilisateur sont compl√®tes
      if (!user || !user.email) {
        console.error("‚ùå Donn√©es utilisateur incompl√®tes:", user);
        throw new Error("Donn√©es utilisateur incompl√®tes ou invalides");
      }

      console.log("‚úÖ Donn√©es utilisateur compl√®tes:", {
        id: user.id || user._id,
        email: user.email,
        name: user.name || user.username,
        role: user.role,
      });

      // Stocker l'utilisateur dans le localStorage
      localStorage.setItem("user", JSON.stringify(user));

      // Stocker le token si pr√©sent dans la r√©ponse
      if (res.data?.token || res.data?.accessToken) {
        const token = res.data?.token || res.data?.accessToken;
        localStorage.setItem("token", token);
        setToken(token);
        console.log("‚úÖ Token stock√© dans localStorage");
      }

      // Mettre √† jour l'√©tat
      setUser(user);
      setIsAuthenticated(true);
      console.log("‚úÖ Connexion r√©ussie :", user);

      return {
        success: true,
        message: "Connexion r√©ussie",
        user: user,
      };
    } catch (error) {
      console.error(
        "‚ùå Erreur lors de la connexion :",
        error.response?.data?.message || error.message
      );
      setUser(null);
      setIsAuthenticated(false);

      return {
        success: false,
        message:
          error.response?.data?.message ||
          error.message ||
          "Erreur lors de la connexion",
      };
    }
  };

  // Fonction pour s'inscrire
  const register = async (userData) => {
    try {
      setIsLoading(true);
      setLoginError(null);

      // Rafra√Æchir le token CSRF avant l'inscription
      await refreshCsrfToken();

      // Effectuer la requ√™te d'inscription
      const response = await apiRequest("/auth/register", "POST", userData);
      console.log("R√©ponse d'inscription re√ßue:", response);

      if (response && response.success) {
        // R√©cup√©rer le token et les informations utilisateur
        const userToken = response.token || response.accessToken;
        const refreshToken = response.refreshToken;
        const userInfo = response.user;

        console.log("Token re√ßu:", userToken ? "Oui" : "Non");
        console.log("RefreshToken re√ßu:", refreshToken ? "Oui" : "Non");
        console.log("User info re√ßues:", userInfo ? "Oui" : "Non");

        // Stocker le token dans localStorage
        if (userToken) {
          localStorage.setItem("token", userToken);
          setToken(userToken);
        }

        // Mettre √† jour les informations utilisateur
        if (userInfo) {
          updateUser(userInfo);
        }

        setIsAuthenticated(true);
        setLoginError(null);

        return {
          success: true,
          message: "Inscription r√©ussie",
          user: userInfo,
        };
      } else {
        const errorMsg = response?.message || "Erreur lors de l'inscription";
        setLoginError(errorMsg);
        return {
          success: false,
          message: errorMsg,
        };
      }
    } catch (error) {
      console.error("Erreur lors de l'inscription:", error);
      const errorMsg = error.message || "Erreur lors de l'inscription";
      setLoginError(errorMsg);
      return {
        success: false,
        message: errorMsg,
      };
    } finally {
      setIsLoading(false);
    }
  };

  // Fonction pour se connecter avec Google (redirection)
  const loginWithGoogle = async () => {
    try {
      window.location.href = getApiUrl("/auth/google");
      return { success: true };
    } catch (error) {
      console.error("Erreur lors de la redirection vers Google:", error);
      return {
        success: false,
        message: error.message || "Erreur lors de la connexion avec Google",
      };
    }
  };

  // Fonction pour demander la suppression du compte
  const requestAccountDeletion = async () => {
    try {
      // Rafra√Æchir le token CSRF avant la demande
      await refreshCsrfToken();

      const response = await apiRequest(
        "/auth/request-account-deletion",
        "POST"
      );

      return {
        success: true,
        message: response?.message || "Demande de suppression envoy√©e",
      };
    } catch (error) {
      console.error("Erreur lors de la demande de suppression:", error);
      return {
        success: false,
        message:
          error.message || "Erreur lors de la demande de suppression de compte",
      };
    }
  };

  // Fonction pour confirmer la suppression du compte
  const confirmAccountDeletion = async (token) => {
    try {
      // Rafra√Æchir le token CSRF avant la confirmation
      await refreshCsrfToken();

      const response = await apiRequest(
        "/auth/confirm-account-deletion",
        "POST",
        { token }
      );

      // Si la suppression est r√©ussie, d√©connecter l'utilisateur
      if (response && response.success) {
        logout();
      }

      return {
        success: true,
        message: response?.message || "Compte supprim√© avec succ√®s",
      };
    } catch (error) {
      console.error("Erreur lors de la confirmation de suppression:", error);
      return {
        success: false,
        message:
          error.message ||
          "Erreur lors de la confirmation de suppression de compte",
      };
    }
  };

  // Fonction pour changer le mot de passe
  const changePassword = async (currentPassword, newPassword) => {
    try {
      // Rafra√Æchir le token CSRF avant le changement de mot de passe
      await refreshCsrfToken();

      const response = await apiRequest("/users/change-password", "POST", {
        currentPassword,
        newPassword,
      });

      if (response && response.success) {
        return {
          success: true,
          message: response.message || "Mot de passe chang√© avec succ√®s",
        };
      } else {
        return {
          success: false,
          message:
            response?.message || "Erreur lors du changement de mot de passe",
        };
      }
    } catch (error) {
      console.error("Erreur lors du changement de mot de passe:", error);
      return {
        success: false,
        message: error.message || "Erreur lors du changement de mot de passe",
      };
    }
  };

  // Fonction pour pr√©parer le changement de mot de passe
  const preparePasswordChange = useCallback(async () => {
    try {
      // Rafra√Æchir le token CSRF avant de changer le mot de passe
      await refreshCsrfToken();

      return {
        success: true,
        message: "Pr√©paration au changement de mot de passe r√©ussie",
      };
    } catch (error) {
      console.error(
        "Erreur lors de la pr√©paration au changement de mot de passe:",
        error
      );
      return {
        success: false,
        message:
          "Erreur lors de la pr√©paration au changement de mot de passe: " +
          error.message,
      };
    }
  }, [refreshCsrfToken]);

  // Composant pour la modale d'inactivit√©
  const InactivityModal = () => {
    if (!showInactivityModal) return null;

    return (
      <StyledInactivityModal>
        <StyledModalContent>
          <h2>Session inactive</h2>
          <p>
            Vous serez d√©connect√© automatiquement dans 1 minute en raison
            d'inactivit√©.
          </p>
          <button onClick={resetInactivityTimer}>Rester connect√©</button>
        </StyledModalContent>
      </StyledInactivityModal>
    );
  };

  // Valeur du contexte √† fournir
  const contextValue = {
    isAuthenticated,
    isLoading,
    user,
    token,
    getToken,
    login,
    loginWithGoogle,
    logout,
    register,
    loginError,
    updateUser: updateUserProfile,
    requestAccountDeletion,
    confirmAccountDeletion,
    preparePasswordChange,
    refreshToken,
    changePassword,
  };

  return (
    <AuthContext.Provider value={contextValue}>
      {children}
      <InactivityModal />
    </AuthContext.Provider>
  );
};
