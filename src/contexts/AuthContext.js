import axios from "axios";
import { createContext, useContext, useEffect, useState } from "react";
import styled from "styled-components";
import { apiRequest } from "../config/api";
import useWebSocket from "../hooks/useWebSocket";
import {
  fetchCsrfTokenRobust as fetchCsrfToken,
  getApiUrl,
  getCsrfToken,
  getStoredCsrfToken,
} from "../utils/api";

// D√©finir l'URL de l'API
const API_URL = getApiUrl();

// Style de la modale d'inactivit√©
const StyledInactivityModal = styled.div`
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0, 0, 0, 0.6);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 9999;
`;

const StyledModalContent = styled.div`
  background-color: white;
  border-radius: 8px;
  padding: 2rem;
  max-width: 500px;
  width: 90%;
  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
  text-align: center;

  h2 {
    color: #e74c3c;
    margin-bottom: 1rem;
  }

  p {
    margin-bottom: 1rem;
    color: #333;
  }

  button {
    background-color: #3498db;
    border: none;
    color: white;
    padding: 0.75rem 1.5rem;
    font-size: 1rem;
    border-radius: 4px;
    cursor: pointer;

    &:hover {
      background-color: #2980b9;
    }
  }
`;

const AuthContext = createContext({
  isAuthenticated: false,
  isLoading: true,
  user: null,
  token: null,
  getToken: async () => {},
  login: async () => {},
  loginWithGoogle: async () => {},
  logout: async () => {},
  register: async () => {},
  loginError: null,
  updateUser: async () => {},
  requestAccountDeletion: async () => {},
  confirmAccountDeletion: async () => {},
  preparePasswordChange: async () => {},
  refreshToken: async () => {},
  changePassword: async () => {},
});

export const useAuth = () => useContext(AuthContext);

export const AuthProvider = ({ children }) => {
  // V√©rifier si l'utilisateur est d√©j√† authentifi√© dans localStorage
  const localStorageToken = localStorage.getItem("token");
  const localStorageUser = JSON.parse(localStorage.getItem("user") || "null");

  const [isAuthenticated, setIsAuthenticated] = useState(!!localStorageToken);
  const [isLoading, setIsLoading] = useState(true);
  const [user, setUser] = useState(localStorageUser);
  const [token, setToken] = useState(localStorageToken);
  const [loginError, setLoginError] = useState(null);
  const { notifyDataChange, disconnect, connect } = useWebSocket();

  // √âtat pour g√©rer l'inactivit√© de l'utilisateur
  const [lastActivity, setLastActivity] = useState(Date.now());
  const [showInactivityModal, setShowInactivityModal] = useState(false);
  const [inactivityLogoutTimer, setInactivityLogoutTimer] = useState(null);
  const [inactivityCheckTimer, setInactivityCheckTimer] = useState(null);

  // V√©rification du token et restauration de la session au chargement
  useEffect(() => {
    const verifySessionToken = async () => {
      try {
        // R√©cup√©rer le token depuis le localStorage
        const storedToken = localStorage.getItem("token");

        if (!storedToken) {
          console.log("Aucun token trouv√©, mode limit√© activ√©");
          setIsLoading(false);
          return;
        }

        // Appeler l'API pour v√©rifier le token
        const res = await apiRequest("/api/auth/verify", "GET", null, {
          Authorization: `Bearer ${storedToken}`,
        }).catch((error) => {
          console.warn(
            "Erreur lors de la v√©rification du token, continuons en mode limit√©:",
            error
          );
          return { user: null, auth_success: false, valid: false };
        });

        // Si l'utilisateur est trouv√©, restaurer la session
        if (res && res.user) {
          setUser(res.user);
          setIsAuthenticated(true);
          setToken(storedToken);
        } else {
          console.warn("Token invalide ou expir√©, fonctionnalit√©s limit√©es");
          // On laisse quand m√™me le token et l'utilisateur pour permettre l'acc√®s limit√©
          setIsAuthenticated(false);

          // Si on a des informations utilisateur locales, les utiliser pour l'acc√®s limit√©
          if (localStorageUser) {
            setUser(localStorageUser);
          }
        }
      } catch (error) {
        console.warn("Erreur lors de la v√©rification de la session:", error);
        // Au lieu de d√©connecter, on continue avec des fonctionnalit√©s limit√©es
        setIsAuthenticated(false);
      } finally {
        setIsLoading(false);
      }
    };

    // Nouvelle fonction pour restaurer la session depuis l'API /me
    const restoreSession = async () => {
      try {
        setIsLoading(true);

        // R√©cup√©rer le token depuis localStorage
        const token = localStorage.getItem("token");

        if (!token) {
          console.warn(
            "‚ö†Ô∏è [Auth] Token absent dans localStorage, acc√®s invit√©"
          );
          alert("‚ö†Ô∏è Token absent dans localStorage, acc√®s invit√©");
          setIsLoading(false);
          return false;
        }

        console.log(
          `üîÑ [Auth] Tentative de restauration de session avec token: ${token.substring(
            0,
            15
          )}...`
        );

        // Appeler l'API /me avec le token dans l'en-t√™te
        const response = await fetch("/api/me", {
          method: "GET",
          headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${token}`,
          },
          credentials: "include",
        });

        if (!response.ok) {
          console.error(
            `‚ùå [Auth] √âchec de restauration de session: ${response.status}`
          );
          setIsLoading(false);
          return false;
        }

        const userData = await response.json();
        console.log("‚úÖ [Auth] Session restaur√©e:", userData);

        // D√©finir l'utilisateur dans le state
        setUser(userData);
        setIsAuthenticated(true);
        setToken(token);
        setIsLoading(false);
        return true;
      } catch (error) {
        console.error(
          "‚ùå [Auth] Erreur lors de la restauration de session:",
          error
        );
        setIsAuthenticated(false);
        setIsLoading(false);
        return false;
      }
    };

    // Essayer d'abord de restaurer la session, puis v√©rifier le token si n√©cessaire
    restoreSession();
  }, []);

  // Constantes pour les timeouts d'inactivit√©
  const INACTIVITY_THRESHOLD = 15 * 60 * 1000; // 15 minutes en millisecondes
  const LOGOUT_WARNING_DURATION = 60 * 1000; // 1 minute en millisecondes

  // Fonction pour r√©initialiser le timer d'inactivit√©
  const resetInactivityTimer = () => {
    setLastActivity(Date.now());
    setShowInactivityModal(false);

    // Effacer le timer de d√©connexion s'il existe
    if (inactivityLogoutTimer) {
      clearTimeout(inactivityLogoutTimer);
      setInactivityLogoutTimer(null);
    }
  };

  // Fonction pour v√©rifier p√©riodiquement l'inactivit√©
  const checkInactivity = () => {
    const now = Date.now();
    const inactiveTime = now - lastActivity;

    if (inactiveTime >= INACTIVITY_THRESHOLD && !showInactivityModal) {
      // L'utilisateur est inactif depuis plus de 15 minutes, afficher la modale
      setShowInactivityModal(true);

      // D√©finir un timer pour d√©connecter apr√®s 1 minute suppl√©mentaire
      const timer = setTimeout(() => {
        // D√©connecter l'utilisateur si toujours inactif
        if (
          Date.now() - lastActivity >=
          INACTIVITY_THRESHOLD + LOGOUT_WARNING_DURATION
        ) {
          console.log("D√©connexion automatique pour inactivit√©");
          logout();
          window.location.href = "/login?reason=inactivity";
        }
      }, LOGOUT_WARNING_DURATION);

      setInactivityLogoutTimer(timer);
    }
  };

  // Configurer les √©couteurs d'√©v√©nements pour suivre l'activit√©
  useEffect(() => {
    // Uniquement initialiser les √©couteurs si l'utilisateur est authentifi√©
    if (isAuthenticated) {
      // Liste des √©v√©nements √† suivre pour l'activit√© de l'utilisateur
      const activityEvents = [
        "mousedown",
        "mousemove",
        "keypress",
        "scroll",
        "touchstart",
        "click",
        "keydown",
      ];

      // Fonction de gestionnaire pour r√©initialiser le timer
      const handleUserActivity = () => {
        resetInactivityTimer();
      };

      // Ajouter les √©couteurs d'√©v√©nements
      activityEvents.forEach((event) => {
        window.addEventListener(event, handleUserActivity);
      });

      // Configurer une v√©rification p√©riodique de l'inactivit√© (toutes les minutes)
      const checkTimer = setInterval(checkInactivity, 60 * 1000);
      setInactivityCheckTimer(checkTimer);

      // Nettoyer les √©couteurs et timers au d√©montage
      return () => {
        activityEvents.forEach((event) => {
          window.removeEventListener(event, handleUserActivity);
        });

        if (inactivityLogoutTimer) {
          clearTimeout(inactivityLogoutTimer);
        }

        if (checkTimer) {
          clearInterval(checkTimer);
        }
      };
    }
  }, [isAuthenticated, lastActivity]);

  // Configurer le rafra√Æchissement p√©riodique du token
  useEffect(() => {
    // Uniquement initialiser si l'utilisateur est authentifi√©
    if (isAuthenticated) {
      // Fonction pour v√©rifier et rafra√Æchir le token si n√©cessaire
      const checkTokenExpiration = async () => {
        const token = localStorage.getItem("token");
        if (!token) return;

        try {
          // D√©coder le payload du token pour obtenir l'expiration
          const payload = JSON.parse(atob(token.split(".")[1]));
          const expirationTime = payload.exp * 1000; // Convertir en millisecondes
          const currentTime = Date.now();

          // Si le token expire dans moins de 5 minutes, le rafra√Æchir
          if (expirationTime - currentTime < 5 * 60 * 1000) {
            console.log("Token proche de l'expiration, rafra√Æchissement...");
            await refreshToken();
          }
        } catch (error) {
          console.error(
            "Erreur lors de la v√©rification de l'expiration du token:",
            error
          );
        }
      };

      // V√©rifier imm√©diatement au chargement
      checkTokenExpiration();

      // Puis v√©rifier toutes les 5 minutes
      const tokenCheckInterval = setInterval(
        checkTokenExpiration,
        5 * 60 * 1000
      );

      // Nettoyer l'intervalle au d√©montage
      return () => {
        clearInterval(tokenCheckInterval);
      };
    }
  }, [isAuthenticated]);

  // Au chargement initial, obtenir un token CSRF et v√©rifier l'authentification
  useEffect(() => {
    // Initialiser le token CSRF
    const initApp = async () => {
      // R√©cup√©rer un token CSRF au d√©marrage
      await fetchCsrfToken();

      // V√©rifier l'authentification
      await checkInitialAuth();
    };

    initApp();
  }, []);

  // V√©rifier l'authentification initiale
  const checkInitialAuth = async () => {
    console.log("V√©rification de l'authentification initiale...");
    setIsLoading(true);

    // Ajouter un timeout de s√©curit√© pour √©viter le blocage ind√©fini
    const timeoutId = setTimeout(() => {
      console.warn("Timeout lors de la v√©rification d'authentification");
      setIsLoading(false);
      setUser(null);
    }, 8000); // 8 secondes maximum

    try {
      // V√©rifier s'il y a un token en local storage (v√©rifier les deux cl√©s possibles)
      const storedToken =
        localStorage.getItem("token") || localStorage.getItem("accessToken");
      if (!storedToken) {
        console.log("Aucun token trouv√© dans le localStorage");
        clearTimeout(timeoutId);
        setIsLoading(false);
        return;
      }

      // Stocker le token sous les deux formats pour assurer la compatibilit√©
      localStorage.setItem("token", storedToken);
      localStorage.setItem("accessToken", storedToken);

      // V√©rifier le token aupr√®s du serveur - CORRECTION: utiliser /api/auth/verify au lieu de /auth/verify
      const response = await axios.get(`${API_URL}/api/auth/verify`, {
        withCredentials: true,
        headers: {
          Authorization: `Bearer ${storedToken}`, // Ajouter explicitement le token dans l'en-t√™te
        },
      });

      console.log("R√©ponse de v√©rification:", response.data);

      // V√©rifier si l'utilisateur est authentifi√© selon la nouvelle structure
      if (response.data.isAuthenticated) {
        // Stocker les informations de l'utilisateur
        setUser(response.data.user);
        setIsAuthenticated(true);

        // Mettre √† jour le localStorage si n√©cessaire
        if (
          !localStorage.getItem("user") ||
          JSON.parse(localStorage.getItem("user")?._id) !==
            response.data.user._id
        ) {
          localStorage.setItem("user", JSON.stringify(response.data.user));
        }

        // Initialiser la connexion WebSocket
        if (connect) {
          connect();
        }
      } else {
        // Non authentifi√© - message facultatif dans la console
        console.log(
          "V√©rification d'authentification: non authentifi√©",
          response.data.message
        );
        // Effacer les donn√©es utilisateur
        setUser(null);
        setIsAuthenticated(false);
        localStorage.removeItem("user");

        // Supprimer les tokens s'ils sont expir√©s ou invalides
        if (
          response.data.message &&
          (response.data.message.includes("expir√©") ||
            response.data.message.includes("invalide"))
        ) {
          console.log("Suppression du token expir√© ou invalide");
          localStorage.removeItem("token");
          localStorage.removeItem("accessToken");
        }
      }
    } catch (error) {
      console.error(
        "Erreur lors de la v√©rification de l'authentification initiale:",
        error
      );
      // En cas d'erreur, consid√©rer l'utilisateur comme non authentifi√©
      setUser(null);
      setIsAuthenticated(false);
      localStorage.removeItem("user");
      // Ne pas supprimer le token en cas d'erreur r√©seau temporaire
    } finally {
      clearTimeout(timeoutId);
      setIsLoading(false);
    }
  };

  // Fonction pour v√©rifier et renouveler le token si n√©cessaire
  const ensureValidToken = async () => {
    // R√©cup√©rer le token du localStorage
    let currentToken = localStorage.getItem("token");

    if (!currentToken) {
      console.warn("Aucun token d'authentification trouv√©");
      setIsAuthenticated(false);
      setUser(null);
      setToken(null);
      return null;
    }

    return currentToken;
  };

  // Fonction pour r√©cup√©rer le token authentifi√©
  const getToken = async () => {
    return await ensureValidToken();
  };

  // Fonction pour d√©finir l'utilisateur avec le r√¥le admin par d√©faut
  const setUserWithAdminRole = (userData) => {
    // S'assurer que l'utilisateur a un r√¥le (admin par d√©faut)
    const userWithRole = {
      ...userData,
      role: userData.role || "admin",
    };

    // Mettre √† jour l'√©tat
    setUser(userWithRole);
    localStorage.setItem("user", JSON.stringify(userWithRole));

    return userWithRole;
  };

  // Fonction pour mettre √† jour les informations utilisateur
  const updateUser = (userData) => {
    if (!userData) {
      console.error(
        "Tentative de mise √† jour avec des donn√©es utilisateur nulles"
      );
      return null;
    }

    // Mettre √† jour l'√©tat et le stockage local
    const updatedUser = setUserWithAdminRole(userData);
    console.log("Utilisateur mis √† jour:", updatedUser);
    notifyDataChange("user"); // Notifier les autres onglets

    return updatedUser;
  };

  // Fonction pour mettre √† jour le profil utilisateur
  const updateUserProfile = async (userData) => {
    try {
      const response = await apiRequest("/user/profile", "PUT", userData);

      if (response && response.success) {
        // Mettre √† jour les informations utilisateur localement
        const updatedUser = {
          ...user,
          ...response.user,
        };
        updateUser(updatedUser);
        return {
          success: true,
          message: "Profil mis √† jour avec succ√®s",
        };
      } else {
        return {
          success: false,
          message:
            response?.message || "Erreur lors de la mise √† jour du profil",
        };
      }
    } catch (error) {
      console.error("Erreur lors de la mise √† jour du profil:", error);
      return {
        success: false,
        message: error.message || "Erreur lors de la mise √† jour du profil",
      };
    }
  };

  // Fonction pour rafra√Æchir le token CSRF
  const refreshCsrfToken = async () => {
    console.log("üîÑ Tentative de rafra√Æchissement du token CSRF");

    const MAX_RETRIES = 3;
    let retryCount = 0;
    let success = false;

    while (retryCount < MAX_RETRIES && !success) {
      try {
        if (retryCount > 0) {
          console.log(
            `üîÅ Nouvelle tentative (${retryCount}/${MAX_RETRIES}) de r√©cup√©ration du token CSRF`
          );
          // Attendre un d√©lai progressif avant de r√©essayer (1s, 2s, 3s)
          await new Promise((resolve) =>
            setTimeout(resolve, retryCount * 1000)
          );
        }

        // V√©rifier le cookie CSRF existant
        const existingCsrf = document.cookie
          .split(";")
          .find((cookie) => cookie.trim().startsWith("XSRF-TOKEN="));

        console.log(
          `üîç Cookie CSRF existant: ${existingCsrf ? "Pr√©sent" : "Absent"}`
        );

        // Construire l'URL compl√®te pour le token CSRF
        const csrfUrl = getApiUrl("/csrf-token");
        console.log(`üì° URL de la requ√™te CSRF: ${csrfUrl}`);

        // Effectuer la requ√™te pour obtenir un nouveau token CSRF
        // Utiliser fetch directement pour contourner les probl√®mes potentiels avec axios
        const response = await fetch(csrfUrl, {
          method: "GET",
          credentials: "include", // Important pour les cookies
        });

        if (!response.ok) {
          throw new Error(
            `Erreur HTTP lors de la r√©cup√©ration du CSRF: ${response.status} ${response.statusText}`
          );
        }

        const data = await response.json();
        console.log("üì• R√©ponse CSRF re√ßue:", data);

        // V√©rifier si la r√©ponse contient le token CSRF
        if (data && data.csrfToken) {
          console.log("‚úÖ Nouveau token CSRF re√ßu dans la r√©ponse");
          // Stocker le token si pr√©sent dans la r√©ponse
          getStoredCsrfToken(data.csrfToken);
        }

        // V√©rifier le cookie apr√®s la requ√™te
        const newCsrf = document.cookie
          .split(";")
          .find((cookie) => cookie.trim().startsWith("XSRF-TOKEN="));

        if (newCsrf) {
          console.log("‚úÖ Cookie CSRF bien mis √† jour");
          // Extraire et stocker la valeur du cookie
          const csrfValue = newCsrf.split("=")[1];
          console.log(
            `üîë Nouvelle valeur du cookie CSRF: ${csrfValue.substring(
              0,
              10
            )}...`
          );
          success = true;
          return true;
        } else {
          console.warn("‚ö†Ô∏è Cookie CSRF non trouv√© apr√®s la requ√™te");
          retryCount++;
        }
      } catch (error) {
        console.error(
          `‚ùå Erreur lors de la tentative ${
            retryCount + 1
          }/${MAX_RETRIES} de r√©cup√©ration du token CSRF:`,
          error
        );
        retryCount++;

        // Si c'est la derni√®re tentative, propager l'erreur
        if (retryCount >= MAX_RETRIES) {
          return false;
        }
      }
    }

    // Si toutes les tentatives ont √©chou√©
    if (!success) {
      console.error(
        "‚ùå √âchec de r√©cup√©ration du token CSRF apr√®s plusieurs tentatives"
      );
      return false;
    }

    return true;
  };

  // Fonction pour pr√©parer le changement de mot de passe
  const preparePasswordChange = async () => {
    try {
      // Rafra√Æchir le token CSRF avant de changer le mot de passe
      await refreshCsrfToken();

      return {
        success: true,
        message: "Pr√©paration au changement de mot de passe r√©ussie",
      };
    } catch (error) {
      console.error(
        "Erreur lors de la pr√©paration au changement de mot de passe:",
        error
      );
      return {
        success: false,
        message:
          "Erreur lors de la pr√©paration au changement de mot de passe: " +
          error.message,
      };
    }
  };

  // Fonction pour se connecter
  const login = async (email, password) => {
    try {
      setIsLoading(true);
      setLoginError(null);

      console.log(`üîë [Auth] Tentative de connexion pour: ${email}`);

      // S'assurer d'avoir un token CSRF
      const csrfToken = await getCsrfToken();
      if (!csrfToken) {
        console.warn("‚ö†Ô∏è [Auth] Connexion sans token CSRF, risque de 403");
      } else {
        console.log(
          `‚úÖ [Auth] Token CSRF disponible pour la connexion: ${csrfToken.substring(
            0,
            10
          )}...`
        );
      }

      // Utiliser l'URL API compl√®te avec getApiUrl au lieu de l'URL relative
      const apiEndpoint = getApiUrl("/api/auth/login");
      console.log(`üîÑ [Auth] URL de connexion utilis√©e: ${apiEndpoint}`);

      // Utiliser axios pour la requ√™te de connexion (avec l'intercepteur CSRF)
      const response = await axios.post(
        apiEndpoint,
        { email, password },
        {
          withCredentials: true,
          headers: {
            "Content-Type": "application/json",
            Accept: "application/json",
            // Le token est ajout√© automatiquement par l'intercepteur, mais on peut le forcer ici
            "X-CSRF-Token": csrfToken,
          },
        }
      );

      if (!response.data) {
        throw new Error("R√©ponse vide du serveur");
      }

      console.log("‚úÖ [Auth] Connexion r√©ussie:", response.data);

      // Stocker le token d'acc√®s
      if (response.data.accessToken) {
        console.log(
          `üîê [Auth] Stockage du token JWT: ${response.data.accessToken.substring(
            0,
            15
          )}...`
        );
        localStorage.setItem("token", response.data.accessToken);
      } else {
        console.warn("‚ö†Ô∏è [Auth] Aucun token re√ßu dans la r√©ponse de connexion");
      }

      // D√©finir l'utilisateur dans le state
      setUser(response.data.user || response.data);
      setIsAuthenticated(true);
      setIsLoading(false);
      setLoginError(null);

      // Si le WebSocket est configur√©, se connecter
      if (connect) {
        connect();
      }

      return true;
    } catch (error) {
      console.error("‚ùå [Auth] Erreur lors de la connexion:", error);

      // Log d√©taill√© de l'erreur pour aider au diagnostic
      if (error.response) {
        console.error(`Statut d'erreur: ${error.response.status}`);
        console.error(`Message du serveur:`, error.response.data);

        // Erreur CSRF
        if (
          error.response.status === 403 &&
          error.response.data?.message?.includes("CSRF")
        ) {
          setLoginError(
            "Erreur de s√©curit√© CSRF. Veuillez recharger la page et r√©essayer."
          );
        } else {
          setLoginError(
            error.response.data?.message || "Erreur lors de la connexion"
          );
        }
      } else if (error.request) {
        console.error(
          `Erreur r√©seau - Pas de r√©ponse du serveur:`,
          error.request
        );
        setLoginError(
          "Impossible de joindre le serveur. V√©rifiez votre connexion internet."
        );
      } else {
        console.error(`Erreur:`, error.message);
        setLoginError(error.message || "Erreur lors de la connexion");
      }

      setIsLoading(false);
      throw error;
    }
  };

  // Fonction pour s'inscrire
  const register = async (userData) => {
    try {
      setIsLoading(true);
      setLoginError(null);

      // Rafra√Æchir le token CSRF avant l'inscription
      await refreshCsrfToken();

      // Effectuer la requ√™te d'inscription
      const response = await apiRequest("/api/auth/register", "POST", userData);
      console.log("R√©ponse d'inscription re√ßue:", response);

      if (response && response.success) {
        // R√©cup√©rer le token et les informations utilisateur
        const userToken = response.token || response.accessToken;
        const refreshToken = response.refreshToken;
        const userInfo = response.user;

        console.log("Token re√ßu:", userToken ? "Oui" : "Non");
        console.log("RefreshToken re√ßu:", refreshToken ? "Oui" : "Non");
        console.log("User info re√ßues:", userInfo ? "Oui" : "Non");

        // Stocker le token dans localStorage
        if (userToken) {
          localStorage.setItem("token", userToken);
          setToken(userToken);
        }

        // Mettre √† jour les informations utilisateur
        if (userInfo) {
          updateUser(userInfo);
        }

        setIsAuthenticated(true);
        setLoginError(null);

        return {
          success: true,
          message: "Inscription r√©ussie",
          user: userInfo,
        };
      } else {
        const errorMsg = response?.message || "Erreur lors de l'inscription";
        setLoginError(errorMsg);
        return {
          success: false,
          message: errorMsg,
        };
      }
    } catch (error) {
      console.error("Erreur lors de l'inscription:", error);
      const errorMsg = error.message || "Erreur lors de l'inscription";
      setLoginError(errorMsg);
      return {
        success: false,
        message: errorMsg,
      };
    } finally {
      setIsLoading(false);
    }
  };

  // Fonction pour se d√©connecter
  const logout = () => {
    try {
      // Supprimer les informations d'authentification
      localStorage.removeItem("token");
      localStorage.removeItem("user");

      // Fermer les connexions WebSocket
      disconnect();

      // Mettre √† jour l'√©tat
      setIsAuthenticated(false);
      setUser(null);
      setToken(null);

      // Effectuer une requ√™te de d√©connexion au backend (sans attendre la r√©ponse)
      apiRequest("/api/auth/logout", "POST").catch((error) => {
        console.error("Erreur lors de la d√©connexion:", error);
      });

      return {
        success: true,
        message: "D√©connexion r√©ussie",
      };
    } catch (error) {
      console.error("Erreur lors de la d√©connexion:", error);
      return {
        success: false,
        message: error.message || "Erreur lors de la d√©connexion",
      };
    }
  };

  // Fonction pour se connecter avec Google (redirection)
  const loginWithGoogle = async () => {
    try {
      window.location.href = getApiUrl("/api/auth/google");
      return { success: true };
    } catch (error) {
      console.error("Erreur lors de la redirection vers Google:", error);
      return {
        success: false,
        message: error.message || "Erreur lors de la connexion avec Google",
      };
    }
  };

  // Fonction pour demander la suppression du compte
  const requestAccountDeletion = async () => {
    try {
      // Rafra√Æchir le token CSRF avant la demande
      await refreshCsrfToken();

      const response = await apiRequest(
        "/api/auth/request-account-deletion",
        "POST"
      );

      return {
        success: true,
        message: response?.message || "Demande de suppression envoy√©e",
      };
    } catch (error) {
      console.error("Erreur lors de la demande de suppression:", error);
      return {
        success: false,
        message:
          error.message || "Erreur lors de la demande de suppression de compte",
      };
    }
  };

  // Fonction pour confirmer la suppression du compte
  const confirmAccountDeletion = async (token) => {
    try {
      // Rafra√Æchir le token CSRF avant la confirmation
      await refreshCsrfToken();

      const response = await apiRequest(
        "/api/auth/confirm-account-deletion",
        "POST",
        { token }
      );

      // Si la suppression est r√©ussie, d√©connecter l'utilisateur
      if (response && response.success) {
        logout();
      }

      return {
        success: true,
        message: response?.message || "Compte supprim√© avec succ√®s",
      };
    } catch (error) {
      console.error("Erreur lors de la confirmation de suppression:", error);
      return {
        success: false,
        message:
          error.message ||
          "Erreur lors de la confirmation de suppression de compte",
      };
    }
  };

  // Fonction pour rafra√Æchir le token d'authentification
  const refreshToken = async () => {
    try {
      console.log("Rafra√Æchissement du token d'authentification...");

      // Rafra√Æchir d'abord le token CSRF
      await refreshCsrfToken();

      const response = await apiRequest("/api/auth/refresh", "POST");
      console.log("R√©ponse de rafra√Æchissement re√ßue:", response);

      if (response && response.success) {
        // R√©cup√©rer le nouveau token
        const newToken = response.token || response.accessToken;
        const refreshToken = response.refreshToken;

        console.log("Nouveau token re√ßu:", newToken ? "Oui" : "Non");
        console.log("Nouveau refreshToken re√ßu:", refreshToken ? "Oui" : "Non");

        if (newToken) {
          console.log("Nouveau token re√ßu");
          localStorage.setItem("token", newToken);
          localStorage.setItem("accessToken", newToken);
          setToken(newToken);
        } else {
          console.warn("Aucun token dans la r√©ponse de rafra√Æchissement");
        }

        // Mettre √† jour les informations utilisateur si disponibles
        if (response.user) {
          updateUser(response.user);
        }

        return {
          success: true,
          message: "Token rafra√Æchi avec succ√®s",
        };
      } else {
        console.warn("√âchec du rafra√Æchissement du token:", response?.message);
        return {
          success: false,
          message: response?.message || "√âchec du rafra√Æchissement du token",
        };
      }
    } catch (error) {
      console.error("Erreur lors du rafra√Æchissement du token:", error);
      return {
        success: false,
        message: error.message || "Erreur lors du rafra√Æchissement du token",
      };
    }
  };

  // Fonction pour changer le mot de passe
  const changePassword = async (currentPassword, newPassword) => {
    try {
      // Rafra√Æchir le token CSRF avant le changement de mot de passe
      await refreshCsrfToken();

      const response = await apiRequest("/api/users/change-password", "POST", {
        currentPassword,
        newPassword,
      });

      if (response && response.success) {
        return {
          success: true,
          message: response.message || "Mot de passe chang√© avec succ√®s",
        };
      } else {
        return {
          success: false,
          message:
            response?.message || "Erreur lors du changement de mot de passe",
        };
      }
    } catch (error) {
      console.error("Erreur lors du changement de mot de passe:", error);
      return {
        success: false,
        message: error.message || "Erreur lors du changement de mot de passe",
      };
    }
  };

  // Composant pour la modale d'inactivit√©
  const InactivityModal = () => {
    if (!showInactivityModal) return null;

    return (
      <StyledInactivityModal>
        <StyledModalContent>
          <h2>Session inactive</h2>
          <p>
            Vous serez d√©connect√© automatiquement dans 1 minute en raison
            d'inactivit√©.
          </p>
          <button onClick={resetInactivityTimer}>Rester connect√©</button>
        </StyledModalContent>
      </StyledInactivityModal>
    );
  };

  // Valeur du contexte √† fournir
  const contextValue = {
    isAuthenticated,
    isLoading,
    user,
    token,
    getToken,
    login,
    loginWithGoogle,
    logout,
    register,
    loginError,
    updateUser: updateUserProfile,
    requestAccountDeletion,
    confirmAccountDeletion,
    preparePasswordChange,
    refreshToken,
    changePassword,
  };

  return (
    <AuthContext.Provider value={contextValue}>
      {children}
      <InactivityModal />
    </AuthContext.Provider>
  );
};
