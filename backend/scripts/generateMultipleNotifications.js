/**
 * Script pour g√©n√©rer de nombreuses notifications de test
 *
 * Utilise le script testNotifications.js pour cr√©er un grand nombre de notifications
 * afin de tester la performance et l'affichage du syst√®me de notifications
 */

const { createTestNotification } = require("./testNotifications");
const db = require("../config/db");

// Fonction pour obtenir tous les utilisateurs actifs
async function getActiveUsers() {
  try {
    // Requ√™te modifi√©e pour obtenir tous les utilisateurs (sans condition status)
    const [users] = await db.query("SELECT id FROM users LIMIT 10");
    if (users && users.length > 0) {
      return users.map((user) => user.id);
    } else {
      console.warn(
        "Aucun utilisateur trouv√©, utilisation de l'ID 1 par d√©faut"
      );
      return [1];
    }
  } catch (error) {
    console.error("Erreur lors de la r√©cup√©ration des utilisateurs:", error);
    return [1]; // Fallback √† l'ID 1
  }
}

// Types de contenus possibles pour les notifications
const notificationContents = [
  {
    type: "info",
    titles: [
      "Mise √† jour du syst√®me",
      "Nouvel employ√© ajout√©",
      "Maintenance planifi√©e",
      "Rappel de r√©union",
      "Mise √† jour des proc√©dures",
    ],
    messages: [
      "Une mise √† jour du syst√®me est pr√©vue pour demain √† 18h00.",
      "Un nouvel employ√© a √©t√© ajout√© √† votre √©quipe.",
      "Une maintenance est pr√©vue ce weekend.",
      "Rappel: r√©union d'√©quipe demain √† 10h00.",
      "Les proc√©dures ont √©t√© mises √† jour, veuillez les consulter.",
    ],
  },
  {
    type: "success",
    titles: [
      "Objectif atteint",
      "Op√©ration r√©ussie",
      "Projet termin√©",
      "Demande approuv√©e",
      "Employ√© du mois",
    ],
    messages: [
      "Votre √©quipe a atteint son objectif mensuel!",
      "L'op√©ration a √©t√© r√©alis√©e avec succ√®s.",
      "Le projet a √©t√© termin√© dans les d√©lais.",
      "Votre demande a √©t√© approuv√©e par la direction.",
      "F√©licitations! Vous √™tes l'employ√© du mois.",
    ],
  },
  {
    type: "warning",
    titles: [
      "Retard de livraison",
      "√âch√©ance imminente",
      "Stock faible",
      "Absence non justifi√©e",
      "V√©rification requise",
    ],
    messages: [
      "Un retard de livraison est pr√©vu pour la commande #12345.",
      "L'√©ch√©ance du projet approche rapidement.",
      "Le stock de fournitures est faible, veuillez commander.",
      "Une absence non justifi√©e a √©t√© enregistr√©e.",
      "Veuillez v√©rifier les donn√©es saisies avant validation.",
    ],
  },
  {
    type: "error",
    titles: [
      "Erreur syst√®me",
      "√âchec de l'op√©ration",
      "Probl√®me de connexion",
      "Donn√©es invalides",
      "Service indisponible",
    ],
    messages: [
      "Une erreur syst√®me s'est produite, veuillez contacter le support.",
      "L'op√©ration a √©chou√©, veuillez r√©essayer.",
      "Un probl√®me de connexion a √©t√© d√©tect√©.",
      "Les donn√©es saisies sont invalides, veuillez les corriger.",
      "Le service est temporairement indisponible.",
    ],
  },
];

// Fonction pour g√©n√©rer un contenu al√©atoire
function getRandomContent(type) {
  const contentType = notificationContents.find((c) => c.type === type);
  if (!contentType)
    return { title: "Notification", message: "Contenu de notification" };

  const titleIndex = Math.floor(Math.random() * contentType.titles.length);
  const messageIndex = Math.floor(Math.random() * contentType.messages.length);

  return {
    title: contentType.titles[titleIndex],
    message: contentType.messages[messageIndex],
  };
}

// Fonction pour g√©n√©rer de nombreuses notifications
async function generateMultipleNotifications(count = 20) {
  try {
    console.log(`üîî G√©n√©ration de ${count} notifications de test`);
    console.log("-----------------------------------");

    // R√©cup√©rer les utilisateurs actifs
    const userIds = await getActiveUsers();
    console.log(`Utilisateurs disponibles pour les tests: ${userIds.length}`);

    const types = ["info", "success", "warning", "error"];
    const results = [];
    let successCount = 0;
    let errorCount = 0;

    // G√©n√©rer les notifications
    for (let i = 0; i < count; i++) {
      try {
        // Choisir un utilisateur al√©atoire
        const userId = userIds[Math.floor(Math.random() * userIds.length)];

        // Choisir un type al√©atoire
        const type = types[Math.floor(Math.random() * types.length)];

        // Obtenir un contenu al√©atoire pour ce type
        const content = getRandomContent(type);

        // Cr√©er la notification
        const notificationData = {
          user_id: userId,
          title: content.title,
          message: `${content.message} (Test #${i + 1})`,
          type: type,
          entity_type: "test",
          entity_id: Math.floor(Math.random() * 1000),
          link: "/activities",
        };

        // Ne pas afficher chaque notification pour √©viter de surcharger la console
        if (i < 5 || i === count - 1) {
          console.log(
            `Cr√©ation de la notification #${i + 1}/${count} (${type}):`
          );
        } else if (i === 5) {
          console.log(
            `... cr√©ation des ${count - 5} notifications restantes ...`
          );
        }

        // Utiliser le mod√®le pour cr√©er la notification
        const notification = await createTestNotification(userId, type);
        if (notification) {
          successCount++;
          results.push(notification);
        } else {
          errorCount++;
        }

        // Petite pause entre chaque notification pour ne pas surcharger la DB
        if (i % 5 === 0 && i < count - 1) {
          await new Promise((resolve) => setTimeout(resolve, 200));
        }
      } catch (error) {
        console.error(
          `‚ùå Erreur lors de la cr√©ation de la notification #${i + 1}:`,
          error
        );
        errorCount++;
      }
    }

    console.log("-----------------------------------");
    console.log(
      `‚úÖ G√©n√©ration termin√©e: ${successCount} r√©ussies, ${errorCount} √©chou√©es`
    );

    return {
      success: true,
      total: count,
      succeeded: successCount,
      failed: errorCount,
      notifications: results.slice(0, 5), // Retourner seulement les 5 premi√®res pour ne pas surcharger la r√©ponse
    };
  } catch (error) {
    console.error("‚ùå Erreur lors de la g√©n√©ration des notifications:", error);
    return {
      success: false,
      error: error.message,
    };
  } finally {
    // Fermer la connexion √† la base de donn√©es
    await db.end();
  }
}

// Ex√©cuter le script si appel√© directement
if (require.main === module) {
  // R√©cup√©rer le nombre de notifications depuis les arguments, par d√©faut 20
  const count = process.argv[2] ? parseInt(process.argv[2]) : 20;

  generateMultipleNotifications(count)
    .then((result) => {
      if (result.success) {
        console.log(
          `Le script a g√©n√©r√© ${result.succeeded}/${result.total} notifications avec succ√®s`
        );
        process.exit(0);
      } else {
        console.error("Le script a √©chou√©:", result.error);
        process.exit(1);
      }
    })
    .catch((error) => {
      console.error("Erreur non g√©r√©e dans le script:", error);
      process.exit(1);
    });
}

module.exports = generateMultipleNotifications;
