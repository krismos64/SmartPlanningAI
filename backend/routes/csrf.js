const express = require("express");
const router = express.Router();
////////////////////////////////////////////////////////////////
// üîç Debug complet de la session et des cookies dans /csrf-token
const chalk = require("chalk"); // optionnel si tu veux colorer les logs
////////////////////////////////////////////////////////////////
const crypto = require("crypto");

/**
 * @route   GET /api/csrf-token
 * @desc    G√©n√®re et retourne un token CSRF avec cookie
 * @access  Public
 */
router.get("/csrf-token", (req, res) => {
  console.log(chalk.blue("\nüß™ [CSRF] Appel re√ßu sur /api/csrf-token"));
  console.log("üì• [CSRF] Headers re√ßus:", req.headers);
  console.log("üç™ [CSRF] Cookies re√ßus:", req.cookies);
  console.log("üîê [CSRF] Session ID:", req.sessionID || "Non disponible");

  // V√©rification de la session
  if (!req.session) {
    console.error(chalk.red("‚ùå [SESSION] req.session est undefined !"));
    console.trace(chalk.red("üîé Stack trace pour req.session manquant"));
    return res.status(500).json({
      success: false,
      error: "SESSION_MISSING",
      message:
        "Session non initialis√©e. V√©rifiez la configuration d'express-session.",
    });
  }

  // G√©n√©ration du token avec UUID v4 (al√©atoire)
  const csrfToken = crypto.randomUUID();

  // Sauvegarde du token dans la session
  req.session.csrfToken = csrfToken;
  req.session.csrfTokenCreatedAt = Date.now();

  // Sauvegarde explicite de la session pour s'assurer qu'elle est persist√©e
  req.session.save((err) => {
    if (err) {
      console.error(
        chalk.red("‚ùå [SESSION] Erreur lors de la sauvegarde de la session:"),
        err
      );
      // On continue malgr√© l'erreur car le cookie sera quand m√™me envoy√©
    } else {
      console.log(chalk.green("‚úÖ [SESSION] Session sauvegard√©e avec succ√®s"));
    }
  });

  // Informations de debug
  console.log(chalk.blue("üì¶ Session ID:"), req.sessionID);
  console.log(chalk.green("üîê Token CSRF g√©n√©r√©:"), csrfToken);
  console.log(chalk.yellow("üß† Contenu complet de la session:"), req.session);

  // D√©finition dynamique du cookie XSRF-TOKEN
  const isProd = process.env.NODE_ENV === "production";
  const oneDayInMs = 24 * 60 * 60 * 1000;

  // Configurer le cookie XSRF-TOKEN (doit √™tre accessible via JavaScript)
  res.cookie("XSRF-TOKEN", csrfToken, {
    httpOnly: false, // IMPORTANT: doit √™tre false pour √™tre accessible en JS c√¥t√© client
    secure: isProd, // S√©curis√© uniquement en production (HTTPS)
    sameSite: isProd ? "none" : "lax", // Important pour CORS en production
    path: "/",
    maxAge: oneDayInMs,
    domain: isProd ? "smartplanning.fr" : undefined, // Domaine en production uniquement
  });

  // V√©rification des headers envoy√©s
  const sentCookies = res.getHeaders()["set-cookie"];
  console.log(
    chalk.magenta("üç™ [Set-Cookie] Headers envoy√©s:"),
    sentCookies || "Aucun"
  );

  // Envoi du token dans la r√©ponse pour les clients qui n'utilisent pas les cookies
  res.json({
    success: true,
    csrfToken,
    message: "Token CSRF g√©n√©r√© avec succ√®s",
    expiresIn: "24h",
    createdAt: req.session.csrfTokenCreatedAt,
    cookieSet: !!sentCookies,
    sessionID: req.sessionID,
  });
});

module.exports = router;
