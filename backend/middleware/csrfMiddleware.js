const crypto = require("crypto");

// Configuration
const CSRF_CONFIG = {
  secretLength: 32, // 256 bits
  tokenExpiration: 24 * 60 * 60 * 1000, // 24h
};

/**
 * Affiche les d√©tails complets d'une requ√™te pour le debugging
 * @param {Object} req - Objet de requ√™te Express
 */
const logRequestDetails = (req) => {
  console.log("\nüìù [CSRF DEBUG] D√©tails de la requ√™te:");
  console.log(`üìç URL: ${req.method} ${req.originalUrl}`);
  console.log("üîë En-t√™tes:");

  // En-t√™tes pertinents pour le CSRF
  const relevantHeaders = [
    "x-csrf-token",
    "csrf-token",
    "xsrf-token",
    "x-xsrf-token",
    "cookie",
    "origin",
    "referer",
  ];

  relevantHeaders.forEach((header) => {
    if (req.headers[header]) {
      console.log(`  ${header}: ${req.headers[header]}`);
    }
  });

  // Session si disponible
  if (req.session) {
    console.log(
      "üîê Session CSRF Token:",
      req.session.csrfToken
        ? `${req.session.csrfToken.substring(0, 10)}...`
        : "Non d√©fini"
    );
  }

  // Corps de la requ√™te (pour debugging - attention aux donn√©es sensibles!)
  if (req.body && Object.keys(req.body).length > 0) {
    const sanitizedBody = { ...req.body };
    // Masquer les donn√©es sensibles
    if (sanitizedBody.password) sanitizedBody.password = "******";
    if (sanitizedBody.token) sanitizedBody.token = "******";
    console.log("üì¶ Corps:", sanitizedBody);
  }

  console.log("");
};

/**
 * G√©n√®re un nouveau token CSRF et le stocke dans la session
 */
const generateCsrfToken = (req, res, next) => {
  try {
    // G√©n√©rer un token al√©atoire
    const csrfToken = crypto
      .randomBytes(CSRF_CONFIG.secretLength)
      .toString("hex");

    // Stocker le token dans la session
    if (req.session) {
      req.session.csrfToken = csrfToken;
      console.log(
        "‚úÖ [CSRF] Token stock√© dans la session:",
        csrfToken.substring(0, 10) + "..."
      );
    } else {
      console.error(
        "‚ùå [CSRF] Session non disponible pour stocker le token CSRF"
      );
    }

    // Exposer le token dans la r√©ponse
    res.locals.csrfToken = csrfToken;
    next();
  } catch (error) {
    console.error("Erreur lors de la g√©n√©ration du token CSRF:", error);
    res.status(500).json({ error: "Erreur de s√©curit√©" });
  }
};

/**
 * Middleware de v√©rification du token CSRF via l'en-t√™te X-CSRF-Token
 */
const verifyCsrfToken = (req, res, next) => {
  // Ne pas v√©rifier pour les m√©thodes GET, OPTIONS, HEAD
  if (["GET", "OPTIONS", "HEAD"].includes(req.method)) {
    return next();
  }

  // Log d√©taill√© pour debugging
  logRequestDetails(req);

  // R√©cup√©rer le token depuis les diff√©rents en-t√™tes possibles
  const csrfToken =
    req.headers["x-csrf-token"] ||
    req.headers["csrf-token"] ||
    req.headers["xsrf-token"] ||
    req.headers["x-xsrf-token"];

  // R√©cup√©rer le token stock√© dans la session
  const storedToken = req.session?.csrfToken;

  // Si aucun token n'est fourni dans l'en-t√™te
  if (!csrfToken) {
    console.error("‚õî [CSRF] Token manquant dans les en-t√™tes");
    console.error("En-t√™tes de la requ√™te:", req.headers);

    // En mode DEBUG, on peut temporairement d√©sactiver la v√©rification
    if (
      process.env.CSRF_DEBUG === "true" ||
      process.env.NODE_ENV === "development"
    ) {
      console.warn("‚ö†Ô∏è [CSRF] V√©rification CSRF ignor√©e en mode DEBUG");
      return next();
    }

    return res.status(403).json({
      success: false,
      message: "Acc√®s refus√© - Token CSRF manquant",
      error: "CSRF_TOKEN_MISSING",
    });
  }

  // Si aucun token n'est stock√© dans la session
  if (!storedToken) {
    console.error("‚õî [CSRF] Token non trouv√© dans la session");
    console.error("Token re√ßu:", csrfToken);

    // En mode DEBUG, on peut temporairement d√©sactiver la v√©rification
    if (
      process.env.CSRF_DEBUG === "true" ||
      process.env.NODE_ENV === "development"
    ) {
      console.warn("‚ö†Ô∏è [CSRF] V√©rification CSRF ignor√©e en mode DEBUG");
      return next();
    }

    return res.status(403).json({
      success: false,
      message: "Acc√®s refus√© - Session invalide ou expir√©e",
      error: "CSRF_SESSION_INVALID",
    });
  }

  // Comparaison des tokens (sensible √† la casse)
  if (csrfToken !== storedToken) {
    console.error("‚õî [CSRF] Token invalide");
    console.error(`  Re√ßu: ${csrfToken}`);
    console.error(`  Attendu: ${storedToken}`);

    // En mode DEBUG, on peut temporairement d√©sactiver la v√©rification
    if (
      process.env.CSRF_DEBUG === "true" ||
      process.env.NODE_ENV === "development"
    ) {
      console.warn(
        "‚ö†Ô∏è [CSRF] V√©rification CSRF ignor√©e en mode DEBUG - tokens ne correspondent pas"
      );
      return next();
    }

    return res.status(403).json({
      success: false,
      message: "Acc√®s refus√© - Token CSRF invalide",
      error: "CSRF_TOKEN_INVALID",
    });
  }

  // Token valide, continuer
  console.log("‚úÖ [CSRF] Validation r√©ussie");
  next();
};

module.exports = {
  generateCsrfToken,
  verifyCsrfToken,
  logRequestDetails,
  // Alias pour assurer la compatibilit√© avec les nouveaux appels
  generateCSRFToken: generateCsrfToken,
};
