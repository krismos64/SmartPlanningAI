const jwt = require("jsonwebtoken");
const config = require("../config/config");
const User = require("../models/User");
const logger = require("../utils/logger");
const { ACCESS_TOKEN_SECRET } = require("../utils/tokenUtils");

/**
 * Middleware pour v√©rifier le token d'acc√®s JWT
 * @param {Object} req - Requ√™te Express
 * @param {Object} res - R√©ponse Express
 * @param {Function} next - Fonction next d'Express
 */
const verifyToken = async (req, res, next) => {
  try {
    logger.debug("V√©rification du token d'authentification", {
      path: req.path,
      method: req.method,
    });

    // R√©cup√©rer le token depuis les cookies ou l'en-t√™te
    let token = req.cookies.accessToken;

    // Si pas de token dans les cookies, v√©rifier l'en-t√™te Authorization
    if (!token && req.headers.authorization) {
      const authHeader = req.headers.authorization;
      // Format attendu: "Bearer [token]"
      if (authHeader.startsWith("Bearer ")) {
        token = authHeader.substring(7);
        console.log("üîë [AUTH] Token r√©cup√©r√© depuis l'en-t√™te Authorization");
      }
    }

    // V√©rifier si le token existe
    if (!token) {
      // Journaliser la tentative d'authentification √©chou√©e
      logAuthAttempt(req, null, false, "Token manquant");

      logger.debug("Authentification refus√©e: token manquant", {
        path: req.path,
        ipAddress: req.ip,
      });

      return res.status(401).json({
        success: false,
        message: "Acc√®s refus√© - Token d'authentification manquant",
      });
    }

    // V√©rifier le token
    const decoded = jwt.verify(token, ACCESS_TOKEN_SECRET);
    console.log(
      `‚úÖ [AUTH] Token v√©rifi√© avec succ√®s pour userID: ${decoded.userId}`
    );

    // V√©rifier si l'utilisateur existe toujours
    const user = await User.findById(decoded.userId);

    if (!user) {
      // Journaliser la tentative d'authentification √©chou√©e
      logAuthAttempt(req, decoded.userId, false, "Utilisateur non trouv√©");

      logger.warn("Authentification refus√©e: utilisateur non trouv√©", {
        userId: decoded.userId,
        path: req.path,
        ipAddress: req.ip,
      });

      return res.status(401).json({
        success: false,
        message: "Utilisateur non trouv√©",
      });
    }

    // Si l'utilisateur est d√©sactiv√©
    if (user.isActive === false) {
      // Journaliser la tentative d'authentification √©chou√©e
      logAuthAttempt(req, user._id, false, "Compte d√©sactiv√©");

      logger.warn("Authentification refus√©e: compte d√©sactiv√©", {
        userId: user._id,
        email: user.email,
        path: req.path,
        ipAddress: req.ip,
      });

      return res.status(403).json({
        success: false,
        message: "Votre compte a √©t√© d√©sactiv√©",
      });
    }

    // Ajouter l'utilisateur et l'ID √† la requ√™te
    req.user = user;
    req.userId = decoded.userId;

    // D√©finir ou mettre √† jour l'utilisateur dans la session
    if (req.session && !req.session.user) {
      req.session.user = {
        id: user.id,
        email: user.email,
        role: user.role || "admin",
        first_name: user.first_name || "",
        last_name: user.last_name || "",
        name:
          `${user.first_name || ""} ${user.last_name || ""}`.trim() ||
          "Utilisateur",
      };
      console.log(`‚úÖ [AUTH] Session utilisateur cr√©√©e pour: ${user.email}`);
    }

    // Journaliser la tentative d'authentification r√©ussie
    logAuthAttempt(req, user._id, true);

    logger.debug("Authentification r√©ussie", {
      userId: user._id,
      email: user.email,
      role: user.role,
      path: req.path,
    });

    next();
  } catch (error) {
    // Journaliser l'erreur
    logAuthAttempt(req, null, false, error.message);

    logger.error("Erreur lors de la v√©rification du token", {
      error: error.message,
      path: req.path,
      ipAddress: req.ip,
      stack: error.stack,
    });

    // G√©rer les erreurs sp√©cifiques de JWT
    if (error.name === "TokenExpiredError") {
      return res.status(401).json({
        success: false,
        message: "Le token d'authentification a expir√©",
      });
    }

    if (error.name === "JsonWebTokenError") {
      return res.status(401).json({
        success: false,
        message: "Token d'authentification invalide",
      });
    }

    // Erreur g√©n√©rique
    return res.status(500).json({
      success: false,
      message: "Erreur lors de l'authentification",
    });
  }
};

/**
 * Journalise une tentative d'authentification
 * @param {Object} req - Requ√™te Express
 * @param {String} userId - ID de l'utilisateur (si disponible)
 * @param {Boolean} success - Si l'authentification a r√©ussi
 * @param {String} reason - Raison de l'√©chec (si applicable)
 */
const logAuthAttempt = (req, userId, success, reason = null) => {
  const level = success ? "INFO" : "WARN";
  const message = success
    ? "Authentification r√©ussie"
    : `Authentification √©chou√©e: ${reason}`;

  const details = {
    userId: userId || "anonyme",
    ipAddress: req.ip,
    userAgent: req.headers["user-agent"],
    path: req.path,
    method: req.method,
    timestamp: new Date().toISOString(),
    success,
  };

  // Si √©chec, ajouter la raison
  if (!success && reason) {
    details.reason = reason;
  }

  // Utiliser la fonction de journalisation d'authentification
  logger.auth(level, message, details);
};

/**
 * Middleware pour v√©rifier si l'utilisateur est administrateur
 * @param {Object} req - Requ√™te Express
 * @param {Object} res - R√©ponse Express
 * @param {Function} next - Fonction next d'Express
 */
const isAdmin = (req, res, next) => {
  if (req.user && req.user.role === "admin") {
    return next();
  }

  logger.warn("Acc√®s admin refus√©", {
    userId: req.userId,
    path: req.path,
    ipAddress: req.ip,
  });

  return res.status(403).json({
    success: false,
    message: "Acc√®s refus√© - Droits d'administrateur requis",
  });
};

/**
 * Middleware pour v√©rifier si l'utilisateur est employ√©
 * @param {Object} req - Requ√™te Express
 * @param {Object} res - R√©ponse Express
 * @param {Function} next - Fonction next d'Express
 */
const isEmployee = (req, res, next) => {
  if (req.user && (req.user.role === "admin" || req.user.role === "employee")) {
    return next();
  }

  logger.warn("Acc√®s employ√© refus√©", {
    userId: req.userId,
    path: req.path,
    ipAddress: req.ip,
  });

  return res.status(403).json({
    success: false,
    message: "Acc√®s refus√© - Droits d'employ√© requis",
  });
};

module.exports = {
  verifyToken,
  isAdmin,
  isEmployee,
};
