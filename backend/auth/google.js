const passport = require("passport");
const GoogleStrategy = require("passport-google-oauth20").Strategy;
const User = require("../models/User");

/**
 * Configuration de la strat√©gie d'authentification Google OAuth 2.0
 * Cette fonction initialise Passport.js avec la strat√©gie Google
 */
const setupGoogleStrategy = () => {
  // V√©rification des variables d'environnement requises
  if (!process.env.GOOGLE_CLIENT_ID || !process.env.GOOGLE_CLIENT_SECRET) {
    console.error(
      "‚ùå Erreur: GOOGLE_CLIENT_ID et GOOGLE_CLIENT_SECRET doivent √™tre d√©finis dans les variables d'environnement"
    );
    console.error("Variables d'environnement charg√©es:", {
      NODE_ENV: process.env.NODE_ENV,
      PORT: process.env.PORT,
      DB_HOST: process.env.DB_HOST,
      GOOGLE_CLIENT_ID: process.env.GOOGLE_CLIENT_ID ? "D√©fini" : "Non d√©fini",
      GOOGLE_CLIENT_SECRET: process.env.GOOGLE_CLIENT_SECRET
        ? "D√©fini"
        : "Non d√©fini",
    });
    return;
  }

  console.log("üîë Initialisation de la strat√©gie Google avec:");
  console.log(
    `- Client ID: ${process.env.GOOGLE_CLIENT_ID.substring(0, 10)}...`
  );
  console.log(`- Mode: ${process.env.NODE_ENV || "development"}`);

  // Configuration de la strat√©gie Google
  passport.use(
    new GoogleStrategy(
      {
        clientID: process.env.GOOGLE_CLIENT_ID,
        clientSecret: process.env.GOOGLE_CLIENT_SECRET,
        callbackURL:
          process.env.NODE_ENV === "production"
            ? "https://smartplanning.fr/api/auth/google/callback"
            : "http://localhost:5001/api/auth/google/callback",
        scope: ["profile", "email"],
        state: true,
      },
      async (accessToken, refreshToken, profile, done) => {
        try {
          if (!profile.emails || !profile.emails[0]) {
            return done(
              new Error("L'email est requis pour l'authentification"),
              null
            );
          }

          const email = profile.emails[0].value;
          let user = await User.findByEmail(email);

          if (user) {
            return done(null, user);
          }

          // Cr√©ation d'un nouvel utilisateur
          const newUser = await User.create({
            email: email,
            first_name: profile.name.givenName,
            last_name: profile.name.familyName,
            role: "admin",
            provider: "google",
            password: Math.random().toString(36).slice(-20),
            profileImage: profile.photos?.[0]?.value || null,
          });

          return done(null, newUser);
        } catch (error) {
          return done(error, null);
        }
      }
    )
  );

  console.log("‚úÖ Strat√©gie d'authentification Google configur√©e avec succ√®s");
};

// Ex√©cuter la configuration imm√©diatement
setupGoogleStrategy();

module.exports = setupGoogleStrategy;
