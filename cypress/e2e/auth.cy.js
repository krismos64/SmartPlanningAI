describe("Tests du cycle d'authentification SmartPlanning", () => {
  const API_URL = "https://smartplanning-api.onrender.com";
  const FRONTEND_URL = "https://smartplanning.fr";

  const TEST_USER = {
    email: "admin@demo.fr",
    validPassword: "demo1234",
    invalidPassword: "mauvais_mdp",
  };

  beforeEach(() => {
    // Nettoyer les cookies avant chaque test
    cy.clearCookies();
    cy.clearLocalStorage();

    cy.log("üß™ D√©but du test d'authentification cross-domain");
  });

  it("Devrait tester le cycle complet d'authentification", () => {
    // 1. Se rendre sur la page de connexion
    cy.log("üìç √âtape 1: Navigation vers la page de connexion");
    cy.visit(`${FRONTEND_URL}/login`);
    cy.url().should("include", "/login");

    // V√©rifier que l'interface de connexion est visible
    cy.get("form").should("be.visible");
    cy.get('input[type="email"]').should("be.visible");
    cy.get('input[type="password"]').should("be.visible");

    // 2. Saisir des identifiants corrects et se connecter
    cy.log("üìç √âtape 2: Connexion avec identifiants valides");
    cy.get('input[type="email"]').type(TEST_USER.email);
    cy.get('input[type="password"]').type(TEST_USER.validPassword);
    cy.get('button[type="submit"]').click();

    // Attendre le chargement du dashboard
    cy.url().should("include", "/dashboard", { timeout: 10000 });

    // 3. V√©rifier que l'utilisateur est connect√© (pr√©sence du cookie accessToken)
    cy.log("üìç √âtape 3: V√©rification des cookies apr√®s connexion");
    cy.getCookie("accessToken")
      .should("exist")
      .then((cookie) => {
        cy.log(`‚úÖ Cookie accessToken trouv√©: ${cookie.name}`);
      });
    cy.getCookie("refreshToken")
      .should("exist")
      .then((cookie) => {
        cy.log(`‚úÖ Cookie refreshToken trouv√©: ${cookie.name}`);
      });
    cy.getCookie("auth_token")
      .should("exist")
      .then((cookie) => {
        cy.log(`‚úÖ Cookie auth_token trouv√©: ${cookie.name}`);
      });

    // V√©rifier que les cookies ont bien les attributs s√©curis√©s
    cy.log("üìç V√©rification des attributs de s√©curit√© des cookies");
    cy.getCookies().then((cookies) => {
      const authCookies = cookies.filter((cookie) =>
        ["accessToken", "refreshToken", "auth_token"].includes(cookie.name)
      );

      authCookies.forEach((cookie) => {
        expect(cookie.secure).to.be.true;
        cy.log(`‚úÖ Cookie ${cookie.name} est marqu√© comme Secure`);
        // SameSite=None ne peut pas √™tre directement v√©rifi√© via Cypress
        // mais nous pouvons v√©rifier que le domaine est correct
        expect(cookie.domain).to.include("smartplanning");
        cy.log(`‚úÖ Cookie ${cookie.name} a le bon domaine: ${cookie.domain}`);
      });
    });

    // V√©rifier qu'un √©l√©ment du dashboard est pr√©sent
    cy.get("header").should("be.visible");
    cy.contains("Dashboard").should("be.visible");

    // 4. Recharger la page et confirmer que l'utilisateur reste connect√©
    cy.log(
      "üìç √âtape 4: Rechargement de la page pour v√©rifier la persistance de session"
    );
    cy.reload();
    cy.url().should("include", "/dashboard");
    cy.getCookie("accessToken")
      .should("exist")
      .then(() => {
        cy.log("‚úÖ Session persistante apr√®s rechargement");
      });

    // 5. Cliquer sur "D√©connexion"
    cy.log("üìç √âtape 5: D√©connexion");
    // Essayer plusieurs s√©lecteurs possibles pour le bouton de d√©connexion
    cy.get("body").then(($body) => {
      if ($body.find('[data-testid="logout-button"]').length > 0) {
        cy.get('[data-testid="logout-button"]').click();
      } else if ($body.find('[data-cy="logout"]').length > 0) {
        cy.get('[data-cy="logout"]').click();
      } else if ($body.find('button:contains("D√©connexion")').length > 0) {
        cy.contains("button", "D√©connexion").click();
      } else if ($body.find('a:contains("D√©connexion")').length > 0) {
        cy.contains("a", "D√©connexion").click();
      } else {
        cy.log(
          "‚ö†Ô∏è Bouton de d√©connexion non trouv√© avec les s√©lecteurs standards"
        );
        // Dernier recours: chercher dans tout le texte visible
        cy.contains("D√©connexion").click();
      }
    });

    // 6. V√©rifier que les cookies ont bien √©t√© supprim√©s
    cy.log(
      "üìç √âtape 6: V√©rification de la suppression des cookies apr√®s d√©connexion"
    );
    cy.getCookie("accessToken")
      .should("not.exist")
      .then(() => {
        cy.log("‚úÖ Cookie accessToken correctement supprim√©");
      });
    cy.getCookie("refreshToken")
      .should("not.exist")
      .then(() => {
        cy.log("‚úÖ Cookie refreshToken correctement supprim√©");
      });
    cy.getCookie("auth_token")
      .should("not.exist")
      .then(() => {
        cy.log("‚úÖ Cookie auth_token correctement supprim√©");
      });
    cy.getCookie("connect.sid")
      .should("not.exist")
      .then(() => {
        cy.log("‚úÖ Cookie connect.sid correctement supprim√©");
      });

    // V√©rifier qu'on est bien redirig√© vers la page de connexion
    cy.url().should("include", "/login");

    // 7. Connexion avec un mauvais mot de passe
    cy.log("üìç √âtape 7: Tentative de connexion avec mot de passe invalide");
    cy.get('input[type="email"]').type(TEST_USER.email);
    cy.get('input[type="password"]').type(TEST_USER.invalidPassword);
    cy.get('button[type="submit"]').click();

    // 8. V√©rifier qu'on ne se connecte pas et qu'un message d'erreur s'affiche
    cy.log(
      "üìç √âtape 8: V√©rification du rejet de connexion avec identifiants invalides"
    );
    cy.url().should("include", "/login");
    cy.get("body").then(($body) => {
      const errorMessages = [
        "Email ou mot de passe incorrect",
        "identifiants invalides",
        "Mot de passe incorrect",
      ];

      let errorFound = false;
      errorMessages.forEach((msg) => {
        if ($body.text().includes(msg)) {
          cy.log(`‚úÖ Message d'erreur trouv√©: "${msg}"`);
          errorFound = true;
        }
      });

      if (!errorFound) {
        cy.log(
          "‚ö†Ô∏è Message d'erreur sp√©cifique non trouv√©, mais la connexion a bien √©chou√©"
        );
      }
    });

    cy.getCookie("accessToken")
      .should("not.exist")
      .then(() => {
        cy.log("‚úÖ Aucun cookie accessToken cr√©√© apr√®s √©chec de connexion");
      });

    // 9. Tenter d'acc√©der √† une route prot√©g√©e
    cy.log(
      "üìç √âtape 9: Tentative d'acc√®s √† une route prot√©g√©e sans authentification"
    );
    cy.visit(`${FRONTEND_URL}/dashboard`);

    // V√©rifier qu'on est redirig√© vers la page de connexion
    cy.url()
      .should("include", "/login")
      .then(() => {
        cy.log(
          "‚úÖ Redirection correcte vers /login lors de l'acc√®s √† une route prot√©g√©e"
        );
      });
  });

  it("Devrait v√©rifier le comportement des appels API avec les cookies", () => {
    cy.log("üìç Test des appels API avec les cookies");
    // Se connecter en utilisant l'API directement pour avoir plus de contr√¥le
    cy.request({
      method: "POST",
      url: `${API_URL}/api/auth/login`,
      body: {
        email: TEST_USER.email,
        password: TEST_USER.validPassword,
      },
      headers: {
        Accept: "application/json",
      },
      failOnStatusCode: false,
    }).then((response) => {
      expect(response.status).to.eq(200);
      expect(response.body.success).to.be.true;
      cy.log(`‚úÖ Connexion API r√©ussie (statut: ${response.status})`);

      // V√©rifier que les cookies sont bien d√©finis
      cy.getCookie("accessToken").should("exist");
      cy.getCookie("refreshToken").should("exist");
      cy.log("‚úÖ Cookies correctement d√©finis apr√®s appel API");

      // Visiter le dashboard directement
      cy.visit(`${FRONTEND_URL}/dashboard`);
      cy.url().should("include", "/dashboard");
      cy.log("‚úÖ Acc√®s au dashboard apr√®s authentification API");

      // Tester le rafra√Æchissement du token
      cy.log("üìç Test du rafra√Æchissement de token via /api/auth/check");
      // Faisons une requ√™te vers une route prot√©g√©e
      cy.request({
        method: "GET",
        url: `${API_URL}/api/auth/check`,
        failOnStatusCode: false,
      }).then((checkResponse) => {
        expect(checkResponse.status).to.eq(200);
        expect(checkResponse.body.isAuthenticated).to.be.true;
        cy.log(
          `‚úÖ Route prot√©g√©e accessible (statut: ${checkResponse.status}, authentifi√©: ${checkResponse.body.isAuthenticated})`
        );
      });

      // Simuler une d√©connexion via l'API
      cy.log("üìç D√©connexion via API");
      cy.request({
        method: "POST",
        url: `${API_URL}/api/auth/logout`,
        failOnStatusCode: false,
      }).then((logoutResponse) => {
        expect(logoutResponse.status).to.eq(200);
        expect(logoutResponse.body.success).to.be.true;
        cy.log(`‚úÖ D√©connexion API r√©ussie (statut: ${logoutResponse.status})`);

        // V√©rifier que les cookies sont supprim√©s
        cy.getCookie("accessToken").should("not.exist");
        cy.getCookie("refreshToken").should("not.exist");
        cy.log("‚úÖ Cookies correctement supprim√©s apr√®s d√©connexion API");
      });
    });
  });

  it("Devrait v√©rifier le comportement de refresh token si disponible", () => {
    cy.log("üìç Test du m√©canisme de refresh token");
    // Se connecter normalement
    cy.visit(`${FRONTEND_URL}/login`);
    cy.get('input[type="email"]').type(TEST_USER.email);
    cy.get('input[type="password"]').type(TEST_USER.validPassword);
    cy.get('button[type="submit"]').click();

    // Attendre d'√™tre connect√©
    cy.url().should("include", "/dashboard");
    cy.log("‚úÖ Connexion r√©ussie pour le test de refresh token");

    // Modifier manuellement l'accessToken pour le rendre invalide
    // Cela va forcer l'utilisation du refresh token
    cy.getCookie("accessToken").then((cookie) => {
      // Supprimer juste le accessToken pour simuler son expiration
      cy.clearCookie("accessToken");
      cy.log(
        "üîÑ accessToken supprim√© manuellement pour simuler son expiration"
      );

      // Visiter une page prot√©g√©e, ce qui devrait d√©clencher le rafra√Æchissement
      cy.visit(`${FRONTEND_URL}/dashboard`);
      cy.log("üìç Tentative d'acc√®s au dashboard avec accessToken expir√©");

      // L'application devrait utiliser le refreshToken pour obtenir un nouveau accessToken
      // et rester connect√©e
      cy.url().should("include", "/dashboard");

      // V√©rifier qu'un nouveau accessToken a √©t√© g√©n√©r√©
      cy.getCookie("accessToken")
        .should("exist")
        .then(() => {
          cy.log("‚úÖ Nouveau accessToken g√©n√©r√© via refreshToken avec succ√®s");
        });
    });
  });

  afterEach(() => {
    cy.log("üìä R√âSUM√â DES TESTS");
    cy.log("----------------------------------");

    // Collecter les r√©sultats des tests
    const results = {
      "Connexion avec identifiants valides": null,
      "V√©rification des cookies apr√®s connexion": null,
      "Attributs de s√©curit√© des cookies": null,
      "Persistance de session apr√®s rechargement": null,
      "D√©connexion et suppression des cookies": null,
      "√âchec de connexion avec identifiants invalides": null,
      "Redirection sur acc√®s non autoris√©": null,
      "Appels API avec cookies auth": null,
      "Fonctionnement du refresh token": null,
    };

    // Afficher un r√©sum√© √† partir des tests ex√©cut√©s
    Object.keys(results).forEach((key) => {
      // En r√©alit√©, nous devrions r√©cup√©rer les r√©sultats r√©els des tests
      // mais Cypress ne facilite pas cela dans afterEach
      // Ici, nous allons juste afficher un message de r√©sum√©
      cy.log(`${key}: ‚úÖ ou ‚ùå (voir les logs d√©taill√©s)`);
    });

    cy.log("----------------------------------");
    cy.log("üèÅ Fin des tests d'authentification");
  });
});
